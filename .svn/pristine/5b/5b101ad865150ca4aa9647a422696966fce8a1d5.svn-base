package org.system.controller.impl;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.core.result.ResultCode;
import org.core.result.ResultMap;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.BindingResult;
import org.system.Global;
import org.system.controller.iface.IHospitalController;
import org.system.entity.Hospital;
import org.system.entity.doctor.DoctorGroup;
import org.system.message.Message;
import org.system.service.iface.IHospitalService;
import org.system.service.iface.doctor.IDoctorGroupService;



@Controller
public class HospitalController implements IHospitalController {
	
	Logger log = LoggerFactory.getLogger(HospitalController.class);
	
	@Resource
	private IHospitalService hospitalService;
	
	@Resource
	private IDoctorGroupService doctorGroupService;
	
	public Map<String, Object> insertHospital(Hospital hospital, BindingResult result,HttpServletRequest req, HttpServletResponse resp) {
		
		
			// 还需要判断code_value是否重复
			Hospital hospitalCodeValu= new Hospital();
			hospitalCodeValu.setCodeValue(hospital.getCodeValue());	
					Map<String, Object> doctorMapForCodeValue = hospitalService.getHospitalByFiled(hospitalCodeValu);
					if (doctorMapForCodeValue != null && doctorMapForCodeValue.size() > 0) {
						return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("hosptial.insert.codeValue.exists"));
					}
			
		     // 还需要判断name是否重复
				Hospital hospitalName= new Hospital();
				hospitalName.setName(hospital.getName());
				System.out.println(hospital.getName());
						Map<String, Object> doctorMapForName = hospitalService.getHospitalByFiled(hospitalName);						
						if (doctorMapForName != null && doctorMapForName.size() > 0) {
							return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("hosptial.insert.name.exists"));
						}
		
			int id=(int)hospitalService.queryCodeId(hospital);
			hospital.setAddressId(id);		
				// 检查数据是否存在
				Map<String, Object> dataMap = hospitalService.getHospitalByFiled(hospital);
				if (dataMap != null && dataMap.size() > 0) {
					return ResultMap.convertMap(ResultCode.CODE_DATA_EXISTS, Message.bundle("data.exists"));
				}
				if (hospitalService.insertHospital(hospital)> 0) {
					// 新增成功
					return ResultMap.convertMap(ResultCode.CODE_SUCCESS, Message.bundle("insert.success"));
				}
				// 新增失败
				return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("insert.fail"));
	}

	@Override
	@Transactional
	public Map<String, Object> updateHospital(Integer id, Hospital hospital, BindingResult result) {		
              int idd=(int)hospitalService.queryCodeId(hospital);
	      	  hospital.setAddressId(idd);
			  hospital.setId(id);
			  int num = hospitalService.getHospitalContract(hospital);
			if(num>0){// 查询该机构是否被签约了  签约了的机构不可以修改机构类型 及相关的数据
					if(hospitalService.updateHospitalContract(hospital)>0){
						return ResultMap.convertMap(ResultCode.CODE_SUCCESS, Message.bundle("update.success"));
					}else{
						return ResultMap.convertMap(ResultCode.CODE_SUCCESS, Message.bundle("hospital.exists.contract"));
					}
			}else{
				 //检查数据是否存在
				Map<String, Object> dataMap = hospitalService.getHospitalByFiled(hospital);
				if (dataMap != null && dataMap.size() > 0) {
					 // 数据已存在
					return ResultMap.convertMap(ResultCode.CODE_DATA_EXISTS, Message.bundle("data.exists"));
				}
				
				// 设置实例的id属性
				if (hospitalService.updateHospital(hospital) > 0) {
					return ResultMap.convertMap(ResultCode.CODE_SUCCESS, Message.bundle("update.success"));
				}else{
					throw new RuntimeException();
					/*return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("update.fail"));*/
				}
			}
		
	
	}

	@Override
	public Map<String, Object> getHospitalList(Hospital hospital, BindingResult result,HttpServletRequest req) {

		 HttpSession session=req.getSession();
		 if(session.getAttribute("user")!=null){
			 
			 Map<String, Object> resultMap = new HashMap<>();
			 //得到返回数据
			 List<Map<String, Object>> dataList = hospitalService.getHospitalList(hospital);
			 if (dataList != null && dataList.size() > 0) {
				 //得到数据总数
				 resultMap.put(Global.DATA_TOTAL, hospital.getTotal());
				 resultMap.put(Global.DATA_ROWS, dataList);
				 return ResultMap.convertMap(ResultCode.CODE_SUCCESS, resultMap, Message.bundle("query.success"));
			 }
			 return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("query.empty"));
		 }else{
			 return ResultMap.convertMap(ResultCode.CODE_NO_LOGIN, Message.bundle("permission.no.login"));
		 }
		 
	}

	@Override
	public Map<String, Object> getHospitalDetail(Integer id, Hospital hospital) {
			// 设置实例的id属性
			hospital.setId(id);
			Map<String, Object> resultList = hospitalService.getHospitalDetail(hospital);
			if (resultList != null && resultList.size() > 0) {
				return ResultMap.convertMap(ResultCode.CODE_SUCCESS, resultList, Message.bundle("query.success"));
			}
			return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("query.empty"));
	}

	@Override
	@Transactional
	public  Map<String, Object> deleteHospital(Integer id, Hospital hospital) {	
		// 设置实例的id属性
	    hospital.setId(id);
	   DoctorGroup doctorGroup =new DoctorGroup();
	   doctorGroup.setHospitalId(id);
	   List<Map<String, Object>> dataList =doctorGroupService.getDoctorGroupList(doctorGroup);// 查看该机构是否存在团队中
	   if(dataList !=null && dataList.size()>0){
		   return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY,Message.bundle("doctor.exists.doctorGroup")); 
	   }
		Map<String, Object> resultList = hospitalService.getHospitalDetail(hospital);
		if (resultList == null || resultList.size() <= 0) {
			return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY,Message.bundle("hospital.empty"));
		}
		//执行删除
		if (hospitalService.deleteHospital(hospital)>0) {
			return ResultMap.convertMap(ResultCode.CODE_SUCCESS,Message.bundle("delete.success"));
		}else{
			throw new RuntimeException();
		}
	}

	@Override
	public Map<String, Object> getWeiAndYi(Hospital hospital, BindingResult result, HttpServletRequest req) {
		Map<String, Object> resultMap = new HashMap<>();
		 //得到返回数据
		 List<Map<String, Object>> dataList = hospitalService.getWeiAndYi(hospital);
		 if (dataList != null && dataList.size() > 0) {
			 //得到数据总数
			 resultMap.put(Global.DATA_TOTAL, hospital.getTotal());
			 resultMap.put(Global.DATA_ROWS, dataList);
			 return ResultMap.convertMap(ResultCode.CODE_SUCCESS, resultMap, Message.bundle("query.success"));
		 }
		 return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("query.empty"));
	}

	@Override
	public Map<String, Object> getAllHospitalList(Hospital hospital, BindingResult result, HttpServletRequest req) {
		 HttpSession session=req.getSession();
		 if(session.getAttribute("user")!=null){
			 Map<String, Object> resultMap = new HashMap<>();
			 //得到返回数据
			 List<Map<String, Object>> dataList = hospitalService.getAllHospitalList(hospital);
			 if (dataList != null && dataList.size() > 0) {
				 //得到数据总数
				 resultMap.put(Global.DATA_TOTAL, hospital.getTotal());
				 resultMap.put(Global.DATA_ROWS, dataList);
				 return ResultMap.convertMap(ResultCode.CODE_SUCCESS, resultMap, Message.bundle("query.success"));
			 }
			 return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("query.empty"));
		 }else{
			 return ResultMap.convertMap(ResultCode.CODE_NO_LOGIN, Message.bundle("permission.no.login"));
		 }
	}

	@Override
	public int getHospitalContract(Integer id, Hospital hospital) {
		    hospital.setId(id);
			int num = hospitalService.getHospitalContract(hospital);
		  return num;
	}
	
	
	
	

	

}
