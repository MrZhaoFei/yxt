<?xml version="1.0" encoding="utf-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:cache="http://www.springframework.org/schema/cache" xmlns:c="http://www.springframework.org/schema/c"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
						http://www.springframework.org/schema/beans/spring-beans.xsd 
						http://www.springframework.org/schema/context 
						http://www.springframework.org/schema/context/spring-context.xsd 
						http://www.springframework.org/schema/aop 
						http://www.springframework.org/schema/aop/spring-aop.xsd 
						http://www.springframework.org/schema/tx 
						http://www.springframework.org/schema/tx/spring-tx.xsd 
						http://www.springframework.org/schema/cache 
						http://www.springframework.org/schema/cache/spring-cache-3.2.xsd">
	<!-- 配置需要交给spring扫描管理的包,一般是包括整个项目的java文件的父包（由context提供） -->
	<context:component-scan base-package="org.system" />
	<!-- 属性文件读入,用于加密数据库配置文件 -->
	<bean id="propertyConfigurer" class="org.core.encrypt.DBConfigurer">
		<property name="locations">
			<list>
				<value>classpath:conf.properties</value>
			</list>
		</property>
	</bean>
	<!-- 配置需要交给spring扫描管理的文件,一般是项目的配置文件（由context提供） -->
	<context:property-placeholder location="classpath:conf.properties" />
	<!-- 配置数据源 -->
	<bean name="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		destroy-method="close">
		<property name="url" value="${url}" />
		<property name="username" value="${user}" />
		<property name="password" value="${password}" />
		<property name="initialSize" value="2" />
		<property name="maxActive" value="20" />
		<property name="minIdle" value="2" />
		<property name="maxWait" value="60000" />
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<property name="minEvictableIdleTimeMillis" value="25200000" />
		<property name="removeAbandonedTimeout" value="1800" />
	</bean>

	<!-- 文件服务器配置 -->
	<bean name="storeFactory" class="org.store.file.StoreConfig">
		<property name="account" value="${file.account}" />
		<property name="password" value="${file.password}" />
		<property name="publicKey" value="${file.publicKey}" />
		<property name="url" value="${file.url}" />
	</bean>
	<!-- 语音服务器配置 -->
	<bean name="phoneFactory" class="org.store.phone.PhoneConfig">
		<property name="account" value="${phone.account}" />
		<property name="password" value="${phone.password}" />
		<property name="publicKey" value="${phone.publicKey}" />
		<property name="url" value="${phone.url}" />
	</bean>
	<!-- HIS服务器配置 -->
	<bean name="hisFactory" class="org.store.his.HisConfig">
		<property name="account" value="${his.account}" />
		<property name="password" value="${his.password}" />
		<property name="publicKey" value="${his.publicKey}" />
		<property name="url" value="${his.url}" />
	</bean>
	
	<!-- 配置sqlSessionFactory(由mybatis-spring.jar提供支持) -->
	<bean name="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 配置数据源 -->
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:configuration.xml" />
		<!-- 配置拦截器用于Mybatis分页和总数查询，只实现Mysql -->
		<property name="plugins" ref="PaginationInterceptor" />
	</bean>
	<!-- Mybatis分页拦截器 -->
	<bean name="PaginationInterceptor" class="org.core.intercept.PaginationInterceptor" />
	<!-- Mapper接口所在包名，Spring会自动查找其下的Mapper -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="org.system.mapper..*" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>
	<!-- 支持缓存注解 -->
	<cache:annotation-driven cache-manager="cacheManager" />
	<!-- Spring提供的基于的Ehcache实现的缓存管理器 -->
	<bean id="ehcacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
		<property name="configLocation" value="classpath:ehcache.xml" />
	</bean>
	<bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager">
		<property name="cacheManager" ref="ehcacheManager" />
	</bean>
	<!-- 支持注解事务模式 -->
	<tx:annotation-driven transaction-manager="transactionManager"
		proxy-target-class="true" />
	<!-- 事务管理 -->
	<bean name="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- 配置声明式事务 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="insert*" propagation="REQUIRED" read-only="false" />
			<tx:method name="delete*" propagation="REQUIRED" read-only="false" />
			<tx:method name="update*" propagation="REQUIRED" read-only="false" />
			<tx:method name="get*" propagation="SUPPORTS" />
		</tx:attributes>
	</tx:advice>
	<!-- 配置该声明式事务规则用于的切入点 步骤： 1.配置切入点 2.应用该声明式事务规则 -->
	<aop:config proxy-target-class="true" expose-proxy="true">
		<!-- 配置切入点 -->
		<aop:pointcut id="transaction_pointcut"
			expression="execution(* org.system.service.impl..*.*(..))" />
		<!-- 应用该声明式事务规则 -->
		<aop:advisor advice-ref="txAdvice" pointcut-ref="transaction_pointcut" />
	</aop:config>
	<!-- 异常拦截器 -->
	<bean id="exceptionHandler" class="org.system.exception.MyExceptionResolver" />
</beans>
