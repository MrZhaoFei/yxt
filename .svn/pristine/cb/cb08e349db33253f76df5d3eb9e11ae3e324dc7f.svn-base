package org.system.controller.impl.doctor;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.core.result.ResultCode;
import org.core.result.ResultMap;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.BindingResult;
import org.system.Global;
import org.system.controller.iface.doctor.IDoctorGroupController;
import org.system.entity.contract.Contract;
import org.system.entity.doctor.DoctorDoctorGroup;
import org.system.entity.doctor.DoctorGroup;
import org.system.message.Message;
import org.system.service.iface.contract.IContractService;
import org.system.service.iface.doctor.IDoctorDoctorGroupService;
import org.system.service.iface.doctor.IDoctorGroupService;

@Controller
public class DoctorGroupController implements IDoctorGroupController{
	Logger log = LoggerFactory.getLogger(DoctorController.class);
	@Resource
	private IDoctorGroupService doctorGroupService;
	
	
	@Resource
	private IDoctorDoctorGroupService doctorDoctorGroupService;
	
	
	@Resource
	private IContractService contractService;
	
	@Override
	public Map<String, Object> insertDoctorGroup(DoctorGroup doctorGroup, BindingResult result) {
		// 检查数据是否存在
		Map<String, Object> dataMap = doctorGroupService.getDoctorGroupByFiled(doctorGroup);
		if (dataMap != null && dataMap.size() > 0) {
			return ResultMap.convertMap(ResultCode.CODE_DATA_EXISTS, Message.bundle("data.exists"));
		}
		if (doctorGroupService.insertDoctorGroup(doctorGroup)> 0) {
			// 新增成功
			return ResultMap.convertMap(ResultCode.CODE_SUCCESS, Message.bundle("insert.success"));
		}
		// 新增失败
		return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("insert.fail"));
	}

	@Override
	public Map<String, Object> updateDoctorGroup(Integer id, DoctorGroup doctorGroup, BindingResult result) {
		// 设置主键
		doctorGroup.setId(id);
		// 检查数据是否重复
		Map<String, Object> habitMap = doctorGroupService.getDoctorGroupByFiled(doctorGroup);
		if (habitMap != null && habitMap.size() > 0) {
			// 数据已存在 返回提示结束流程
			return ResultMap.convertMap(ResultCode.CODE_DATA_EXISTS, Message.bundle("data.exists"));
		}
		// 执行修改 判断状态
		if (doctorGroupService.updateDoctorGroup(doctorGroup) > 0) {
			// 修改成功 返回提示结束流程
			return ResultMap.convertMap(ResultCode.CODE_SUCCESS, Message.bundle("update.success"));
		} else {
			// 修改失败 返回提示结束流程
			return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("update.fail"));
		}
	}

	@Override
	public Map<String, Object> getDoctorGroupList(DoctorGroup doctorGroup, BindingResult result,HttpServletRequest req) {
		
		 HttpSession session=req.getSession();
		 if(session.getAttribute("user")!=null){
			 Map<String, Object> resultMap = new HashMap<>();
			 //得到返回数据
			 List<Map<String, Object>> dataList = doctorGroupService.getDoctorGroupList(doctorGroup);
			 if (dataList != null && dataList.size() > 0) {
				 //得到数据总数
				 resultMap.put(Global.DATA_TOTAL, doctorGroup.getTotal());
				 resultMap.put(Global.DATA_ROWS, dataList);
				 return ResultMap.convertMap(ResultCode.CODE_SUCCESS, resultMap, Message.bundle("query.success"));
			 }
			 return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("query.empty"));
			 
		 }else{
			 return ResultMap.convertMap(ResultCode.CODE_NO_LOGIN, Message.bundle("permission.no.login"));
		 }
	}

	@Override
	public Map<String, Object> getDoctorGroupDetail(Integer id, DoctorGroup doctorGroup) {
		 // 设置实例的id属性
		doctorGroup.setId(id);
		Map<String, Object> resultList = doctorGroupService.getDoctorGroupDetail(doctorGroup);
		if (resultList != null && resultList.size() > 0) {
			return ResultMap.convertMap(ResultCode.CODE_SUCCESS, resultList, Message.bundle("query.success"));
		}
		return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("query.empty"));
	}

	
	
	@Override
	@Transactional
	public Map<String, Object> deleteDoctorGroup(Integer id, DoctorGroup doctorGroup) {
		
		// 检查签约协议里是否存在该团队
		Contract c= new Contract();
		c.setDoctorGroupId(id);
		Map<String, Object> contractList=contractService.getByFile(c);
		if(contractList!=null && contractList.size()>0){
			return ResultMap.convertMap(ResultCode.CODE_SUCCESS,Message.bundle("doctorGroup.contract"));
		}
		 // 设置实例的id属性
		doctorGroup.setId(id);
		Map<String, Object> resultList =doctorGroupService.getDoctorGroupDetail(doctorGroup);
		if (resultList == null || resultList.size() <= 0) {
			return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY,Message.bundle("doctor.group.empty"));
		}
		//判断医生团队里是否存在有医生  是否删除
		 DoctorDoctorGroup ddg=new DoctorDoctorGroup();
	     ddg.setDoctorGroupId(id);
	     if(doctorDoctorGroupService.getDoctorDoctorGroups(ddg)!=null && doctorDoctorGroupService.getDoctorDoctorGroups(ddg).size()>0){
	    	 int count=  doctorDoctorGroupService.deleteDoctorDoctorGroup(ddg);//删除医生团队关联表
	    	 // 团队里存在医生的时候  执行删除
	    	 if (count>0 && doctorGroupService.deleteDoctorGroup(doctorGroup) >0) {
	    		 return ResultMap.convertMap(ResultCode.CODE_SUCCESS,Message.bundle("delete.success"));
	    	 }else{
	    		 throw new RuntimeException();
	    	 }
	    	
	     }else{
	    	 // 团队里不存在医生
	    	 if(doctorGroupService.deleteDoctorGroup(doctorGroup) >0){
	    		 return ResultMap.convertMap(ResultCode.CODE_SUCCESS,Message.bundle("delete.success")); 
	    	 }
	     }
		return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("delete.fail"));
	}

	@Override
	public Map<String, Object> getDoctorGroupDoctorList(Integer doctorGroupId, DoctorGroup doctorGroup,
			BindingResult result) {
		doctorGroup.setId(doctorGroupId);
		// 查询团队信息
		Map<String, Object> resultMap = new HashMap<>();
		// 查询数据主体
		List<Map<String, Object>> dataList = doctorGroupService.getDoctorGroupDoctorList(doctorGroup);
		if (dataList != null && dataList.size() > 0) {
			// 得到总数
			resultMap.put(Global.DATA_TOTAL, doctorGroup.getTotal());
			resultMap.put(Global.DATA_ROWS, dataList);
			return ResultMap.convertMap(ResultCode.CODE_SUCCESS, resultMap, Message.bundle("query.success"));
		}
		return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("query.empty"));
	}

	@Override
	public Map<String, Object> getDoctorGroupDoctorListNotIn(Integer doctorGroupId, DoctorGroup doctorGroup,
			BindingResult result) {
		doctorGroup.setId(doctorGroupId);
		// 查询团队信息
		Map<String, Object> resultMap = new HashMap<>();
		// 查询数据主体
		List<Map<String, Object>> dataList = doctorGroupService.getDoctorGroupDoctorListNotIn(doctorGroup);
		if (dataList != null && dataList.size() > 0) {
			// 得到总数
			resultMap.put(Global.DATA_TOTAL, doctorGroup.getTotal());
			resultMap.put(Global.DATA_ROWS, dataList);
			return ResultMap.convertMap(ResultCode.CODE_SUCCESS, resultMap, Message.bundle("query.success"));
		}
		return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("query.empty"));
	}

}
