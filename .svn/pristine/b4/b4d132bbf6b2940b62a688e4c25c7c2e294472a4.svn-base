package org.system.controller.impl.doctor;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.core.result.ResultCode;
import org.core.result.ResultMap;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.BindingResult;
import org.system.Global;
import org.system.controller.iface.doctor.IDoctorController;
import org.system.entity.contract.Contract;
import org.system.entity.doctor.Doctor;
import org.system.entity.doctor.DoctorDetail;
import org.system.entity.doctor.DoctorDoctorGroup;
import org.system.message.Message;
import org.system.service.iface.contract.IContractService;
import org.system.service.iface.doctor.IDoctorDetailService;
import org.system.service.iface.doctor.IDoctorDoctorGroupService;
import org.system.service.iface.doctor.IDoctorService;

@Controller
public class DoctorController implements IDoctorController {
    
	Logger log = LoggerFactory.getLogger(DoctorController.class);
	
	@Resource
	private IDoctorService doctorService;
	
	@Resource
	private IDoctorDoctorGroupService doctorDoctorGroupService;
	
	@Resource
	private IDoctorDetailService doctorDetailService;
	
	@Resource
	private IContractService contractService;
	
	
	
	/**
	 * 新增医生
	 * 
	 * 医生姓名是否注册  医生电话号码是否注册 身份证号是否已注册
	 *  先添加医生信息  后添加医生详情信息表
	 */
	@Override
	@Transactional
	public Map<String, Object> insertDoctor(Doctor doctor, BindingResult result) {
				// 查询姓名是否已注册
				Doctor name = new Doctor();
				name.setName(doctor.getName());
				Map<String, Object> doctorMapForName = doctorService.getDoctorByFiled(name);
				if (doctorMapForName != null && doctorMapForName.size() > 0) {
					return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("doctor.insert.name.exists"));	
				}

		       // 查询手机号是否已注册
		        Doctor phone = new Doctor();
		        phone.setPhone(doctor.getPhone());
				Map<String, Object> doctorMapForPhone = doctorService.getDoctorByFiled(phone);
				if (doctorMapForPhone != null && doctorMapForPhone.size() > 0) {
					return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("doctor.insert.phone.exists"));	
				}
				
				
				 // 查询身份证号是否已注册
		        Doctor idCard = new Doctor();
		        idCard.setIdCard(doctor.getIdCard());
				Map<String, Object> doctorMapForidCard = doctorService.getDoctorByFiled(idCard);
				if (doctorMapForidCard != null && doctorMapForidCard.size() > 0) {
					return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("doctor.insert.ID_Card.exists"));
				}				
					// 检查数据是否存在
					Map<String, Object> dataMap = doctorService.getDoctorByFiled(doctor);
					if (dataMap != null && dataMap.size() > 0) {
						return ResultMap.convertMap(ResultCode.CODE_DATA_EXISTS, Message.bundle("data.exists"));
					}
					
					
					/*String doctorPassword=doctor.getPassword();
					// 加密
					String newPassword=MD5Util.getMD5Code(doctorPassword);
					//设置医生登录密码
					doctor.setPassword(newPassword);*/
					
					if (doctorService.insertDoctor(doctor)> 0) {// 添加医生					
						doctor.getDoctorDetail().setDoctorId(doctor.getId());// 设置医生详情表的id属性
						doctor.getDoctorDetail().setIdCard(doctor.getIdCard());// 设置医生详情表的省份证号属性 
						if(doctorDetailService.insertDoctorDetail(doctor.getDoctorDetail())>0){//添加医生细节
							  return ResultMap.convertMap(ResultCode.CODE_SUCCESS, Message.bundle("insert.success"));
						}else{
							throw new RuntimeException();
						}
					}else{
						return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("insert.fail"));
					}
			
	}

	
	/**
	 * 修改医生
	 */
	@Override
	public Map<String, Object> updateDoctor(Integer id, Doctor doctor, BindingResult result) {
		  // 设置主键
	     doctor.setId(id);
	     Map<String, Object> resultList =doctorService.getDoctorDetail(doctor); 
			if (resultList == null || resultList.size() <= 0) {
				return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY,Message.bundle("doctor.empty"));
			}
			// 执行修改 判断状态
			if (doctorService.updateDoctor(doctor) > 0) {
			
				// 修改成功 返回提示结束流程
				return ResultMap.convertMap(ResultCode.CODE_SUCCESS, Message.bundle("update.success"));
			} else {
				// 修改失败 返回提示结束流程
				return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("update.fail"));
			}
	}

	
	/**
	 * 得到医生列表
	 */
	@Override
	public Map<String, Object> getDoctorList(Doctor doctor, BindingResult result,HttpServletRequest req) {
         HttpSession session=req.getSession();
		 if(session.getAttribute("user")!=null){
			 Map<String, Object> resultMap = new HashMap<>();
			 //得到返回数据
			 List<Map<String, Object>> dataList = doctorService.getDoctorList(doctor);
			 if (dataList != null && dataList.size() > 0) {
				 //得到数据总数
				 resultMap.put(Global.DATA_TOTAL, doctor.getTotal());
				 resultMap.put(Global.DATA_ROWS, dataList);
				 return ResultMap.convertMap(ResultCode.CODE_SUCCESS, resultMap, Message.bundle("query.success"));
			 }
			 return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("query.empty"));
		 }else{
			 return ResultMap.convertMap(ResultCode.CODE_NO_LOGIN, Message.bundle("permission.no.login"));
		 }
	}
   
	/**
	 * 得到单条医生数据
	 */
	@Override
	public Map<String, Object> getDoctorDetail(Integer id, Doctor doctor) {
		 // 设置实例的id属性
		doctor.setId(id);
		Map<String, Object> resultList = doctorService.getDoctorDetail(doctor);
		if (resultList != null && resultList.size() > 0) {
			return ResultMap.convertMap(ResultCode.CODE_SUCCESS, resultList, Message.bundle("query.success"));
		}
		return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("query.empty"));
	}

	
	/**
	 * 删除医生
	 * 
	 * 判断医生是否签约  医生是否存在医生团队中  医生是否有详细的信息数据
	 * 
	 */
	@Override
	@Transactional
	public Map<String, Object> deleteDoctor(Integer id, Doctor doctor) {
		Contract c=new Contract();
		c.setCreatorId(id);
		Map<String, Object>  contractList=contractService.getByFile(c);
		if(contractList != null && contractList.size()>0){		
			return ResultMap.convertMap(ResultCode.CODE_SUCCESS,Message.bundle("doctor.contract"));
		}
		 // 设置实例的id属性	
		doctor.setId(id);
		Map<String, Object> resultList =doctorService.getDoctorDetail(doctor); 
		if (resultList == null || resultList.size() <= 0) {
			return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY,Message.bundle("doctor.empty"));
		}
		//执行删除
		if ( doctorService.deleteDoctor(doctor)> 0) {
			 // 删除团队里的医生
			 DoctorDoctorGroup ddg=new DoctorDoctorGroup();
		     ddg.setDoctorId(id);
		     doctorDoctorGroupService.deleteDoctorDoctorGroup(ddg);
		     
	       // 删除医生详细信息 
		    DoctorDetail dd=new DoctorDetail();
		    dd.setDoctorId(id);
		    doctorDetailService.deleteDoctorDetail(dd);
			return ResultMap.convertMap(ResultCode.CODE_SUCCESS,Message.bundle("delete.success"));
		}else{
			throw new RuntimeException();
		}
		
	}

	/*@Override
	public Map<String, Object> getDoctorDetailByDoctorId(Integer id, Doctor doctor) {
		doctor.setId(id);
		Map<String, Object> resultList = doctorService.getDoctorDetailByDoctorId(doctor);
		if (resultList != null && resultList.size() > 0) {
			return ResultMap.convertMap(ResultCode.CODE_SUCCESS, resultList, Message.bundle("query.success"));
		}
		return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("query.empty"));
	}*/

	@Override
	public int getDoctorMaxId(Doctor doctor) {
		int num=doctorService.getDoctorMaxId(doctor);
		return num;
	}

	

	
}
