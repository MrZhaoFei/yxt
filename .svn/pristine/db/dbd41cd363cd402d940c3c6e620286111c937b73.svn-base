package org.system.controller.impl.user;

import java.util.Date;
import java.util.Map;

import javax.annotation.Resource;

import org.core.result.ResultCode;
import org.core.result.ResultMap;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.store.wechat.WechatConfig;
import org.system.Global;
import org.system.controller.iface.user.IUserDetailController;
import org.system.entity.service.UserServicePack;
import org.system.entity.user.User;
import org.system.entity.user.UserDetail;
import org.system.message.Message;
import org.system.service.iface.service.IUserServicePackService;
import org.system.service.iface.user.IUserDetailService;
import org.system.service.iface.user.IUserService;
import org.utils.calc.IdcardUtils;
import org.utils.spring.RESTClient;

import net.sf.ehcache.CacheManager;
import net.sf.ehcache.Element;

@Controller
public class UserDetailController implements IUserDetailController {
	Logger log = LoggerFactory.getLogger(UserDetailController.class);
	@Resource
	private IUserDetailService userDetailService;
	@Resource
	private IUserService userService;
	@Resource
	private IUserServicePackService userServicePackService;
	@Resource
	private CacheManager cache;

	@Override
	public Map<String, Object> insertUserDetail(UserDetail userDetail, BindingResult result) {
		User u = new User();
		u.setId(userDetail.getUserId());
		Map<String, Object> userMap = userService.getUserDetail(u);
		if (userMap == null || userMap.size() <= 0) {
			return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("user.empty"));
		}
		// 计算性别年龄
		userDetail.setBirthday(IdcardUtils.getBirthByIdCard(userDetail.getIdcard()));
		userDetail.setSex(IdcardUtils.getGenderByIdCard(userDetail.getIdcard()));
		// 检查数据是否重复
		Map<String, Object> userDetailMap = userDetailService.getUserDetailByFild(userDetail);
		if (userDetailMap != null && userDetailMap.size() > 0) {
			// 数据已存在 返回提示结束流程
			return ResultMap.convertMap(ResultCode.CODE_DATA_EXISTS, Message.bundle("idcard.is.bind"));
		}
		// 检查数据是否重复
		Map<String, Object> uMap = userDetailService.getUserDetailById(userDetail);
		if (uMap != null && uMap.size() > 0) {
			// 数据已存在 返回提示结束流程
			return ResultMap.convertMap(ResultCode.CODE_DATA_EXISTS, Message.bundle("data.exists"));
		}
		// 执行新增 判断状态
		if (userDetailService.insertUserDetail(userDetail) > 0) {
			// 新增成功 返回提示结束流程
			return ResultMap.convertMap(ResultCode.CODE_SUCCESS, Message.bundle("insert.success"));
		} else {
			// 新增失败 返回提示结束流程
			return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("insert.fail"));
		}
	}

	@Override
	public Map<String, Object> updateUserDetail(Integer userId, UserDetail userDetail, BindingResult result) {
		// 设置主键
		userDetail.setUserId(userId);
		if (userDetail.getIdcard() != null) {
			// 计算性别年龄
			userDetail.setBirthday(IdcardUtils.getBirthByIdCard(userDetail.getIdcard()));
			userDetail.setSex(IdcardUtils.getGenderByIdCard(userDetail.getIdcard()));
		}
		// 检查数据是否重复
		if (userDetail.getIdcard() != null) {
			Map<String, Object> userDetailMap = userDetailService.getUserDetailByFild(userDetail);
			if (userDetailMap != null && userDetailMap.size() > 0) {
				// 数据已存在 返回提示结束流程
				return ResultMap.convertMap(ResultCode.CODE_DATA_EXISTS, Message.bundle("data.exists"));
			}
		}
		// 执行修改 判断状态
		if (userDetailService.updateUserDetail(userDetail) > 0) {
			// 修改成功 返回提示结束流程
			if (userDetail.getServicePackId() != null) {
				UserServicePack userServicePack = new UserServicePack();
				userServicePack.setUserId(userId);
				userServicePack.setServicePackId(userDetail.getServicePackId());
				userServicePack.setCreateTime(new Date());
				if (userServicePackService.insertUserServicePack(userServicePack) <= 0) {
					throw new RuntimeException();
				}
				// 如果修改了服务包推送微信给用户
				Map<String, Object> param = userDetailService.getPushInfo(userDetail);
				param.put("phone", Message.bundle("platform.telephone"));
				RESTClient.post(WechatConfig.getServer(), Global.WECHAT_CONTRACT_ARRANGEFILE, param);
			}
			return ResultMap.convertMap(ResultCode.CODE_SUCCESS, Message.bundle("update.success"));
		} else {
			// 修改失败 返回提示结束流程
			return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("update.fail"));
		}
	}

	@Override
	public Map<String, Object> getUserDetailDetail(Integer userId, UserDetail userDetail) {
		// 设置主键
		userDetail.setUserId(userId);

		/*
		 * User user=new User(); user.setId(userId); //
		 * 查询详情时判断数据库是否存在有HIS导入的数据（用户id为空） Map<String, Object> userMap =
		 * userService.getUserDetail(user); if (userMap != null &&
		 * userMap.size() > 0) {
		 * userDetail.setIdcard(userMap.get("idcard").toString()); Map<String,
		 * Object> detailMap = userDetailService.getUserDetailByHis(userDetail);
		 * if (detailMap != null && detailMap.size() > 0) { //
		 * 有HIS导入的数据则修改关联直接关联数据
		 * userDetailService.updateUserDetailByIdCard(userDetail); } }
		 */
		// 查询详情
		Map<String, Object> resultMap = userDetailService.getUserDetailById(userDetail);
		if (resultMap != null && resultMap.size() > 0) {
			return ResultMap.convertMap(ResultCode.CODE_SUCCESS, resultMap, Message.bundle("query.success"));
		}
		return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("query.empty"));
	}

	@Override
	public Map<String, Object> updateUserDetailForUser(UserDetail userDetail, BindingResult result, String token) {
		// 缓存中获取用户数据
		Element element = cache.getCache(Global.CACHE_USER).get(token);
		if (element != null) {
			@SuppressWarnings("unchecked")
			Map<String, Object> userMap = (Map<String, Object>) element.getObjectValue();
			userDetail.setUserId((Integer) userMap.get("id"));

			// 判断身份证是否重复
			Map<String, Object> uMap = userDetailService.getUserDetailByFild(userDetail);
			if (uMap != null && uMap.size() > 0) {
				return ResultMap.convertMap(ResultCode.CODE_DATA_EXISTS, Message.bundle("idcard.is.bind"));
			}
			// 检查数据是否重复
			Map<String, Object> userDetailMap = userDetailService.getUserDetailById(userDetail);
			// 计算性别年龄
			userDetail.setBirthday(IdcardUtils.getBirthByIdCard(userDetail.getIdcard()));
			userDetail.setSex(IdcardUtils.getGenderByIdCard(userDetail.getIdcard()));
			if (userDetailMap != null && userDetailMap.size() > 0) {
				// 执行修改 判断状态
				if (userDetailService.updateUserDetail(userDetail) > 0) {
					// 修改成功 返回提示结束流程
					return ResultMap.convertMap(ResultCode.CODE_SUCCESS, Message.bundle("update.success"));
				} else {
					// 修改失败 返回提示结束流程
					return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("update.fail"));
				}
			} else {
				// 执行新增 判断状态
				if (userDetailService.insertUserDetail(userDetail) > 0) {
					// 新增成功 返回提示结束流程
					return ResultMap.convertMap(ResultCode.CODE_SUCCESS, Message.bundle("insert.success"));
				} else {
					// 新增失败 返回提示结束流程
					return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("insert.fail"));
				}
			}
		} else {
			return ResultMap.convertMap(ResultCode.CODE_NO_LOGIN, Message.bundle("permission.no.login"));
		}
	}
}
