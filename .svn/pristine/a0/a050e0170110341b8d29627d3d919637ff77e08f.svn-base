package org.system.controller.impl;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.core.result.ResultCode;
import org.core.result.ResultMap;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.system.Global;
import org.system.controller.iface.IProductServiceController;
import org.system.entity.service.ProductService;
import org.system.message.Message;
import org.system.service.iface.service.IProductServiceService;

@Controller
public class ProductServiceController implements IProductServiceController {

	Logger log = LoggerFactory.getLogger(ProductServiceController.class);
	@Resource
	private IProductServiceService productServiceService;

	@Override
	public Map<String, Object> insertProductService(ProductService productService, BindingResult result) {

		int pid = (int)productService.getServiceTypeId();// 6,7,8,
		int selectDoctor=(int)productService.getCommonField();
		if (pid == 6 ||  pid == 8) {
			int docId = productService.getDoctorTypeId();// 2,3,4
			if (docId != 2 && docId != 3 && docId != 4) {
				return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("productService.insert.docId.fail"));
			}
		}else if(pid == 7 && selectDoctor==0 ){
			
		}else if(pid == 7 && selectDoctor==1 ){
			int docId = (int)productService.getDoctorTypeId();//4
			if (docId != 4) {
				return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("productService.insert.doctId.four"));
			}
		}
		// 服务名称已存在
		ProductService p = new ProductService();
		p.setName(productService.getName());
		Map<String, Object> productMapForName = productServiceService.getProductServiceByFiled(p);
		if (productMapForName != null && productMapForName.size() > 0) {
			return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("product.insert.name.exists"));
		}

		// 检查数据是否存在
		Map<String, Object> dataMap = productServiceService.getProductServiceByFiled(productService);
		if (dataMap != null && dataMap.size() > 0) {
			return ResultMap.convertMap(ResultCode.CODE_DATA_EXISTS, Message.bundle("data.exists"));
		}
		// 执行新增操作
		if (productServiceService.insertProductService(productService) > 0) {
			// 新增成功
			return ResultMap.convertMap(ResultCode.CODE_SUCCESS, Message.bundle("insert.success"));
		}
		// 新增失败
		return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("insert.fail"));
	}

	@Override
	public Map<String, Object> getProductServiceList(ProductService productService, BindingResult result,
			HttpServletRequest req) {
		HttpSession session = req.getSession();
		if (session.getAttribute("user") != null) {

			Map<String, Object> resultMap = new HashMap<>();
			// 得到返回数据
			List<Map<String, Object>> dataList = productServiceService.getProductServiceList(productService);
			if (dataList != null && dataList.size() > 0) {
				// 得到数据总数
				resultMap.put(Global.DATA_TOTAL, productService.getTotal());
				resultMap.put(Global.DATA_ROWS, dataList);
				return ResultMap.convertMap(ResultCode.CODE_SUCCESS, resultMap, Message.bundle("query.success"));
			}
			return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("query.empty"));
		} else {
			return ResultMap.convertMap(ResultCode.CODE_NO_LOGIN, Message.bundle("permission.no.login"));
		}
	}
	@Override
	public Map<String, Object> updateProductService(Integer id, ProductService productService, BindingResult result) {
		// 检查数据是否存在
		productService.setId(id);
		int num=productServiceService.getProductByUservice(productService);
		if(num>0){// 该基础服务包被用户购买了  
			return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("productService.alreayBuy")); 	
		}else{
			Map<String, Object> dataMap = productServiceService.getProductServiceByFiled(productService);
			if (dataMap != null && dataMap.size() > 0) {
				// 数据已存在
				return ResultMap.convertMap(ResultCode.CODE_DATA_EXISTS, Message.bundle("data.exists"));
			}
			// 设置实例的id属性
			if (productServiceService.updateProductService(productService) > 0) {
				return ResultMap.convertMap(ResultCode.CODE_SUCCESS, Message.bundle("update.success"));
			}
			return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("update.fail"));
		}
	}

	@Override
	public Map<String, Object> getProductServiceDetail(Integer id, ProductService productService) {
		// 设置实例的id属性
		productService.setId(id);
		Map<String, Object> resultList = productServiceService.getProductServiceDetail(productService);
		if (resultList != null && resultList.size() > 0) {
			return ResultMap.convertMap(ResultCode.CODE_SUCCESS, resultList, Message.bundle("query.success"));
		}
		return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("query.empty"));
	}

	@Override
	public Map<String, Object> deleteproductService(Integer id, ProductService productService) {
		// 设置实例的id属性
		productService.setId(id);
		Map<String, Object> resultList = productServiceService.getProductServiceDetail(productService);
		// 得到返回数据
		List<Map<String, Object>> dataList = productServiceService.getProductCondition(productService);
		if (dataList != null && dataList.size() > 0) {
			return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("product.delete.fail"));
		}

		if (resultList == null || resultList.size() <= 0) {
			return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("productService.empty"));
		}
		// 执行删除
		if (productServiceService.deleteProductService(productService) > 0) {
			return ResultMap.convertMap(ResultCode.CODE_SUCCESS, Message.bundle("delete.success"));
		}
		return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("delete.fail"));
	}
	@Override
	public int getProductByUservice(Integer id, ProductService productService) {
		productService.setId(id);
		int num=productServiceService.getProductByUservice(productService);
		return num;
		
	}

	@Override
	public Map<String, Object> getProductNotIn(ProductService productService, BindingResult result) {
		Map<String, Object> resultMap = new HashMap<>();
		// 得到返回数据
		List<Map<String, Object>> dataList = productServiceService.getProductNotIn(productService);
		if (dataList != null && dataList.size() > 0) {
			// 得到数据总数
			resultMap.put(Global.DATA_TOTAL, productService.getTotal());
			resultMap.put(Global.DATA_ROWS, dataList);
			return ResultMap.convertMap(ResultCode.CODE_SUCCESS, resultMap, Message.bundle("query.success"));
		}
		return resultMap;
	}

	

	
}
