package org.system.controller.impl.user.healthInfo;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.core.result.ResultCode;
import org.core.result.ResultMap;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.system.Global;
import org.system.controller.iface.user.healthInfo.IJwwsHistoryController;
import org.system.entity.user.healthinfo.HealthInfo;
import org.system.entity.user.healthinfo.JwwsHistory;
import org.system.message.Message;
import org.system.service.iface.service.IGdNumberInfoService;
import org.system.service.iface.user.healthinfo.IHealthInfoService;
import org.system.service.iface.user.healthinfo.IJwwsHistoryService;

import net.sf.ehcache.CacheManager;
import net.sf.ehcache.Element;

@Controller
public class JwwsHistoryController implements IJwwsHistoryController{
	
	Logger log = LoggerFactory.getLogger(JwwsHistoryController.class);
	@Resource
	private CacheManager cache;
	@Resource
	private IHealthInfoService HealthInfoService; 
	@Resource
	private IGdNumberInfoService gdNumberInfoService;
	@Resource
	private IJwwsHistoryService JwwsHistoryService; 

	@Override
	public Map<String, Object> insertJwwsHistory(JwwsHistory jwwsHistory, BindingResult result, String token) {
		// 缓存中获取医生数据
		Element element = cache.getCache(Global.CACHE_DOCTOR).get(token);
		if (element != null) {
			// 判断健康档案是否存在
			HealthInfo healthInfo =new HealthInfo();
			healthInfo.setId(jwwsHistory.getHealthInfoId());
			Map<String, Object> hiMap = HealthInfoService.getHealthInfoDetail(healthInfo);
			if (hiMap == null || hiMap.size() <= 0) {
				return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("healthInfo.empty"));
			}
			//设置默认值 作废标志 0 正常  作废
			jwwsHistory.setZfbz("0");
			//设置默认值 数据更新时间
			jwwsHistory.setUpdateTime(new Date());
			// 执行新增操作
			if (JwwsHistoryService.insertJwwsHistory(jwwsHistory) > 0) {
				return ResultMap.convertMap(ResultCode.CODE_SUCCESS,
						Message.bundle("insert.success"));
			}
			return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("insert.fail"));
		} else {
			return ResultMap.convertMap(ResultCode.CODE_NO_LOGIN, Message.bundle("permission.no.login"));
		}
	}

	@Override
	public Map<String, Object> updatetJwwsHistory(Integer jwwsHistoryId, JwwsHistory jwwsHistory, BindingResult result,
			String token) {
		jwwsHistory.setId(Long.valueOf(jwwsHistoryId));
		// 缓存中获取医生数据
		Element element = cache.getCache(Global.CACHE_DOCTOR).get(token);
		if (element != null) {
			//设置默认值 数据更新时间
			jwwsHistory.setUpdateTime(new Date());
			// 执行修改操作
			if (JwwsHistoryService.updateJwwsHistory(jwwsHistory)> 0) {
				return ResultMap.convertMap(ResultCode.CODE_SUCCESS,
						Message.bundle("update.success"));
			}
			return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("update.fail"));
		} else {
			return ResultMap.convertMap(ResultCode.CODE_NO_LOGIN, Message.bundle("permission.no.login"));
		}
	}

	@Override
	public Map<String, Object> getJwwsHistoryList(JwwsHistory jwwsHistory, BindingResult result, String token) {
		// 缓存中获取用户数据
		Element element = cache.getCache(Global.CACHE_DOCTOR).get(token);
		if (element != null) {
			// 定义返回对象
			Map<String, Object> resultMap = new HashMap<>();
			List<Map<String, Object>> jwList = JwwsHistoryService.getJwwsHistory(jwwsHistory);
			if (jwList != null && jwList.size() > 0) {
				// 得到数据总数
				resultMap.put(Global.DATA_TOTAL, jwwsHistory.getTotal());
				resultMap.put(Global.DATA_ROWS, jwList);
				return ResultMap.convertMap(ResultCode.CODE_SUCCESS, resultMap, Message.bundle("query.success"));
			}
			return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("query.empty"));
		} else {
			return ResultMap.convertMap(ResultCode.CODE_NO_LOGIN, Message.bundle("permission.no.login"));
		}
	}

	@Override
	public Map<String, Object> deletetJwwsHistory(Integer jwwsHistoryId, JwwsHistory jwwsHistory, BindingResult result,
			String token) {
		jwwsHistory.setId(Long.valueOf(jwwsHistoryId));
		// 缓存中获取医生数据
		Element element = cache.getCache(Global.CACHE_DOCTOR).get(token);
		if (element != null) {
			//设置默认值 数据更新时间
			jwwsHistory.setUpdateTime(new Date());
			// 执行修改操作
			if (JwwsHistoryService.deleteJwwsHistory(jwwsHistory)> 0) {
				return ResultMap.convertMap(ResultCode.CODE_SUCCESS,
						Message.bundle("delete.success"));
			}
			return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("delete.fail"));
		} else {
			return ResultMap.convertMap(ResultCode.CODE_NO_LOGIN, Message.bundle("permission.no.login"));
		}
	}

	@Override
	public Map<String, Object> getJwwsHistoryListByUser(JwwsHistory jwwsHistory, BindingResult result, String token) {
		// 缓存中获取用户数据
		Element element = cache.getCache(Global.CACHE_USER).get(token);
		if (element != null) {
			// 定义返回对象
			Map<String, Object> resultMap = new HashMap<>();
			List<Map<String, Object>> jwList = JwwsHistoryService.getJwwsHistory(jwwsHistory);
			if (jwList != null && jwList.size() > 0) {
				// 得到数据总数
				resultMap.put(Global.DATA_TOTAL, jwwsHistory.getTotal());
				resultMap.put(Global.DATA_ROWS, jwList);
				return ResultMap.convertMap(ResultCode.CODE_SUCCESS, resultMap, Message.bundle("query.success"));
			}
			return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("query.empty"));
		} else {
			return ResultMap.convertMap(ResultCode.CODE_NO_LOGIN, Message.bundle("permission.no.login"));
		}
	}

}
