package org.system.controller.impl.service.visits;

import java.util.Date;
import java.util.Map;

import javax.annotation.Resource;

import org.core.result.ResultCode;
import org.core.result.ResultMap;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.system.Global;
import org.system.controller.iface.service.visits.IGxyFollowupDragRecordsController;
import org.system.entity.service.visits.GxyFollowupDragRecords;
import org.system.entity.service.visits.GxyFollowupRecords;
import org.system.message.Message;
import org.system.service.iface.service.resp.IServiceRespTaskService;
import org.system.service.iface.service.visits.IGxyFollowupDragRecordsService;
import org.system.service.iface.service.visits.IGxyFollowupRecordsService;

import net.sf.ehcache.CacheManager;
import net.sf.ehcache.Element;
@Controller
public class GxyFollowupDragRecordsController implements IGxyFollowupDragRecordsController{
	Logger log = LoggerFactory.getLogger(GxyFollowupDragRecordsController.class);
	
	@Resource
	private CacheManager cache;
	@Resource
	private IGxyFollowupRecordsService gxyFollowupRecordsService;
	
	@Resource
	private IGxyFollowupDragRecordsService gxyFollowupDragRecordsService;
	
	@Resource
	private IServiceRespTaskService serviceRespTaskService;
	
	
	
	@Override
	public Map<String, Object> insertGxyFollowupDragRecords(GxyFollowupDragRecords gxyFollowupDragRecords,
			BindingResult result, String token) {
		// 缓存中获取医生数据
		Element element = cache.getCache(Global.CACHE_DOCTOR).get(token);
		if (element != null) {
			// 判断高血压随访记录是否存在
			GxyFollowupRecords gfr=new GxyFollowupRecords();
			gfr.setId(gxyFollowupDragRecords.getGxyFollowupRecordsId());
			Map<String, Object> gfrMap =gxyFollowupRecordsService.getGxyFollowupRecordsDetail(gfr);
			if (gfrMap == null || gfrMap.size() <= 0) {
				return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("followupRecords.empty"));
			}
/*			//设置医疗机构编码
			gxyFollowupDragRecords.setYljgbm((String)gfrMap.get("yljgbm"));
			//设置健康档案编号
			gxyFollowupDragRecords.setJkdabh((String)gfrMap.get("jkdabh"));
			//设置随访记录编号
			gxyFollowupDragRecords.setSfjlbh((String)gfrMap.get("sfjlbh"));*/
			//设置默认值 作废标志 0正常，1作废
			gxyFollowupDragRecords.setZfbz("0");
			//设置默认值 数据更新时间 为当前时间
			gxyFollowupDragRecords.setUpdateTime(new Date());
			//执行新增操作
			if (gxyFollowupDragRecordsService.insertGxyFollowupDragRecords(gxyFollowupDragRecords)>0) {
				return ResultMap.convertMap(ResultCode.CODE_SUCCESS, Message.bundle("insert.success"));
			}
			return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("insert.fail"));
		}else {
			return ResultMap.convertMap(ResultCode.CODE_NO_LOGIN, Message.bundle("permission.no.login"));
		}
	}



	@Override
	public Map<String, Object> updateGxyFollowupDragRecords(Integer gxyFollowupDragRecordsId,
			GxyFollowupDragRecords gxyFollowupDragRecords, BindingResult result, String token) {
		gxyFollowupDragRecords.setId(Long.valueOf(gxyFollowupDragRecordsId));
		// 缓存中获取医生数据
		Element element = cache.getCache(Global.CACHE_DOCTOR).get(token);
		if (element != null) {
			@SuppressWarnings("unchecked")
			Map<String, Object> userMap = (Map<String, Object>) element.getObjectValue();
			// 查询高血压随访记录用药详情 获取高血压随访记录ID
			Map<String, Object> gxtMap =gxyFollowupDragRecordsService.getGxyFollowupDragRecordsDetail(gxyFollowupDragRecords);
			if (gxtMap == null || gxtMap.size() <= 0) {
				return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("followupRecords.empty"));
			}
			Integer serviceRespTaskId = (Integer) gxtMap.get("serviceRespTaskId");
			//判断 服务响应 是否存在
			if (serviceRespTaskId==null) {
				return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("serviceRespTask.empty"));
			}
			// 判断记录是否属于该医生
			if ((int)userMap.get("id") != (int)gxtMap.get("doctorId")) {
				return ResultMap.convertMap(ResultCode.CODE_PERMISSION_ERROR, Message.bundle("record.is.outside.doctor"));
			}
			//设置默认值  数据更新时间
			gxyFollowupDragRecords.setUpdateTime(new Date());
			//执行修改操作
			if (gxyFollowupDragRecordsService.updateGxyFollowupDragRecords(gxyFollowupDragRecords)>0) {
				return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("update.success"));
			}
			return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("update.fail"));
			
		}else {
			return ResultMap.convertMap(ResultCode.CODE_NO_LOGIN, Message.bundle("permission.no.login"));
		}
	}



	@Override
	public Map<String, Object> deleteGxyFollowupDragRecords(Integer gxyFollowupDragRecordsId,
			GxyFollowupDragRecords gxyFollowupDragRecords, BindingResult result, String token) {
		gxyFollowupDragRecords.setId(Long.valueOf(gxyFollowupDragRecordsId));
		// 缓存中获取医生数据
		Element element = cache.getCache(Global.CACHE_DOCTOR).get(token);
		if (element != null) {
			@SuppressWarnings("unchecked")
			Map<String, Object> userMap = (Map<String, Object>) element.getObjectValue();
			// 查询高血压随访记录用药详情 获取高血压随访记录ID
			Map<String, Object> gxtMap =gxyFollowupDragRecordsService.getGxyFollowupDragRecordsDetail(gxyFollowupDragRecords);
			if (gxtMap == null || gxtMap.size() <= 0) {
				return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("followupRecords.empty"));
			}
			Integer serviceRespTaskId = (Integer) gxtMap.get("serviceRespTaskId");
			//判断 服务响应 是否存在
			if (serviceRespTaskId==null) {
				return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("serviceRespTask.empty"));
			}
			// 判断记录是否属于该医生
			if ((int)userMap.get("id") != (int)gxtMap.get("doctorId")) {
				return ResultMap.convertMap(ResultCode.CODE_PERMISSION_ERROR, Message.bundle("record.is.outside.doctor"));
			}
			//执行删除操作
			if (gxyFollowupDragRecordsService.deleteGxyFollowupDragRecords(gxyFollowupDragRecords)>0) {
				return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("delete.success"));
			}
			return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("delete.fail"));
			
		}else {
			return ResultMap.convertMap(ResultCode.CODE_NO_LOGIN, Message.bundle("permission.no.login"));
		}
	}


	
	

	
}
