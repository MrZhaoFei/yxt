package org.system.controller.impl;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.core.result.ResultCode;
import org.core.result.ResultMap;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.system.Global;
import org.system.controller.iface.IServicePackConditionController;
import org.system.entity.service.ServicePackCondition;
import org.system.service.iface.service.IServicePackConditionService;
import org.system.message.Message;
@Controller
public class ServicePackConditionController implements IServicePackConditionController {

	Logger log = LoggerFactory.getLogger(ServicePackConditionController.class);
	 @Resource
	 private IServicePackConditionService servicePackConditionService;
	 
	 
	@Override
	public Map<String, Object> insertServicePackCondition(ServicePackCondition servicePackCondition,
			BindingResult result) {
	
		int id=(int)servicePackConditionService.queryCodeId(servicePackCondition);
		  servicePackCondition.setAddressId(id);
		
		     // 检查数据是否存在
		Map<String, Object> dataMap = servicePackConditionService.getServicePackConditionByFild(servicePackCondition);
			if (dataMap != null && dataMap.size() > 0) {
					return ResultMap.convertMap(ResultCode.CODE_DATA_EXISTS, Message.bundle("data.exists"));
				}
	    if( servicePackConditionService.insertServicePackCondition(servicePackCondition)>0){
	    	
	    	// 新增成功
			return ResultMap.convertMap(ResultCode.CODE_SUCCESS, Message.bundle("insert.success"));
		}
		// 新增失败
		return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("insert.fail"));
	}


	@Override
	public Map<String, Object> getServicePackConditionList(ServicePackCondition servicePackCondition,
			BindingResult result,HttpServletRequest req) {
		 HttpSession session=req.getSession();
		 if(session.getAttribute("user")!=null){
			 
			 Map<String, Object> resultMap = new HashMap<>();
			 //得到返回数据
			 List<Map<String, Object>> dataList = servicePackConditionService.getServicePackConditionList(servicePackCondition);
			 if (dataList != null && dataList.size() > 0) {
				 //得到数据总数
				 resultMap.put(Global.DATA_TOTAL, servicePackCondition.getTotal());
				 resultMap.put(Global.DATA_ROWS, dataList);
				 return ResultMap.convertMap(ResultCode.CODE_SUCCESS, resultMap, Message.bundle("query.success"));
			 }
			 return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("query.empty"));
		 }else{
			 return ResultMap.convertMap(ResultCode.CODE_NO_LOGIN, Message.bundle("permission.no.login"));
		 }
	}


	@Override
	public Map<String, Object> updateServicePackCondition(Integer id, ServicePackCondition servicePackCondition,
			BindingResult result) {
		
		// 修改价格
		servicePackCondition.setId(id);
		servicePackCondition.setPrice(servicePackCondition.getPrice());	
		int num=servicePackConditionService.getConditionByBuy(servicePackCondition);
		if(num>0){//判断该优惠包是否已被用户购买
			return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("servicePackPondition.notUpdate"));
		}else{
			//检查数据是否存在
			Map<String, Object> dataMap = servicePackConditionService.getServicePackConditionByFild(servicePackCondition);
			if (dataMap != null && dataMap.size() > 0) {
				// 数据已存在
				return ResultMap.convertMap(ResultCode.CODE_DATA_EXISTS, Message.bundle("data.exists"));
			}
			//修改地址
			if(servicePackCondition.getAddressCode()!=null){
				int idd=servicePackConditionService.queryCodeId(servicePackCondition);
				servicePackCondition.setAddressId(idd);
			}
			
			// 设置实例的id属性
			if (servicePackConditionService.updateServicePackCondition(servicePackCondition) > 0) {
				return ResultMap.convertMap(ResultCode.CODE_SUCCESS, Message.bundle("update.success"));
			}
			throw new RuntimeException();
			//return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("update.fail"));
		}
		
		
	}


	@Override
	public Map<String, Object> deleteServicePackCondition(Integer id, ServicePackCondition servicePackCondition) {
		 // 设置实例的id属性
		servicePackCondition.setId(id);
		Map<String, Object> resultList = servicePackConditionService.getServicePackConditionDetail(servicePackCondition);

		if (resultList == null || resultList.size() <= 0) {
			return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY,Message.bundle("servicePackCondition.empty"));
		}
		//执行删除
		if (servicePackConditionService.deleteServicePackCondition(servicePackCondition)>0) {
			return ResultMap.convertMap(ResultCode.CODE_SUCCESS,Message.bundle("delete.success"));
		}
		return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("delete.fail"));
	}


	@Override
	public Map<String, Object> getServicePackConditionDetail(Integer id, ServicePackCondition servicePackCondition) {
		// 设置实例的id属性
		servicePackCondition.setId(id);
		Map<String, Object> resultList = servicePackConditionService.getServicePackConditionDetail(servicePackCondition);
		if (resultList != null && resultList.size() > 0) {
			return ResultMap.convertMap(ResultCode.CODE_SUCCESS, resultList, Message.bundle("query.success"));
		}
		return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("query.empty"));
	}

}
