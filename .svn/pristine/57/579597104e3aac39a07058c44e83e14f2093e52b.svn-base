package org.system.controller.impl.doctor;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.core.result.ResultCode;
import org.core.result.ResultMap;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.system.Global;
import org.system.controller.iface.doctor.IDoctorGroupRelyController;
import org.system.entity.doctor.DoctorGroupRely;
import org.system.message.Message;
import org.system.service.iface.doctor.IDoctorGroupRelyService;

import net.sf.ehcache.CacheManager;
import net.sf.ehcache.Element;

@Controller
public class DoctorGroupRelyController implements IDoctorGroupRelyController{

	Logger log = LoggerFactory.getLogger(DoctorGroupRelyController.class);
	@Resource
	private CacheManager cache;
	@Resource
	private IDoctorGroupRelyService doctorGroupRelyService;
	
	@Override
	public Map<String, Object> insertDoctorGroupRely(DoctorGroupRely doctorGroupRely, BindingResult result,
			String token) {
		// 缓存中获取用户数据
		Element element = cache.getCache(Global.CACHE_DOCTOR).get(token);
		if (element != null) {
			//检查数据是否重复
			Map<String, Object> dgrMap=doctorGroupRelyService.getDoctorGroupRelyByFiled(doctorGroupRely);
			if (dgrMap != null && dgrMap.size() > 0) {
				return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("data.exists"));
			}
			//执行新增操作
			if (doctorGroupRelyService.insertDoctorGroupRely(doctorGroupRely) >0) {
				return ResultMap.convertMap(ResultCode.CODE_SUCCESS, Message.bundle("insert.success"));
			}
			return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("insert.fail"));
		} else {
			return ResultMap.convertMap(ResultCode.CODE_NO_LOGIN, Message.bundle("permission.no.login"));
		}
	}

	@Override
	public Map<String, Object> updatetDoctorGroupRely(Integer doctorGroupRelyId, DoctorGroupRely doctorGroupRely,
			BindingResult result, String token) {
		return null;
	}

	@Override
	public Map<String, Object> getDoctorGroupRelyList(DoctorGroupRely doctorGroupRely, BindingResult result,
			String token) {
		// 缓存中获取用户数据
		Element element = cache.getCache(Global.CACHE_DOCTOR).get(token);
		if (element != null) {
			Map<String, Object> resultMap = new HashMap<>();
			List<Map<String, Object>> dataList = doctorGroupRelyService.getDoctorGroupRelyList(doctorGroupRely);
			if (dataList != null && dataList.size() > 0) {
				// 得到总数
				resultMap.put(Global.DATA_TOTAL, doctorGroupRely.getTotal());
				resultMap.put(Global.DATA_ROWS, dataList);
				return ResultMap.convertMap(ResultCode.CODE_SUCCESS, resultMap, Message.bundle("query.success"));
			} else {
				return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("query.empty"));
			}
		} else {
			return ResultMap.convertMap(ResultCode.CODE_NO_LOGIN, Message.bundle("permission.no.login"));
		}
	}

	@Override
	public Map<String, Object> deletetDoctorGroupRely(Integer doctorGroupRelyId, DoctorGroupRely doctorGroupRely,
			BindingResult result, String token) {
		doctorGroupRely.setId(doctorGroupRelyId);
		// 缓存中获取医生数据
		Element element = cache.getCache(Global.CACHE_DOCTOR).get(token);
		if (element != null) {
			// 执行修改操作
			if (doctorGroupRelyService.deleteDoctorGroupRely(doctorGroupRely) > 0) {
				return ResultMap.convertMap(ResultCode.CODE_SUCCESS, Message.bundle("delete.success"));
			}
			return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("delete.fail"));
		} else {
			return ResultMap.convertMap(ResultCode.CODE_NO_LOGIN, Message.bundle("permission.no.login"));
		}
	}

}
