package org.system.controller.impl.service.transfer;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.core.result.ResultCode;
import org.core.result.ResultMap;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.system.Global;
import org.system.controller.iface.service.transfer.ITransTreatPhoneRecordHistoryInfoController;
import org.system.entity.service.transfer.TransTreatDetaily;
import org.system.entity.service.transfer.TransTreatPhoneRecordHistoryInfo;
import org.system.message.Message;
import org.system.service.iface.doctor.IDoctorService;
import org.system.service.iface.service.transfer.ITransTreatDetailyService;
import org.system.service.iface.service.transfer.ITransTreatPhoneRecordHistoryInfoService;

import net.sf.ehcache.CacheManager;
import net.sf.ehcache.Element;

@Controller
public class TransTreatPhoneRecordHistoryInfoController implements ITransTreatPhoneRecordHistoryInfoController {
	Logger log = LoggerFactory.getLogger(TransTreatPhoneRecordHistoryInfoController.class);
	@Resource
	private CacheManager cache;
	@Resource
	private ITransTreatPhoneRecordHistoryInfoService transTreatPhoneRecordHistoryInfoService;
	@Resource
	private IDoctorService doctorService;
	@Resource
	private ITransTreatDetailyService transTreatDetailyService;

	@Override
	public Map<String, Object> insertTransTreatPhoneRecordHistoryInfo(
			TransTreatPhoneRecordHistoryInfo transTreatPhoneRecordHistoryInfo, BindingResult result, String token) {
		// 缓存中获取医生数据
		Element element = cache.getCache(Global.CACHE_DOCTOR).get(token);
		if (element != null) {
			@SuppressWarnings("unchecked")
			Map<String, Object> userMap = (Map<String, Object>) element.getObjectValue();
			// 设置主叫ID（医生ID）
			transTreatPhoneRecordHistoryInfo.setFromDoctorId((Integer) userMap.get("id"));
			// 设置 主叫用户 医总管医生的登录名
			transTreatPhoneRecordHistoryInfo.setFrom((String) userMap.get("name"));
			// 查询转诊记录详情 用来 获取 被叫用户ID（患者用户ID） 和 被叫用户（电话号码）
			TransTreatDetaily transTreatDetaily = new TransTreatDetaily();
			transTreatDetaily.setId(transTreatPhoneRecordHistoryInfo.getTransTreatDetailyId());
			Map<String, Object> transMap = transTreatDetailyService.getTransTreatDetailyDetail(transTreatDetaily);
			if (transMap == null || transMap.size() <= 0) {
				return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("transTreatDetaily.error"));
			}
			// 设置 被叫用户ID（患者用户ID）
			transTreatPhoneRecordHistoryInfo.setToUserId((Integer) transMap.get("userId"));
			// 设置 被叫用户（电话号码）
			transTreatPhoneRecordHistoryInfo.setTo((String) transMap.get("contact"));
			// 设置 开始时间
			transTreatPhoneRecordHistoryInfo.setStartTime(new Date());
			// 执行添加
			if (transTreatPhoneRecordHistoryInfoService
					.insertTransTreatPhoneRecordHistoryInfo(transTreatPhoneRecordHistoryInfo) > 0) {
				return ResultMap.convertMap(ResultCode.CODE_SUCCESS, transTreatPhoneRecordHistoryInfo,
						Message.bundle("insert.success"));
			} else {
				return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("insert.fail"));
			}
		} else {
			return ResultMap.convertMap(ResultCode.CODE_NO_LOGIN, Message.bundle("permission.no.login"));
		}
	}

	@Override
	public Map<String, Object> endTransTreatPhoneRecord(Integer transTreatPhoneRecordHistoryInfoId,
			TransTreatPhoneRecordHistoryInfo transTreatPhoneRecordHistoryInfo, BindingResult result) {
		// 设置ID
		transTreatPhoneRecordHistoryInfo.setId(transTreatPhoneRecordHistoryInfoId);
		// 设置结束时间
		transTreatPhoneRecordHistoryInfo.setEndTime(new Date());
		// 执行修改 判断状态
		if (transTreatPhoneRecordHistoryInfoService
				.updateTransTreatPhoneRecordHistoryInfo(transTreatPhoneRecordHistoryInfo) > 0) {
			// 修改成功 返回提示结束流程
			return ResultMap.convertMap(ResultCode.CODE_SUCCESS, Message.bundle("update.success"));
		} else {
			// 修改失败 返回提示结束流程
			return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("update.fail"));
		}
	}

	@Override
	public Map<String, Object> getTransTreatPhoneRecordHistoryInfo(
			TransTreatPhoneRecordHistoryInfo transTreatPhoneRecordHistoryInfo, BindingResult result, String token) {
		// 缓存中获取医生数据
		Element element = cache.getCache(Global.CACHE_DOCTOR).get(token);
		if (element != null) {
			@SuppressWarnings("unchecked")
			Map<String, Object> userMap = (Map<String, Object>) element.getObjectValue();
			// 设置主叫ID（医生ID）
			transTreatPhoneRecordHistoryInfo.setFromDoctorId((Integer) userMap.get("id"));
			Map<String, Object> resultMap = new HashMap<>();
			List<Map<String, Object>> transTreatPhoneRecordHistoryInfoList = transTreatPhoneRecordHistoryInfoService
					.getTransTreatPhoneRecordHistoryInfo(transTreatPhoneRecordHistoryInfo);
			if (transTreatPhoneRecordHistoryInfoList != null && transTreatPhoneRecordHistoryInfoList.size() > 0) {
				resultMap.put(Global.DATA_TOTAL, transTreatPhoneRecordHistoryInfo.getTotal());
				resultMap.put(Global.DATA_ROWS, transTreatPhoneRecordHistoryInfoList);
				return ResultMap.convertMap(ResultCode.CODE_SUCCESS, resultMap, Message.bundle("query.success"));
			} else {
				return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("query.empty"));
			}
		} else {
			return ResultMap.convertMap(ResultCode.CODE_NO_LOGIN, Message.bundle("permission.no.login"));
		}
	}

	@Override
	public Map<String, Object> insertPhoneRecordHistoryInfo(
			TransTreatPhoneRecordHistoryInfo transTreatPhoneRecordHistoryInfo, BindingResult result, String token) {
		// 缓存中获取医生数据
		Element element = cache.getCache(Global.CACHE_DOCTOR).get(token);
		if (element != null) {
			@SuppressWarnings("unchecked")
			Map<String, Object> userMap = (Map<String, Object>) element.getObjectValue();
			// 设置主叫ID（医生ID）
			transTreatPhoneRecordHistoryInfo.setFromDoctorId((Integer) userMap.get("id"));
			// 设置 主叫用户 医总管医生的登录名
			transTreatPhoneRecordHistoryInfo.setFrom((String) userMap.get("name"));
			// 设置 开始时间
			transTreatPhoneRecordHistoryInfo.setStartTime(new Date());
			// 执行添加
			if (transTreatPhoneRecordHistoryInfoService
					.insertTransTreatPhoneRecordHistoryInfo(transTreatPhoneRecordHistoryInfo) > 0) {
				return ResultMap.convertMap(ResultCode.CODE_SUCCESS, transTreatPhoneRecordHistoryInfo,
						Message.bundle("insert.success"));
			} else {
				return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("insert.fail"));
			}
		} else {
			return ResultMap.convertMap(ResultCode.CODE_NO_LOGIN, Message.bundle("permission.no.login"));
		}
	}

}
