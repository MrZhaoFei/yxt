package org.system.controller.impl.service;

import java.math.BigDecimal;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.core.result.ResultCode;
import org.core.result.ResultMap;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.BindingResult;
import org.system.Global;
import org.system.controller.iface.service.IUserServicePackController;
import org.system.entity.contract.Contract;
import org.system.entity.order.UserOrder;
import org.system.entity.service.ServicePack;
import org.system.entity.service.UserServicePack;
import org.system.entity.sms.SmsSendTask;
import org.system.entity.user.User;
import org.system.entity.user.UserDetail;
import org.system.message.Message;
import org.system.service.iface.contract.IContractService;
import org.system.service.iface.doctor.IDoctorGroupService;
import org.system.service.iface.order.IUserOrderService;
import org.system.service.iface.service.IGdNumberInfoService;
import org.system.service.iface.service.IServicePackConditionService;
import org.system.service.iface.service.IServicePackService;
import org.system.service.iface.service.IUserServicePackService;
import org.system.service.iface.service.IUserServiceService;
import org.system.service.iface.sms.ISmsSendTaskService;
import org.system.service.iface.user.IUserDetailService;
import org.system.service.iface.user.IUserService;
import org.utils.calc.DateUtils;

import net.sf.ehcache.CacheManager;
import net.sf.ehcache.Element;

@Controller
public class UserServicePackController implements IUserServicePackController {
	Logger log = LoggerFactory.getLogger(UserServicePackController.class);
	@Resource
	private IUserServicePackService userServicePackService;
	@Resource
	private IServicePackService servicePackService;
	@Resource
	private CacheManager cache;
	@Resource
	private IUserService userService;
	@Resource
	private IUserDetailService userDetailService;
	@Resource
	private IServicePackConditionService servicePackConditionService;
	@Resource
	private IUserServiceService userServiceService;
	@Resource
	private IContractService contractService;
	@Resource
	private IDoctorGroupService doctorGroupService;
	@Resource
	private ISmsSendTaskService smsSendTaskService;
	@Resource
	private IGdNumberInfoService gdNumberInfoService;
	@Resource
	private IUserOrderService userOrderService;

	@Override
	@Transactional
	public Map<String, Object> insertUserServicePackByDoctor(UserServicePack userServicePack, BindingResult result,
			String token) {
		/* 缓存中获取医生数据 */
		Element element = cache.getCache(Global.CACHE_DOCTOR).get(token);
		if (element != null) {
			@SuppressWarnings("unchecked")
			Map<String, Object> doctorMap = (Map<String, Object>) element.getObjectValue();
			ServicePack servicePack = new ServicePack();
			servicePack.setId(userServicePack.getServicePackId());
			/* 判断用户是否存在 */
			User user = new User();
			user.setId(userServicePack.getUserId());
			Map<String, Object> userMap = userService.getUserDetail(user);
			if (userMap == null || userMap.size() <= 0) {
				return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("user.empty"));
			}
			/* 检查服务包是否存在 */
			Map<String, Object> servicePackMap = servicePackService.getServicePackDetail(servicePack);
			if (servicePackMap == null || servicePackMap.size() <= 0) {
				return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("servicePack.empty"));
			} else {
				/* 购买类型为基本公共卫生服务包 */
				if ((int) servicePackMap.get("packageTypeId") == 1) {

					/* 判断用户基共卫是否过期 */
					UserServicePack usp = new UserServicePack();
					/* 设置用户ID */
					usp.setUserId(userServicePack.getUserId());
					ServicePack sp = new ServicePack();
					/* 设置包类型为1 */
					sp.setPackageTypeId(1);
					usp.setServicePack(sp);
					List<Map<String, Object>> userServicepackList = userServicePackService
							.getNoExpireUserServicePackList(usp);
					if (userServicepackList != null && userServicepackList.size() > 0) {
						return ResultMap.convertMap(ResultCode.CODE_DATA_EXISTS, Message.bundle("servicePack.exists"));
					}

					/* 如果满足购买基本公共卫生服务包条件则执行购买流程(用户未购买基本公共卫生服务包或者已经过期) */
					/* 设置创建时间 */
					userServicePack.setCreateTime(new Date());
					/* 设置过期时间 基本公共卫生服务包过期时间为当年最后一天 */
					userServicePack.setExpireTime(DateUtils.getCurrYearLast(new Date()));
					/* 设置价格 基本公共卫生服务包的价格默认设置为零 */
					userServicePack.setPrice(new BigDecimal(servicePackMap.get("price").toString()));
					/* 执行新增 判断状态 */
					if (userServicePackService.insertUserServicePack(userServicePack) > 0) {
						/* 购买成功需要记录医生购买日志 */
						/* 根据用户查询签约的机构 */
						Contract contract = new Contract();
						contract.setUserId(userServicePack.getUserId());
						Map<String, Object> contractMap = contractService.getContractByFild(contract);
						if (contractMap != null && contractMap.size() > 0) {
							UserOrder order = new UserOrder();
							/* 设置订单编号 */
							order.setOrderNum(gdNumberInfoService.getOrderNumber());
							/* 设置机构ID */
							order.setHospitalId((Integer) contractMap.get("hospitalId"));
							/* 设置订单状态 */
							order.setState(1);
							/* 设置订单价格 */
							order.setPrice(userServicePack.getPrice());
							/* 设置医生ID */
							order.setDoctorId((Integer) doctorMap.get("id"));
							/* 设置日期 */
							order.setCreateTime(new Date());
							/* 设置包ID */
							order.setServicePackId(userServicePack.getServicePackId());
							/* 设置用户ID */
							order.setUserId(userServicePack.getUserId());
							/* 设置订单类型 */
							order.setOrderType(1);
							/* 设置其他信息 */
							order.setEvidenceSn(userServicePack.getEvidenceSn());
							order.setEvidenceObjectId(userServicePack.getEvidenceObjectId());
							/* 新增医生购买订单 */
							if (userOrderService.insertUserOrder(order) <= 0) {
								throw new RuntimeException();
							}
							/* 修改签约信息的用户基本公共卫生服务包ID */
							contract.setUserServicePackId(userServicePack.getId());
							if (contractService.updateContract(contract) <= 0) {
								throw new RuntimeException();
							}
							return ResultMap.convertMap(ResultCode.CODE_SUCCESS, Message.bundle("insert.success"));
						} else {
							return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("contract.empty"));
						}
					} else {
						// 新增失败 返回提示结束流程
						return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("insert.fail"));
					}
					/* 购买类型为基础网格服务包 */
				} else if ((int) servicePackMap.get("packageTypeId") == 4) {
					// 判断是否填写凭证号
					if (userServicePack.getEvidenceSn() == null || "".equals(userServicePack.getEvidenceSn())) {
						return ResultMap.convertMap(ResultCode.CODE_PARAMETER_ERROR,
								Message.bundle("evidenceSn.empty"));
					}
					/* 判断用户基础网格服务包是否过期 */
					UserServicePack usp = new UserServicePack();
					/* 设置用户ID */
					usp.setUserId(userServicePack.getUserId());
					ServicePack sp = new ServicePack();
					/* 设置包类型为4 */
					sp.setPackageTypeId(4);
					usp.setServicePack(sp);
					List<Map<String, Object>> userServicepackList = userServicePackService
							.getNoExpireUserServicePackList(usp);
					if (userServicepackList != null && userServicepackList.size() > 0) {
						return ResultMap.convertMap(ResultCode.CODE_DATA_EXISTS, Message.bundle("servicePack.exists"));
					}

					/* 如果满足购买基础网格服务包条件则执行购买流程(用户未购买基础网购服务包或者已经过期) */
					/* 设置创建时间 */
					userServicePack.setCreateTime(new Date());
					/* 设置过期时间 基础网格服务包过期时间往后加一年 */
					userServicePack.setExpireTime(
							DateUtils.dateAfter(new Date(), (int) servicePackMap.get("acquisitive"), Calendar.MONTH));
					/* 设置价格 基础网格服务包的价格默认设置为零 */
					userServicePack.setPrice(new BigDecimal(servicePackMap.get("price").toString()));
					/* 执行新增 判断状态 */
					if (userServicePackService.insertUserServicePack(userServicePack) > 0) {
						/* 购买成功修改用户为会员 */
						UserDetail userDetail = new UserDetail();
						userDetail.setUserId(user.getId());
						userDetail.setMember(true);
						if (userDetailService.updateUserDetail(userDetail) <= 0) {
							throw new RuntimeException();
						}
						/* 购买成功需要记录医生购买日志 */
						/* 根据用户查询签约的机构 */
						Contract contract = new Contract();
						contract.setUserId(userServicePack.getUserId());
						Map<String, Object> contractMap = contractService.getContractByFild(contract);
						if (contractMap != null && contractMap.size() > 0) {
							/* 购买成功发送短信给用户 */
							SmsSendTask sms = new SmsSendTask();
							sms.setFromDoctorId((Integer) doctorMap.get("id"));
							sms.setFrom((String) doctorMap.get("phone"));
							sms.setToUserId((Integer) userMap.get("id"));
							sms.setTo((String) userMap.get("phone"));
							sms.setCreateTime(new Date());
							sms.setSmsType(0);
							sms.setContent(Message.bundle("buy.success.sms.content",new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date()),contractMap.get("hospitalName"), Message.bundle("platform.telephone")));
							if (smsSendTaskService.insertSms(sms) <= 0) {
								throw new RuntimeException();
							}
							UserOrder order = new UserOrder();
							/* 设置订单编号 */
							order.setOrderNum(gdNumberInfoService.getOrderNumber());
							/* 设置机构ID */
							order.setHospitalId((Integer) contractMap.get("hospitalId"));
							/* 设置订单状态 */
							order.setState(1);
							/* 设置订单价格 */
							order.setPrice(userServicePack.getPrice());
							/* 设置医生ID */
							order.setDoctorId((Integer) doctorMap.get("id"));
							/* 设置日期 */
							order.setCreateTime(new Date());
							/* 设置包ID */
							order.setServicePackId(userServicePack.getServicePackId());
							/* 设置用户ID */
							order.setUserId(userServicePack.getUserId());
							/* 设置订单类型 */
							order.setOrderType(1);
							/* 设置其他信息 */
							order.setEvidenceSn(userServicePack.getEvidenceSn());
							order.setEvidenceObjectId(userServicePack.getEvidenceObjectId());
							/* 新增医生购买订单 */
							if (userOrderService.insertUserOrder(order) <= 0) {
								throw new RuntimeException();
							}
							return ResultMap.convertMap(ResultCode.CODE_SUCCESS, Message.bundle("insert.success"));
						} else {
							return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("contract.empty"));
						}
					} else {
						// 新增失败 返回提示结束流程
						return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("insert.fail"));
					}
				} else {
					/* 购买类型为其他增值服务包 */
					/* 设置创建时间 */
					userServicePack.setCreateTime(new Date());
					/* 设置过期时间 基础网格服务包过期时间往后加一年 */
					userServicePack.setExpireTime(
							DateUtils.dateAfter(new Date(), (int) servicePackMap.get("acquisitive"), Calendar.MONTH));
					/* 设置价格 基础网格服务包的价格默认设置为零 */
					userServicePack.setPrice(new BigDecimal(servicePackMap.get("price").toString()));
					/* 执行新增 判断状态 */
					if (userServicePackService.insertUserServicePack(userServicePack) > 0) {
						/* 购买成功需要记录医生购买日志 */
						/* 根据用户查询签约的机构 */
						Contract contract = new Contract();
						contract.setUserId(userServicePack.getUserId());
						Map<String, Object> contractMap = contractService.getContractByFild(contract);
						if (contractMap != null && contractMap.size() > 0) {
							UserOrder order = new UserOrder();
							/* 设置订单编号 */
							order.setOrderNum(gdNumberInfoService.getOrderNumber());
							/* 设置机构ID */
							order.setHospitalId((Integer) contractMap.get("hospitalId"));
							/* 设置订单状态 */
							order.setState(1);
							/* 设置订单价格 */
							order.setPrice(userServicePack.getPrice());
							/* 设置医生ID */
							order.setDoctorId((Integer) doctorMap.get("id"));
							/* 设置日期 */
							order.setCreateTime(new Date());
							/* 设置包ID */
							order.setServicePackId(userServicePack.getServicePackId());
							/* 设置用户ID */
							order.setUserId(userServicePack.getUserId());
							/* 设置订单类型 */
							order.setOrderType(1);
							/* 设置其他信息 */
							order.setEvidenceSn(userServicePack.getEvidenceSn());
							order.setEvidenceObjectId(userServicePack.getEvidenceObjectId());
							/* 新增医生购买订单 */
							if (userOrderService.insertUserOrder(order) <= 0) {
								throw new RuntimeException();
							}
							return ResultMap.convertMap(ResultCode.CODE_SUCCESS, Message.bundle("insert.success"));
						} else {
							return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("contract.empty"));
						}
					} else {
						// 新增失败 返回提示结束流程
						return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("insert.fail"));
					}
				}
			}
		} else {
			return ResultMap.convertMap(ResultCode.CODE_NO_LOGIN, Message.bundle("permission.no.login"));
		}
	}

	@Override
	public Map<String, Object> getUserServicePackList(UserServicePack userServicePack, BindingResult result) {
		// 定义返回对象
		Map<String, Object> resultMap = new HashMap<>();
		// 得到返回数据
		List<Map<String, Object>> dataList = userServicePackService.getUserServicePackList(userServicePack);
		if (dataList != null && dataList.size() > 0) {
			// 得到数据总数
			resultMap.put(Global.DATA_TOTAL, userServicePack.getTotal());
			resultMap.put(Global.DATA_ROWS, dataList);
			return ResultMap.convertMap(ResultCode.CODE_SUCCESS, resultMap, Message.bundle("query.success"));
		}
		return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("query.empty"));
	}

	@Override
	public Map<String, Object> getUserComboList(UserServicePack userServicePack, BindingResult result, String token) {
		Element element = cache.getCache(Global.CACHE_DOCTOR).get(token);
		if (element != null) {
			// 判断用户是否存在
			User user = new User();
			user.setId(userServicePack.getUserId());
			Map<String, Object> userMap = userService.getUserDetail(user);
			if (userMap == null || userMap.size() <= 0) {
				return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("user.empty"));
			}
			// 定义返回对象
			Map<String, Object> resultMap = new HashMap<>();
			// 查询详情
			List<Map<String, Object>> comboList = userServicePackService.getUserComboListByUser(userServicePack);
			if (comboList != null && comboList.size() > 0) {
				resultMap.put(Global.DATA_TOTAL, userServicePack.getTotal());
				resultMap.put(Global.DATA_ROWS, comboList);
				return ResultMap.convertMap(ResultCode.CODE_SUCCESS, resultMap, Message.bundle("query.success"));
			}
			return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("query.empty"));
		} else {
			return ResultMap.convertMap(ResultCode.CODE_NO_LOGIN, Message.bundle("permission.no.login"));
		}
	}

	@Override
	public Map<String, Object> getUserServicePackByUserAndNoExpire(UserServicePack userServicePack,
			BindingResult result, String token) {
		Element element = cache.getCache(Global.CACHE_USER).get(token);
		if (element != null) {
			@SuppressWarnings("unchecked")
			Map<String, Object> userMap = (Map<String, Object>) element.getObjectValue();
			// 设置用户ID
			userServicePack.setUserId((Integer) userMap.get("id"));
			// 定义返回对象
			Map<String, Object> resultMap = new HashMap<>();
			// 查询详情
			List<Map<String, Object>> userServicePackList = userServicePackService
					.getNoExpireUserServicePackList(userServicePack);
			if (userServicePackList != null && userServicePackList.size() > 0) {
				resultMap.put(Global.DATA_TOTAL, userServicePack.getTotal());
				resultMap.put(Global.DATA_ROWS, userServicePackList);
				return ResultMap.convertMap(ResultCode.CODE_SUCCESS, resultMap, Message.bundle("query.success"));
			}
			return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("query.empty"));
		} else {
			return ResultMap.convertMap(ResultCode.CODE_NO_LOGIN, Message.bundle("permission.no.login"));
		}
	}

	@Override
	public Map<String, Object> getUserServicePackByDoctorAndNoExpire(UserServicePack userServicePack,
			BindingResult result, String token) {
		Element element = cache.getCache(Global.CACHE_DOCTOR).get(token);
		if (element != null) {
			// 定义返回对象
			Map<String, Object> resultMap = new HashMap<>();
			// 查询详情
			List<Map<String, Object>> userServicePackList = userServicePackService
					.getNoExpireUserServicePackList(userServicePack);
			if (userServicePackList != null && userServicePackList.size() > 0) {
				resultMap.put(Global.DATA_TOTAL, userServicePack.getTotal());
				resultMap.put(Global.DATA_ROWS, userServicePackList);
				return ResultMap.convertMap(ResultCode.CODE_SUCCESS, resultMap, Message.bundle("query.success"));
			}
			return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("query.empty"));
		} else {
			return ResultMap.convertMap(ResultCode.CODE_NO_LOGIN, Message.bundle("permission.no.login"));
		}
	}
}
