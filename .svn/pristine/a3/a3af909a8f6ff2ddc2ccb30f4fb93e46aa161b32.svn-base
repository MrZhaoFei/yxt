package org.system.controller.iface.doctor;

import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.core.annotation.RequiresPermissions;
import org.springframework.validation.BindingResult;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.system.entity.doctor.DoctorGroup;
import org.utils.spring.Groups;

@RequestMapping("/admin")
public interface IDoctorGroupController {
	
	
	/**
	 * 
	 * 新增
	 * @param doctorGroup
	 * @param resultdoctorGroupDoctors
	 * @return
	 */
	@RequestMapping(value = "/doctorGroup/insert", method = RequestMethod.POST)
	@ResponseBody
	@RequiresPermissions("doctorGroup:insert")
	public Map<String, Object> insertDoctorGroup(@Validated({ Groups.Insert.class }) DoctorGroup doctorGroup, BindingResult result);

	
	/**
	 * 修改
	 * @param id
	 * @param doctorGroup
	 * @param result
	 * @return
	 */
	
	@RequestMapping(value = "/doctorGroup/{id}/update", method = RequestMethod.PUT)
	@ResponseBody
	@RequiresPermissions("doctorGroup:update")
	public Map<String, Object> updateDoctorGroup(@PathVariable("id") Integer id,
			@Validated({ Groups.Update.class }) DoctorGroup doctorGroup, BindingResult result);
	
	
	
	/**
	 * 查询所有
	 * @param doctorGroup
	 * @param result
	 * @return
	 */
	@RequestMapping(value = "/doctorGroup", method = RequestMethod.GET)
	@ResponseBody
	@RequiresPermissions("doctorGroup:list")
	public Map<String, Object> getDoctorGroupList(@Validated({ Groups.Select.class }) DoctorGroup doctorGroup, BindingResult result,HttpServletRequest req);

	
	
	/**
	 * 查询单个
	 * @param id
	 * @param doctorGroup
	 * @return
	 */
	@RequestMapping(value = "/doctorGroup/{id}/detail", method = RequestMethod.GET)
	@ResponseBody
	@RequiresPermissions("doctorGroup:detail")
	public Map<String, Object> getDoctorGroupDetail(@PathVariable("id") Integer id, DoctorGroup doctorGroup);
	
	
	/**
	 * 删除
	 * @param id
	 * @param doctorGroup
	 * @return
	 */
	@RequestMapping(value = "/doctorGroup/{id}/delete", method = RequestMethod.DELETE)
	@ResponseBody
	@RequiresPermissions("doctorGroup:delete")
	public  Map<String, Object> deleteDoctorGroup(@PathVariable("id") Integer id, DoctorGroup doctorGroup);
	
	
	/**
	 * 医生团队的成员
	 * @param doctorGroupId
	 * @param doctorGroup
	 * @param result
	 * @return
	 */
	@RequestMapping(value = "/doctorGroup/doctorGroupDoctors/{id}", method = RequestMethod.GET)
	@ResponseBody
	@RequiresPermissions("doctorGroup:list")
	public Map<String, Object> getDoctorGroupDoctorList(@PathVariable("id") Integer doctorGroupId,
			@Validated({ Groups.Select.class }) DoctorGroup doctorGroup, BindingResult result);
	
	
	/**
	 * 不存在医生团队的成员
	 * @param doctorGroupId
	 * @param doctorGroup
	 * @param result
	 * @return
	 */
	@RequestMapping(value = "/doctorGroup/doctorGroupDoctorsNotIn/{id}", method = RequestMethod.GET)
	@ResponseBody
	@RequiresPermissions("doctorGroup:list")
	public Map<String, Object> getDoctorGroupDoctorListNotIn(@PathVariable("id") Integer doctorGroupId,
			@Validated({ Groups.Select.class }) DoctorGroup doctorGroup, BindingResult result);
}
