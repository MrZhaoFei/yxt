package org.system.controller.impl.doc;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.core.result.ResultCode;
import org.core.result.ResultMap;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.system.Global;
import org.system.controller.iface.doc.IDocTmplateController;
import org.system.entity.doc.DocTmplate;
import org.system.message.Message;
import org.system.service.iface.doc.IDocTmplateService;
@Controller
public class DocTmplateController implements IDocTmplateController{
	
	Logger log = LoggerFactory.getLogger(DocTmplateController.class);
	@Resource
	private IDocTmplateService docTmplateService; 

	@Override
	public Map<String, Object> insertDocTmplate(DocTmplate docTmplate, BindingResult result) {
		//检查数据是否重复
		Map<String, Object> dtMap = docTmplateService.getDocTmplateByFiled(docTmplate);
		if (dtMap != null && dtMap.size() > 0) {
			return ResultMap.convertMap(ResultCode.CODE_DATA_EXISTS, Message.bundle("data.exists"));
		}
		// 执行新增操作
		if (docTmplateService.insertDocTmplate(docTmplate) > 0) {
			return ResultMap.convertMap(ResultCode.CODE_SUCCESS, Message.bundle("insert.success"));
		}
		return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("insert.fail"));
	}

	@Override
	public Map<String, Object> updatetDocTmplate(Integer docId, DocTmplate docTmplate,
			BindingResult result) {
		//设置主键ID
		docTmplate.setId(docId);
		//检查数据是否重复
		Map<String, Object> dtMap = docTmplateService.getDocTmplateByFiled(docTmplate);
		if (dtMap != null && dtMap.size() > 0) {
			return ResultMap.convertMap(ResultCode.CODE_DATA_EXISTS, Message.bundle("data.exists"));
		}
		// 执行新增操作
		if (docTmplateService.updateDocTmplate(docTmplate) > 0) {
			return ResultMap.convertMap(ResultCode.CODE_SUCCESS, Message.bundle("update.success"));
		}
		return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("update.fail"));
	}

	@Override
	public Map<String, Object> getDocTmplateList(DocTmplate docTmplate, BindingResult result,HttpServletRequest req) {
		
		 HttpSession session=req.getSession();
		 
		 if(session.getAttribute("user")!=null){
			 
			 // 定义返回对象
			 Map<String, Object> resultMap = new HashMap<>();
			 List<Map<String, Object>> dtList = docTmplateService.getDocTmplates(docTmplate);
			 if (dtList != null && dtList.size() > 0) {
				 // 得到数据总数
				 resultMap.put(Global.DATA_TOTAL, docTmplate.getTotal());
				 resultMap.put(Global.DATA_ROWS, dtList);
				 return ResultMap.convertMap(ResultCode.CODE_SUCCESS, resultMap, Message.bundle("query.success"));
			 }
			 return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("query.empty"));
		 }else{
			 return ResultMap.convertMap(ResultCode.CODE_NO_LOGIN, Message.bundle("permission.no.login"));
		 }
	}

	@Override
	public Map<String, Object> getDocTmplateDetail(Integer docId, DocTmplate docTmplate,
			BindingResult result) {
		 // 设置实例的id属性
		docTmplate.setId(docId);
		Map<String, Object> resultList = docTmplateService.getDocTmplateDetail(docTmplate);
		if (resultList != null && resultList.size() > 0) {
			return ResultMap.convertMap(ResultCode.CODE_SUCCESS, resultList, Message.bundle("query.success"));
		}
		return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("query.empty"));
	}

	@Override
	public Map<String, Object> deleteDocTmplateAnswer(Integer docId, DocTmplate docTmplate,
			BindingResult result) {
		docTmplate.setId(docId);
		// 执行修改操作
		if (docTmplateService.deleteDocTmplate(docTmplate) > 0) {
			return ResultMap.convertMap(ResultCode.CODE_SUCCESS, Message.bundle("delete.success"));
		}
		return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("delete.fail"));
	}

}
