package org.system.controller.impl.doctor;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.core.result.ResultCode;
import org.core.result.ResultMap;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.system.Global;
import org.system.controller.iface.doctor.IDoctorDetailController;
import org.system.entity.doctor.DoctorDetail;
import org.system.message.Message;
import org.system.service.iface.doctor.IDoctorDetailService;


@Controller
public class DoctorDetailController implements IDoctorDetailController {
	Logger log = LoggerFactory.getLogger(DoctorDetailController.class);

	@Resource
	private IDoctorDetailService doctorDetailService;

	@Override
	public Map<String, Object> insertDoctorDetail(DoctorDetail doctorDetail, BindingResult result) {
		   
		// 检查数据是否存在
		Map<String, Object> dataMap = doctorDetailService.getDoctorDetailByFiled(doctorDetail);

		doctorDetail.setIdCard(doctorDetail.getIdCard());    
		if (dataMap != null && dataMap.size() > 0) {
			return ResultMap.convertMap(ResultCode.CODE_DATA_EXISTS, Message.bundle("data.exists"));
		}
		if (doctorDetailService.insertDoctorDetail(doctorDetail)> 0) {
			// 新增成功
			return ResultMap.convertMap(ResultCode.CODE_SUCCESS, Message.bundle("insert.success"));
		}
		// 新增失败
		return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("insert.fail"));
	}

	@Override
	public Map<String, Object> updateDoctorDetail(Integer id, DoctorDetail doctorDetail, BindingResult result) {

		// 设置主键
	    doctorDetail.setDoctorId(id);
		// 检查数据是否重复
		Map<String, Object> dataMap = doctorDetailService.getDoctorDetailByFiled(doctorDetail);
		if (dataMap != null && dataMap.size() > 0) {
			// 数据已存在 返回提示结束流程
			//return ResultMap.convertMap(ResultCode.CODE_DATA_EXISTS, Message.bundle("data.exists"));
		}
		// 执行修改 判断状态
		if (doctorDetailService.updateDoctorDetail(doctorDetail) > 0) {
			// 修改成功 返回提示结束流程
			return ResultMap.convertMap(ResultCode.CODE_SUCCESS, Message.bundle("update.success"));
		} else {
			// 修改不成功的时候  说明doctor——detail的doctor_id 不存在，现在就要对doctor_detail进行添加数据
			doctorDetail.setIdCard(doctorDetail.getIdCard());
			
			if(doctorDetailService.insertDoctorDetail(doctorDetail)>0){
				
			return ResultMap.convertMap(ResultCode.CODE_SUCCESS, Message.bundle("update.success"));	
			 }
			throw new RuntimeException();
			// 修改失败 返回提示结束流程
			///return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("update.fail"));
		}
	}

	@Override
	public Map<String, Object> getDoctorDetailList(DoctorDetail doctorDetail, BindingResult result,HttpServletRequest req) {
         HttpSession session=req.getSession();
		 if(session.getAttribute("user")!=null){
			 
			 Map<String, Object> resultMap = new HashMap<>();
			 //得到返回数据
			 List<Map<String, Object>> dataList = doctorDetailService.getDoctorDetailList(doctorDetail);
			 if (dataList != null && dataList.size() > 0) {
				 //得到数据总数
				 resultMap.put(Global.DATA_TOTAL, doctorDetail.getTotal());
				 resultMap.put(Global.DATA_ROWS, dataList);
				 return ResultMap.convertMap(ResultCode.CODE_SUCCESS, resultMap, Message.bundle("query.success"));
			 }
			 return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("query.empty"));
		 }else{
			 return ResultMap.convertMap(ResultCode.CODE_NO_LOGIN, Message.bundle("permission.no.login"));
		 }
		
	}

	@Override
	public Map<String, Object> getDoctorDetailDetail(Integer id, DoctorDetail doctorDetail) {
		//设置主键ID
		doctorDetail.setDoctorId(id);
		//查询详情
		Map<String, Object> resultList = doctorDetailService.getDoctorDetailDetail(doctorDetail);
		if (resultList != null && resultList.size() > 0) {
			return ResultMap.convertMap(ResultCode.CODE_SUCCESS, resultList, Message.bundle("query.success"));
		}
		return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("query.empty"));
	}

	@Override
	public Map<String, Object> deleteDoctorDetail(Integer id, DoctorDetail doctorDetail) {
		//设置主键ID
		doctorDetail.setDoctorId(id);
		System.out.println(id);
		//查询详情
		Map<String, Object> resultList =doctorDetailService.getDoctorDetailDetail(doctorDetail);
		if (resultList == null || resultList.size() <=0) {
			return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY,Message.bundle("doctor.empty"));
		}
		//执行删除
		if (doctorDetailService.deleteDoctorDetail(doctorDetail)>0) {
			return ResultMap.convertMap(ResultCode.CODE_SUCCESS, Message.bundle("delete.success"));
		}
		return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("delete.fail"));
	}


}
