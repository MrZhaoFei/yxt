package org.system.controller.impl;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.core.result.ResultCode;
import org.core.result.ResultMap;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.system.Global;
import org.system.controller.iface.IAddressController;
import org.system.entity.Address;
import org.system.message.Message;
import org.system.service.iface.IAddressService;

@Controller
public class AddressController implements IAddressController {
	
	Logger log = LoggerFactory.getLogger(AddressController.class);
	@Resource
	private IAddressService addressService;
	
    /**
     * @description 添加行政区域数据
     */
	@Override
	public Map<String, Object> insertAddress(Address address, BindingResult result) {
		// 检查数据是否存在
		Map<String, Object> dataMap = addressService.getAddressByFiled(address);
		if (dataMap != null && dataMap.size() > 0) {
			return ResultMap.convertMap(ResultCode.CODE_DATA_EXISTS, Message.bundle("data.exists"));
		}
		if (addressService.insertAddress(address)> 0) {
		// 新增成功
			return ResultMap.convertMap(ResultCode.CODE_SUCCESS, Message.bundle("insert.success"));
		}
		// 新增失败
		return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("insert.fail"));
	}

	/**
	 * @description 修改行政区域数据
	 *  
	 */
	@Override
	public Map<String, Object> updateAddress(Integer id, Address address, BindingResult result) {
		// 得到修改行政区域的id
		address.setId(id);
		//检查数据是否存在
		Map<String, Object> dataMap = addressService.getAddressByFiled(address);
		if (dataMap != null && dataMap.size() > 0) {
		// 数据已存在
			return ResultMap.convertMap(ResultCode.CODE_DATA_EXISTS, Message.bundle("data.exists"));
		}
		// 执行数据修改
		if (addressService.updateAddress(address) > 0) {
			return ResultMap.convertMap(ResultCode.CODE_SUCCESS, Message.bundle("update.success"));
		}else{
			return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("update.fail"));
		}
	}
    
	/**
	 * @description 获取行政区域列表数据
	 */
	@Override
	public Map<String, Object> getAddressList(Address address, BindingResult result,HttpServletRequest req) {
		// 获取session
		 HttpSession session=req.getSession();
		 if(session.getAttribute("user")!=null){
			 Map<String, Object> resultMap = new HashMap<>();
			 List<Map<String, Object>> dataList = addressService.getAddressList(address);			 
			 if (dataList != null && dataList.size() > 0) {
				 // 得到数据总条数 
				 resultMap.put(Global.DATA_TOTAL, address.getTotal());
				 resultMap.put(Global.DATA_ROWS, dataList);
				return ResultMap.convertMap(ResultCode.CODE_SUCCESS, resultMap, Message.bundle("query.success"));
			 }
			 return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("query.empty"));
		 }else{
			 // 重新登录
			 return ResultMap.convertMap(ResultCode.CODE_NO_LOGIN, Message.bundle("permission.no.login"));
		 }
	}

	/**
	 * @description 获取行政区域详细信息
	 * @param id
	 */
	@Override
	public Map<String, Object> getAddressDetail(Integer id, Address address) {
		// 设置实例的id属性
		address.setId(id);
		Map<String, Object> resultList = addressService.getAddressDetail(address);
		if (resultList != null && resultList.size() > 0) {
			return ResultMap.convertMap(ResultCode.CODE_SUCCESS, resultList, Message.bundle("query.success"));
		}
		return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("query.empty"));
	}  
	
	@Override	
	public Map<String, Object> getAddressChildList(Integer pid, Address address, BindingResult result) {
		//	address.setPid(pid);
		Map<String, Object> resultMap = new HashMap<>();
		List<Map<String, Object>> dataList = addressService.getAddressChildList(address);
		if (dataList != null && dataList.size() > 0) {
			resultMap.put(Global.DATA_TOTAL, address.getTotal());
			resultMap.put(Global.DATA_ROWS, dataList);
			return ResultMap.convertMap(ResultCode.CODE_SUCCESS, resultMap, Message.bundle("query.success"));
		}
		return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("query.empty"));
	}

	@Override
	public Map<String, Object> deleteAddress(Integer id, Address address) {
		address.setId(id);
		//查询详情 检查数据是否存在
		Map<String, Object> resultList = addressService.getAddressDetail(address);
		if (resultList == null || resultList.size() <= 0) {
			return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY,Message.bundle("address.empty"));
		}
		//执行删除
		if (addressService.deleteAddress(address)>0) {
			return ResultMap.convertMap(ResultCode.CODE_SUCCESS, Message.bundle("delete.success"));
		}
		return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("delete.fail"));
	}

	

	@Override
	public Map<String, Object> getAddress(String pid, Address address, BindingResult result) {
		//定义返回对象
		Map<String, Object> resultMap = new HashMap<>();
		List<Map<String, Object>> dataList =addressService.getAddress(address); 
		if (dataList != null && dataList.size() > 0) {
			resultMap.put(Global.DATA_TOTAL, address.getTotal());
			resultMap.put(Global.DATA_ROWS, dataList);
			return ResultMap.convertMap(ResultCode.CODE_SUCCESS, resultMap, Message.bundle("query.success"));
		}
		return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("query.empty"));
	}

	@Override
	public Map<String, Object> getAddressMaxId(Address address, BindingResult result) {
		Map<String, Object> resultMap = new HashMap<>();
		Map<String, Object> dataList =addressService.getAddressMaxId(address);
		if (dataList != null && dataList.size() > 0) {
			resultMap.put(Global.DATA_TOTAL, address.getTotal());
			resultMap.put(Global.DATA_ROWS, dataList);
			return ResultMap.convertMap(ResultCode.CODE_SUCCESS, resultMap, Message.bundle("insert.success"));
		}
		return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("query.empty"));
	}

	@Override
	public Map<String, Object> getAddressCodeValue(Integer id, Address address) {
		// 设置实例的id属性
				address.setId(id);
				Map<String, Object> resultList = addressService.getAddressCodeValue(address);
				System.out.println(resultList.toString());     
				if (resultList != null && resultList.size() > 0) {
					return ResultMap.convertMap(ResultCode.CODE_SUCCESS, resultList, Message.bundle("query.success"));
				}
				return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("query.empty"));
	}

}
