package org.system.controller.iface.doctor;

import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.core.annotation.RequiresPermissions;
import org.springframework.validation.BindingResult;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.system.entity.doctor.Doctor;
import org.utils.spring.Groups;

/**
 * @ClassName: IDoctorController
 * @Description: 医生
 * @author: LiuGangQiang
 * @date: 2016年5月16日 上午10:48:00
 */
@RequestMapping(value = { "/doctor" })
public interface IDoctorController {
	/**
	 * @Title: login
	 * @Description: 医生登录
	 * @param validCode
	 * @param doctor
	 * @param result
	 * @param session
	 * @return Map<String,Object>
	 */
	@RequestMapping(value = { "/login/{validCode}" }, method = RequestMethod.GET)
	@ResponseBody
	@RequiresPermissions("doctor:login")
	public Map<String, Object> login(@PathVariable("validCode") String validCode,
			@Validated({ Groups.Select.class }) Doctor doctor, BindingResult result, HttpSession session,HttpServletRequest request);

	/**
	 * @Title: getDoctorInfo
	 * @Description: 获取医生信息
	 * @param validCode
	 * @param doctor
	 * @param result
	 * @param session
	 * @return Map<String,Object>
	 */
	@RequestMapping(value = { "/info" }, method = RequestMethod.GET)
	@ResponseBody
	@RequiresPermissions("doctor:info")
	public Map<String, Object> getDoctorInfo(@RequestHeader(value = "token", required = false) String token);

	/**
	 * @Title: updatePassword
	 * @Description: 医生修改密码
	 * @param doctor
	 * @param result
	 * @param token
	 * @return Map<String,Object>
	 */
	@RequestMapping(value = { "/update/password" }, method = RequestMethod.PUT)
	@ResponseBody
	@RequiresPermissions("doctor:update:password")
	public Map<String, Object> updatePassword(@Validated({ Doctor.UpdatePassword.class }) Doctor doctor,
			BindingResult result, @RequestHeader(value = "token", required = false) String token);

	/**
	 * @Title: updatePhone
	 * @Description: 医生修改手机
	 * @param validCode
	 * @param doctor
	 * @param result
	 * @param token
	 * @return Map<String,Object>
	 */
	@RequestMapping(value = { "/update/phone/{validCode}" }, method = RequestMethod.PUT)
	@ResponseBody
	@RequiresPermissions("doctor:update:phone")
	public Map<String, Object> updatePhone(@PathVariable("validCode") String validCode,
			@Validated({ Doctor.UpdatePhone.class }) Doctor doctor, BindingResult result,
			@RequestHeader(value = "token", required = false) String token);

	/**
	 * @Title: retrievePassword
	 * @Description: 医生找回密码
	 * @param validCode
	 * @param doctor
	 * @param result
	 * @return Map<String,Object>
	 */
	@RequestMapping(value = { "/retrieve/password/{validCode}" }, method = RequestMethod.PUT)
	@ResponseBody
	@RequiresPermissions("doctor:retrieve:password")
	public Map<String, Object> retrievePassword(@PathVariable("validCode") String validCode,
			@Validated({ Doctor.RetrievePassword.class }) Doctor doctor, BindingResult result);

	/**
	 * @Title: getDoctorsList
	 * @Description: 获取医生列表
	 * @param doctor
	 * @param result
	 * @param token
	 * @return Map<String,Object>
	 */
	@RequestMapping(value = "/doctors", method = RequestMethod.GET)
	@ResponseBody
	@RequiresPermissions("doctors:list")
	public Map<String, Object> getDoctorsList(@Validated({ Doctor.getDoctorList.class }) Doctor doctor,
			BindingResult result, @RequestHeader(value = "token", required = false) String token);

	/**
	 * @Title: getStoreToken
	 * @Description: 得到文件服务器的口令
	 * @param token
	 * @return Map<String,Object>
	 */
	@RequestMapping(value = "/store/{chooseStr}", method = RequestMethod.GET)
	@ResponseBody
	public Map<String, Object> getStoreToken(@RequestHeader(value = "token", required = false) String token,
			@PathVariable("chooseStr") String chooseStr);

	/**
	 * @Title: getDoctorPatientsList
	 * @Description: 查询我的患者
	 * @param token
	 * @return Map<String,Object>
	 */
	@RequestMapping(value = "/patients", method = RequestMethod.GET)
	@ResponseBody
	public Map<String, Object> getDoctorPatientsList(@Validated({ Groups.Other.class }) Doctor doctor,
			BindingResult result, @RequestHeader(value = "token", required = false) String token);
	
	/**
	 * 医生绑定
	 * 
	 * @param validCode
	 * @param doctor
	 * @param result
	 * @return
	 */
	@RequestMapping(value = "/bind/{validCode}", method = RequestMethod.PUT)
	@ResponseBody
	@RequiresPermissions("doctor:bind")
	public Map<String, Object> bingDoctor(@PathVariable("validCode") String validCode,
			@Validated({ Doctor.WechatBind.class }) Doctor doctor, BindingResult result);
	
	/**
	 * 医生注销
	 * 
	 * @param token
	 * @return
	 */
	@RequestMapping(value = { "/logoffDoctor" }, method = RequestMethod.PUT)
	@ResponseBody
	public Map<String, Object> logoffDoctor(@RequestHeader(value = "token", required = false) String token,HttpServletRequest request);

	

}