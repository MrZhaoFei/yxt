package org.system.controller.impl;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.core.result.ResultCode;
import org.core.result.ResultMap;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.system.Global;
import org.system.controller.iface.IPackageTypeController;
import org.system.entity.service.PackageType;
import org.system.message.Message;
import org.system.service.iface.service.IPackageTypeService;

@Controller
public class PackageTypeController implements IPackageTypeController{
	Logger log = LoggerFactory.getLogger(PackageTypeController.class);
	@Resource
	private IPackageTypeService packageTypeService;
	/**
	 * 产品类型列表
	 *  获取session  
	 *  得到产品类型数据 
	 */
	@Override
	public Map<String, Object> getPackageTypeList(PackageType packageType, BindingResult result,HttpServletRequest req) {
		 HttpSession session=req.getSession();
		 if(session.getAttribute("user")!=null){
			 
			 Map<String, Object> resultMap = new HashMap<>();
			 //得到返回数据
			 List<Map<String, Object>> dataList = packageTypeService.getPackageTypeList(packageType);
			 
			 if (dataList != null && dataList.size() > 0) {
				 //得到数据总数
				 resultMap.put(Global.DATA_TOTAL, packageType.getTotal());
				 resultMap.put(Global.DATA_ROWS, dataList);
				 return ResultMap.convertMap(ResultCode.CODE_SUCCESS, resultMap, Message.bundle("query.success"));
			 }
			 return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("query.empty"));
		 }else{
			 return ResultMap.convertMap(ResultCode.CODE_NO_LOGIN, Message.bundle("permission.no.login"));
		 }
	}
	
	/**
	 * 新增产品类型
	 * 
	 */
	@Override
	public Map<String, Object> insertPackageType(PackageType packageType, BindingResult result) {
		 // 检查数据是否存在
		Map<String, Object> dataMap = packageTypeService.getPackageTypeByFiled(packageType);
		
		if (dataMap != null && dataMap.size() > 0) {
			return ResultMap.convertMap(ResultCode.CODE_DATA_EXISTS, Message.bundle("data.exists"));
		}
		if (packageTypeService.insertPackageType(packageType)> 0) {
			// 新增成功
			return ResultMap.convertMap(ResultCode.CODE_SUCCESS, Message.bundle("insert.success"));
		}
		// 新增失败
		return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("insert.fail"));
	}
	
	/**
	 * 修改产品类型 (package_type)
	 */
	@Override
	public Map<String, Object> updatePackageType(Integer id, PackageType packageType, BindingResult result) {
		//检查数据是否存在
		packageType.setId(id);
		Map<String, Object> dataMap = packageTypeService.getPackageTypeByFiled(packageType);
		if (dataMap != null && dataMap.size() > 0) {
		// 数据已存在
			return ResultMap.convertMap(ResultCode.CODE_DATA_EXISTS, Message.bundle("data.exists"));
		}
		// 执行修改数据
		if (packageTypeService.updatePackageType(packageType) > 0) {
			return ResultMap.convertMap(ResultCode.CODE_SUCCESS, Message.bundle("update.success"));
		}
		return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("update.fail"));
	}
	
	/**
	 * 获取单条数据详情 (package_type)
	 */
	@Override
	public Map<String, Object> getPackageTypeDetail(Integer id, PackageType packageType) {
		// 设置实例的id属性
		packageType.setId(id);
		Map<String, Object> resultList = packageTypeService.getPackageTypeDetail(packageType);
		if (resultList != null && resultList.size() > 0) {
			return ResultMap.convertMap(ResultCode.CODE_SUCCESS, resultList, Message.bundle("query.success"));
		}
		return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("query.empty"));
	}
	
	/**
	 * 删除数据（package_type）
	 */
	@Override
	public Map<String, Object> deletePackageType(Integer id, PackageType packageType) {
		// 设置实例的id属性
		packageType.setId(id);
		Map<String, Object> resultList = packageTypeService.getPackageTypeDetail(packageType);
		if (resultList == null || resultList.size() <= 0) {
			return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY,Message.bundle("packageType.empty"));
		}
		//执行删除
		if (packageTypeService.deletePackageType(packageType) >0) {
			return ResultMap.convertMap(ResultCode.CODE_SUCCESS,Message.bundle("delete.success"));
		}
		return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("delete.fail"));
	}

}
