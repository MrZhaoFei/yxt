package org.system.controller.impl.user.healthtest;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.core.result.ResultCode;
import org.core.result.ResultMap;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.system.Global;
import org.system.controller.iface.user.healthtest.IUserDailyBloodPressureController;
import org.system.entity.user.User;
import org.system.entity.user.healthtest.UserDailyBloodPressure;
import org.system.message.Message;
import org.system.service.iface.user.IUserService;
import org.system.service.iface.user.healthtest.IUserDailyBloodPressureService;

import net.sf.ehcache.CacheManager;
import net.sf.ehcache.Element;

@Controller
public class UserDailyBloodPressureController implements IUserDailyBloodPressureController {
	Logger log = LoggerFactory.getLogger(UserDailyBloodPressureController.class);
	@Resource
	private IUserDailyBloodPressureService userDailyBloodPressureService;
	@Resource
	private CacheManager cache;
	@Resource
	private IUserService userService;

	@Override
	public Map<String, Object> insertUserDailyBloodPressure(UserDailyBloodPressure userDailyBloodPressure,
			BindingResult result, String token) {
		// 缓存中获取用户数据
		Element element = cache.getCache(Global.CACHE_USER).get(token);
		if (element != null) {
			@SuppressWarnings("unchecked")
			Map<String, Object> userMap = (Map<String, Object>) element.getObjectValue();
			// 设置用户id
			userDailyBloodPressure.setUserId((Integer) userMap.get("id"));
			userDailyBloodPressure.setDate(new Date());
			// 执行新增 判断状态
			if (userDailyBloodPressureService.insertUserDailyBloodPressure(userDailyBloodPressure) > 0) {
				// 新增成功 返回提示结束流程
				return ResultMap.convertMap(ResultCode.CODE_SUCCESS, Message.bundle("insert.success"));
			} else {
				// 新增失败 返回提示结束流程
				return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("insert.fail"));
			}
		} else {
			return ResultMap.convertMap(ResultCode.CODE_NO_LOGIN, Message.bundle("permission.no.login"));
		}

	}

	@Override
	public Map<String, Object> updateUserDailyBloodPressure(Integer userDailyBloodPressureId,
			UserDailyBloodPressure userDailyBloodPressure, BindingResult result) {
		return null;
	}

	@Override
	public Map<String, Object> getUserDailyBloodPressureList(UserDailyBloodPressure userDailyBloodPressure,
			BindingResult result, String token) {
		// 缓存中获取用户数据
		Element element = cache.getCache(Global.CACHE_USER).get(token);
		if (element != null) {
			@SuppressWarnings("unchecked")
			Map<String, Object> userMap = (Map<String, Object>) element.getObjectValue();
			// 设置用户id
			userDailyBloodPressure.setUserId((Integer) userMap.get("id"));
			// 定义返回对象
			Map<String, Object> resultMap = new HashMap<>();
			// 根据用户id查询用户的服务项
			List<Map<String, Object>> userDailyBloodPressureList = userDailyBloodPressureService
					.getUserDailyBloodPressureList(userDailyBloodPressure);
			if (userDailyBloodPressureList != null && userDailyBloodPressureList.size() > 0) {
				// 得到数据总数
				resultMap.put(Global.DATA_TOTAL, userDailyBloodPressure.getTotal());
				resultMap.put(Global.DATA_ROWS, userDailyBloodPressureList);
				return ResultMap.convertMap(ResultCode.CODE_SUCCESS, resultMap, Message.bundle("query.success"));
			}
			return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("query.empty"));
		} else {
			return ResultMap.convertMap(ResultCode.CODE_NO_LOGIN, Message.bundle("permission.no.login"));
		}
	}

	@Override
	public Map<String, Object> getUserDailyBloodPressureDetail(Integer userDailyBloodPressureId,
			UserDailyBloodPressure userDailyBloodPressure) {
		return null;
	}

	@Override
	public Map<String, Object> insertDoctorUserDailyBloodPressure(UserDailyBloodPressure userDailyBloodPressure,
			BindingResult result, String token) {
		// 缓存中获取用户数据
		Element element = cache.getCache(Global.CACHE_DOCTOR).get(token);
		if (element != null) {
			User u=new User();
			u.setId(userDailyBloodPressure.getUserId());
			Map<String, Object>	userMap=userService.getUserDetail(u);
			if (userMap==null || userMap.size()<=0) {
				return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("user.empty"));
			}
			// 执行新增 判断状态
			if (userDailyBloodPressureService.insertUserDailyBloodPressure(userDailyBloodPressure) > 0) {
				// 新增成功 返回提示结束流程
				return ResultMap.convertMap(ResultCode.CODE_SUCCESS, Message.bundle("insert.success"));
			} else {
				// 新增失败 返回提示结束流程
				return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("insert.fail"));
			}
		} else {
			return ResultMap.convertMap(ResultCode.CODE_NO_LOGIN, Message.bundle("permission.no.login"));
		}
	}

	@Override
	public Map<String, Object> getDoctorUserDailyBloodPressureList(UserDailyBloodPressure userDailyBloodPressure,
			BindingResult result, String token) {
		// 缓存中获取用户数据
		Element element = cache.getCache(Global.CACHE_DOCTOR).get(token);
		if (element != null) {
			// 定义返回对象
			Map<String, Object> resultMap = new HashMap<>();
			// 根据用户id查询用户的服务项
			List<Map<String, Object>> userDailyBloodPressureList = userDailyBloodPressureService
					.getUserDailyBloodPressureList(userDailyBloodPressure);
			if (userDailyBloodPressureList != null && userDailyBloodPressureList.size() > 0) {
				// 得到数据总数
				resultMap.put(Global.DATA_TOTAL, userDailyBloodPressure.getTotal());
				resultMap.put(Global.DATA_ROWS, userDailyBloodPressureList);
				return ResultMap.convertMap(ResultCode.CODE_SUCCESS, resultMap, Message.bundle("query.success"));
			}
			return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("query.empty"));
		} else {
			return ResultMap.convertMap(ResultCode.CODE_NO_LOGIN, Message.bundle("permission.no.login"));
		}
	}

}
