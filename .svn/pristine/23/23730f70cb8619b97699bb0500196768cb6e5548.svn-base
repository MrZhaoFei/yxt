package org.system.controller.impl.user.healthtest;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.core.result.ResultCode;
import org.core.result.ResultMap;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.system.Global;
import org.system.controller.iface.user.healthtest.IUserDailyBloodSugarController;
import org.system.entity.user.User;
import org.system.entity.user.healthtest.UserDailyBloodSugar;
import org.system.message.Message;
import org.system.service.iface.user.IUserService;
import org.system.service.iface.user.healthtest.IUserDailyBloodSugarService;

import net.sf.ehcache.CacheManager;
import net.sf.ehcache.Element;

@Controller
public class UserDailyBloodSugarController implements IUserDailyBloodSugarController {
	Logger log = LoggerFactory.getLogger(UserDailyBloodSugarController.class);
	@Resource
	private IUserDailyBloodSugarService userDailyBloodSugarService;
	@Resource
	private CacheManager cache;
	@Resource
	private IUserService userService;

	@Override
	public Map<String, Object> insertUserDailyBloodSugar(UserDailyBloodSugar userDailyBloodSugar, BindingResult result,
			String token) {
		// 缓存中获取用户数据
		Element element = cache.getCache(Global.CACHE_USER).get(token);
		if (element != null) {
			@SuppressWarnings("unchecked")
			Map<String, Object> userMap = (Map<String, Object>) element.getObjectValue();
			// 设置用户id
			userDailyBloodSugar.setUserId((Integer) userMap.get("id"));
			userDailyBloodSugar.setDate(new Date());
			// 执行新增 判断状态
			if (userDailyBloodSugarService.insertUserDailyBloodSugar(userDailyBloodSugar) > 0) {
				// 新增成功 返回提示结束流程
				return ResultMap.convertMap(ResultCode.CODE_SUCCESS, Message.bundle("insert.success"));
			} else {
				// 新增失败 返回提示结束流程
				return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("insert.fail"));
			}
		} else {
			return ResultMap.convertMap(ResultCode.CODE_NO_LOGIN, Message.bundle("permission.no.login"));
		}

	}

	@Override
	public Map<String, Object> updateUserDailyBloodSugar(Integer userDailyBloodSugarId,
			UserDailyBloodSugar userDailyBloodSugar, BindingResult result) {
		return null;
	}

	@Override
	public Map<String, Object> getUserDailyBloodSugarList(UserDailyBloodSugar userDailyBloodSugar, BindingResult result,
			String token) {
		// 缓存中获取用户数据
		Element element = cache.getCache(Global.CACHE_USER).get(token);
		if (element != null) {
			@SuppressWarnings("unchecked")
			Map<String, Object> userMap = (Map<String, Object>) element.getObjectValue();
			// 设置用户id
			userDailyBloodSugar.setUserId((Integer) userMap.get("id"));
			// 定义返回对象
			Map<String, Object> resultMap = new HashMap<>();
			// 根据用户id查询用户的服务项
			List<Map<String, Object>> userDailyBloodSugarList = userDailyBloodSugarService
					.getUserDailyBloodSugarList(userDailyBloodSugar);
			if (userDailyBloodSugarList != null && userDailyBloodSugarList.size() > 0) {
				// 得到数据总数
				resultMap.put(Global.DATA_TOTAL, userDailyBloodSugar.getTotal());
				resultMap.put(Global.DATA_ROWS, userDailyBloodSugarList);
				return ResultMap.convertMap(ResultCode.CODE_SUCCESS, resultMap, Message.bundle("query.success"));
			}
			return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("query.empty"));
		} else {
			return ResultMap.convertMap(ResultCode.CODE_NO_LOGIN, Message.bundle("permission.no.login"));
		}
	}

	@Override
	public Map<String, Object> getUserDailyBloodSugarDetail(Integer userDailyBloodSugarId,
			UserDailyBloodSugar userDailyBloodSugar) {
		return null;
	}

	@Override
	public Map<String, Object> insertDoctorUserDailyBloodSugar(UserDailyBloodSugar userDailyBloodSugar,
			BindingResult result, String token) {
		// 缓存中获取用户数据
		Element element = cache.getCache(Global.CACHE_DOCTOR).get(token);
		if (element != null) {
			User u=new User();
			u.setId(userDailyBloodSugar.getUserId());
			Map<String, Object>	userMap=userService.getUserDetail(u);
			if (userMap==null || userMap.size()<=0) {
				return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("user.empty"));
			}
			// 执行新增 判断状态
			if (userDailyBloodSugarService.insertUserDailyBloodSugar(userDailyBloodSugar) > 0) {
				// 新增成功 返回提示结束流程
				return ResultMap.convertMap(ResultCode.CODE_SUCCESS, Message.bundle("insert.success"));
			} else {
				// 新增失败 返回提示结束流程
				return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("insert.fail"));
			}
		} else {
			return ResultMap.convertMap(ResultCode.CODE_NO_LOGIN, Message.bundle("permission.no.login"));
		}
	}

	@Override
	public Map<String, Object> getDoctorUserDailyBloodSugarList(UserDailyBloodSugar userDailyBloodSugar,
			BindingResult result, String token) {
		// 缓存中获取用户数据
		Element element = cache.getCache(Global.CACHE_DOCTOR).get(token);
		if (element != null) {
			// 定义返回对象
			Map<String, Object> resultMap = new HashMap<>();
			// 根据用户id查询用户的服务项
			List<Map<String, Object>> userDailyBloodSugarList = userDailyBloodSugarService
					.getUserDailyBloodSugarList(userDailyBloodSugar);
			if (userDailyBloodSugarList != null && userDailyBloodSugarList.size() > 0) {
				// 得到数据总数
				resultMap.put(Global.DATA_TOTAL, userDailyBloodSugar.getTotal());
				resultMap.put(Global.DATA_ROWS, userDailyBloodSugarList);
				return ResultMap.convertMap(ResultCode.CODE_SUCCESS, resultMap, Message.bundle("query.success"));
			}
			return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("query.empty"));
		} else {
			return ResultMap.convertMap(ResultCode.CODE_NO_LOGIN, Message.bundle("permission.no.login"));
		}
	}

}
