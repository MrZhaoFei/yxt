package org.system.controller.impl.sys;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.core.result.ResultCode;
import org.core.result.ResultMap;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.BindingResult;
import org.system.Global;
import org.system.controller.iface.sys.ISysHintMessageController;
import org.system.entity.sys.SysHintMessage;
import org.system.message.Message;
import org.system.service.iface.sms.ISmsSendTaskService;
import org.system.service.iface.sys.ISysHintMessageService;
import org.system.service.iface.user.IUserService;

import net.sf.ehcache.CacheManager;
import net.sf.ehcache.Element;

@Controller
public class SysHintMessageController implements ISysHintMessageController {

	Logger log = LoggerFactory.getLogger(SysHintMessageController.class);
	@Resource
	private CacheManager cache;
	@Resource
	private ISysHintMessageService sysHintMessageService;
	@Resource
	private IUserService userService;
	@Resource
	private ISmsSendTaskService smsSendTaskService;

	@Override
	public Map<String, Object> getSysHintMessageList(SysHintMessage sysHintMessage, BindingResult result,
			String token) {
		// 缓存中获取用户数据
		Element element = cache.getCache(Global.CACHE_DOCTOR).get(token);
		if (element != null) {
			@SuppressWarnings("unchecked")
			Map<String, Object> doctorMap = (Map<String, Object>) element.getObjectValue();
			// 设置 收到提醒医生ID
			sysHintMessage.setToDoctorId(doctorMap.get("id").toString());
			// 定义返回对象
			Map<String, Object> resultMap = new HashMap<>();
			// 根据用户id查询用户的服务项
			List<Map<String, Object>> messageList = sysHintMessageService.getSysHintMessageList(sysHintMessage);
			if (messageList != null && messageList.size() > 0) {
				resultMap.put(Global.DATA_TOTAL, sysHintMessage.getTotal());
				resultMap.put(Global.DATA_ROWS, messageList);
				return ResultMap.convertMap(ResultCode.CODE_SUCCESS, resultMap, Message.bundle("query.success"));
			}
			return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("query.empty"));

		} else {
			return ResultMap.convertMap(ResultCode.CODE_NO_LOGIN, Message.bundle("permission.no.login"));
		}
	}

	@Override
	public Map<String, Object> updateSysHintMessageRead(Integer messageId, SysHintMessage sysHintMessage,
			BindingResult result, String token) {
		// 设置主键ID
		sysHintMessage.setId(messageId);
		// 缓存中获取用户数据
		Element element = cache.getCache(Global.CACHE_DOCTOR).get(token);
		if (element != null) {
			// 设置消息状态为 1 已读
			sysHintMessage.setMsgState(1);
			// 执行修改操作
			if (sysHintMessageService.updateSysHintMessage(sysHintMessage) > 0) {
				return ResultMap.convertMap(ResultCode.CODE_SUCCESS, Message.bundle("update.success"));
			}
			return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("update.fail"));
		} else {
			return ResultMap.convertMap(ResultCode.CODE_NO_LOGIN, Message.bundle("permission.no.login"));
		}
	}

	@Override
	public Map<String, Object> getMySetSysHintMessageList(SysHintMessage sysHintMessage, BindingResult result,
			String token) {
		// 缓存中获取用户数据
		Element element = cache.getCache(Global.CACHE_DOCTOR).get(token);
		if (element != null) {
			@SuppressWarnings("unchecked")
			Map<String, Object> doctorMap = (Map<String, Object>) element.getObjectValue();
			// 设置 发出消息医生ID
			sysHintMessage.setFromDoctorId((Integer) doctorMap.get("id"));
			sysHintMessage.setMsgType(2);
			// 定义返回对象
			Map<String, Object> resultMap = new HashMap<>();
			// 根据用户id查询用户的服务项
			List<Map<String, Object>> messageList = sysHintMessageService
					.getSysHintMessageListForDoctor(sysHintMessage);
			if (messageList != null && messageList.size() > 0) {
				resultMap.put(Global.DATA_TOTAL, sysHintMessage.getTotal());
				resultMap.put(Global.DATA_ROWS, messageList);
				return ResultMap.convertMap(ResultCode.CODE_SUCCESS, resultMap, Message.bundle("query.success"));
			}
			return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("query.empty"));
		} else {
			return ResultMap.convertMap(ResultCode.CODE_NO_LOGIN, Message.bundle("permission.no.login"));
		}
	}

	@Override
	public Map<String, Object> updateSysHintMessageMySet(Integer messageId, SysHintMessage sysHintMessage,
			BindingResult result, String token) {
		// 设置主键ID
		sysHintMessage.setId(messageId);
		// 缓存中获取用户数据
		Element element = cache.getCache(Global.CACHE_DOCTOR).get(token);
		if (element != null) {
			// 执行修改操作
			if (sysHintMessageService.updateSysHintMessage(sysHintMessage) > 0) {
				return ResultMap.convertMap(ResultCode.CODE_SUCCESS, Message.bundle("update.success"));
			}
			return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("update.fail"));
		} else {
			return ResultMap.convertMap(ResultCode.CODE_NO_LOGIN, Message.bundle("permission.no.login"));
		}
	}

	@Override
	@Transactional
	public Map<String, Object> insertSysHintMessage(SysHintMessage sysHintMessage, BindingResult result, String token) {

		// 缓存中获取用户数据
		Element element = cache.getCache(Global.CACHE_DOCTOR).get(token);
		if (element != null) {
			@SuppressWarnings("unchecked")
			Map<String, Object> doctorMap = (Map<String, Object>) element.getObjectValue();

			// 获取用户id数组
			if (sysHintMessage.getUserIds() == null || "".equals(sysHintMessage.getUserIds())) {
				return ResultMap.convertMap(ResultCode.CODE_PARAMETER_ERROR, Message.bundle("user.id.empty"));
			}
			Map<String, Object> param = new HashMap<>();
			param.put("ids", sysHintMessage.getUserIds());
			List<Map<String, Object>> userList = userService.getUserList(param);
			if (userList.size() != sysHintMessage.getUserIds().size()) {
				return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("user.empty"));
			}
			sysHintMessage.setMsgType(2);
			// 判断是否选择发送短信
			if (sysHintMessage.getIsSendSms()) {
				param.clear();
				// 批量发送短信
				param.put("users", userList);
				param.put("from", doctorMap.get("phone"));
				param.put("fromDoctorId", doctorMap.get("id"));
				param.put("users", userList);
				param.put("content", sysHintMessage.getMsgContent());
				param.put("sendTime", sysHintMessage.getSendTime());
				param.put("createTime", new Date());
				param.put("smsType", 3);
				if (smsSendTaskService.insertSms(param) != sysHintMessage.getUserIds().size()) {
					throw new RuntimeException();
				}
			}
			// 执行新增
			sysHintMessage.setFromDoctorId((Integer) doctorMap.get("id"));
			if (sysHintMessageService.insertSysHintMessage(sysHintMessage) == sysHintMessage.getUserIds().size()
					* sysHintMessage.getToDoctorIds().size()) {
				return ResultMap.convertMap(ResultCode.CODE_SUCCESS, Message.bundle("insert.success"));
			} else {
				throw new RuntimeException();
			}
		} else {
			return ResultMap.convertMap(ResultCode.CODE_NO_LOGIN, Message.bundle("permission.no.login"));
		}
	}

	@Override
	@Transactional
	public Map<String, Object> deletetSysHintMessage(SysHintMessage sysHintMessage, BindingResult result,
			String token) {
		// 缓存中获取用户数据
		Element element = cache.getCache(Global.CACHE_DOCTOR).get(token);
		if (element != null) {
			@SuppressWarnings("unchecked")
			Map<String, Object> doctorMap = (Map<String, Object>) element.getObjectValue();
			// 获取用户id数组
			if (sysHintMessage.getIdss() == null || "".equals(sysHintMessage.getIdss())) {
				return ResultMap.convertMap(ResultCode.CODE_PARAMETER_ERROR, Message.bundle("sysHintMessage.id.empty"));
			}
			Map<String, Object> param = new HashMap<>();
			param.put("ids", sysHintMessage.getIdss());

			List<Map<String, Object>> sysHintMessageList = sysHintMessageService.getsysHintMessageMap(sysHintMessage);
			if (sysHintMessageList.size() > 0) {
				if (sysHintMessageService.deleteSysHintMessage(sysHintMessage) == sysHintMessageList.size()) {
					Map<String, Object> params = new HashMap<>();
					params.put("fromDoctorId", doctorMap.get("id"));
					List<Map<String, Object>> tempList = new ArrayList<>();
					for (Map<String, Object> map : sysHintMessageList) {
						if (map.get("smsSendTime") != null) {
							tempList.add(map);
						}
					}
					params.put("hintList", tempList);
					params.put("smsType", 3);
					if (tempList != null && tempList.size() > 0) {
						smsSendTaskService.deleteSmsByMap(params);
					}
					return ResultMap.convertMap(ResultCode.CODE_SUCCESS, Message.bundle("delete.success"));
				}
				throw new RuntimeException();
			} else {
				return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("query.empty"));
			}
		} else {
			return ResultMap.convertMap(ResultCode.CODE_NO_LOGIN, Message.bundle("permission.no.login"));
		}
	}
}
