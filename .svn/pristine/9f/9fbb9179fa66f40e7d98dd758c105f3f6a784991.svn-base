package org.system.controller.iface.user;

import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.core.annotation.RequiresPermissions;
import org.springframework.validation.BindingResult;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.system.entity.user.User;
import org.utils.spring.Groups;

/**
 * @ClassName IUserController
 * @author <font color="red"><b>LiuMrLiu</b></font>
 * @date 2016年3月18日 下午5:31:07
 * @version 1.0
 * @description 用户信息处理类
 */
@RequestMapping(value = { "/user" })
public interface IUserController {

	/**
	 * @author <font color="green"><b>LiuGangQiang</b></font>
	 * @param user
	 * @param result
	 * @param session
	 * @return {@link Map}
	 * @throws Exception
	 * @date 2016年3月11日 上午9:43:15
	 * @version 1.0
	 * @description 用户微信登陆
	 */
	@RequestMapping(value = "/login", method = RequestMethod.GET)
	@ResponseBody
	@RequiresPermissions("user:login")
	public Map<String, Object> login(@Validated({ User.LoginForWechat.class }) User user, BindingResult result,
			HttpSession session,HttpServletRequest request) throws Exception;

	/**
	 * @author <font color="green"><b>LiuGangQiang</b></font>
	 * @param user
	 * @param result
	 * @param session
	 * @return {@link Map}
	 * @date 2016年3月11日 上午9:43:30
	 * @version 1.0
	 * @description 新增用户
	 */
	@RequestMapping(value = "/insert/{validCode}", method = RequestMethod.POST)
	@ResponseBody
	@RequiresPermissions("user:insert")
	public Map<String, Object> insertUser(@PathVariable("validCode") String validCode,
			@Validated({ Groups.Insert.class }) User user, BindingResult result);

	/**
	 * @author <font color="green"><b>LiuGangQiang</b></font>
	 * @param user
	 * @param result
	 * @param session
	 * @return {@link Map}
	 * @date 2016年3月11日 上午9:43:49
	 * @version 1.0
	 * @description 微信绑定
	 */
	@RequestMapping(value = "/bind/{validCode}", method = RequestMethod.PUT)
	@ResponseBody
	@RequiresPermissions("user:bind")
	public Map<String, Object> bingUser(@PathVariable("validCode") String validCode,
			@Validated({ User.WechatBind.class }) User user, BindingResult result);

	/**
	 * @Title: unbingUser
	 * @Description: 用户解绑
	 * @param validCode
	 * @param user
	 * @param result
	 * @return Map<String,Object>
	 */
	@RequestMapping(value = "/unbind/{validCode}", method = RequestMethod.PUT)
	@ResponseBody
	@RequiresPermissions("user:unbind")
	public Map<String, Object> unbingUser(@PathVariable("validCode") String validCode,
			@Validated({ User.WechatUnBind.class }) User user, BindingResult result);

	/**
	 * @author <font color="green"><b>LiuGangQiang</b></font>
	 * @param user
	 * @param result
	 * @return {@link Map}
	 * @date 2016年3月22日 上午11:29:47
	 * @version 1.0
	 * @description 根据关键字段获取用户信息
	 */
	@RequestMapping(value = "/getUserByIDCard", method = RequestMethod.GET)
	@ResponseBody
	@RequiresPermissions("user:getUserByIDCard")
	public Map<String, Object> getUserByDetailFiled(@Validated({ Groups.Other.class }) User user, BindingResult result);

	/**
	 * @author <font color="green"><b>LiuGangQiang</b></font>
	 * @param userId
	 * @param user
	 * @param result
	 * @return
	 * @date 2016年3月31日 下午7:41:50
	 * @version 1.0
	 * @description 用户修改用户信息
	 */
	@RequestMapping(value = "/user", method = RequestMethod.PUT)
	@ResponseBody
	@RequiresPermissions("user:updateUser")
	public Map<String, Object> updateUser(@Validated({ Groups.Update.class }) User user, BindingResult result,
			@RequestHeader(value = "token", required = false) String token);
	
	
	/**
	 * 医生修改用户信息
	 * 
	 * @param user
	 * @param result
	 * @param token
	 * @return
	 */
	@RequestMapping(value = "/updateUserByDoctor", method = RequestMethod.PUT)
	@ResponseBody
	@RequiresPermissions("doctor:updateUserByDoctor")
	public Map<String, Object> updateUserByDoctor(@Validated({ User.updateUserByDoctor.class }) User user, BindingResult result,
			@RequestHeader(value = "token", required = false) String token);

	/**
	 * @Title: getStoreToken
	 * @Description: 得到文件服务器的口令
	 * @param token
	 * @return Map<String,Object>
	 */
	@RequestMapping(value = "/store/{chooseStr}", method = RequestMethod.GET)
	@ResponseBody
	public Map<String, Object> getStoreToken(@RequestHeader(value = "token", required = false) String token,
			@PathVariable("chooseStr") String chooseStr);

	/**
	 * @Title: getDocPassword
	 * @Description: 判断用户是否设置档案密码
	 * @param token
	 * @return Map<String,Object>
	 */
	@RequestMapping(value = "/isHaveDocPassword", method = RequestMethod.GET)
	@ResponseBody
	public Map<String, Object> getDocPassword(@RequestHeader(value = "token", required = false) String token);

	/**
	 * @Title: setDocPassword
	 * @Description: 用户设置档案密码
	 * @param token
	 * @return Map<String,Object>
	 */
	@RequestMapping(value = "/setDocPassword/{validCode}", method = RequestMethod.PUT)
	@ResponseBody
	public Map<String, Object> setDocPassword(@PathVariable("validCode") String validCode,
			@RequestHeader(value = "token", required = false) String token,
			@Validated({ User.DocPassword.class }) User user, BindingResult result);

	/**
	 * @Title: resetDocPassword
	 * @Description: 重设档案密码
	 * @param token
	 * @return Map<String,Object>
	 */
	@RequestMapping(value = "/resetDocPassword/{validCode}", method = RequestMethod.PUT)
	@ResponseBody
	public Map<String, Object> resetDocPassword(@PathVariable("validCode") String validCode,
			@RequestHeader(value = "token", required = false) String token,
			@Validated({ User.DocPassword.class }) User user, BindingResult result);

	

}