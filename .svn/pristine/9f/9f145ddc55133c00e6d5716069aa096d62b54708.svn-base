package org.system.controller.impl.service.transfer;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.core.result.ResultCode;
import org.core.result.ResultMap;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.BindingResult;
import org.store.wechat.WechatConfig;
import org.system.Global;
import org.system.controller.iface.service.transfer.IImageConsultationDetailyController;
import org.system.entity.doctor.Doctor;
import org.system.entity.service.UserService;
import org.system.entity.service.resp.ServiceRespTask;
import org.system.entity.service.transfer.ImageConsultationDetaily;
import org.system.entity.service.transfer.ImageConsultationRecordsInfo;
import org.system.message.Message;
import org.system.service.iface.doctor.IDoctorService;
import org.system.service.iface.service.IGdNumberInfoService;
import org.system.service.iface.service.IUserServiceService;
import org.system.service.iface.service.resp.IServiceRespTaskService;
import org.system.service.iface.service.transfer.IImageConsultationDetailyService;
import org.system.service.iface.service.transfer.IImageConsultationRecordsInfoService;
import org.system.service.iface.sys.ISysHintMessageService;
import org.utils.service.ServiceEnum;
import org.utils.spring.RESTClient;

import net.sf.ehcache.CacheManager;
import net.sf.ehcache.Element;

@Controller
public class ImageConsultationDetailyController implements IImageConsultationDetailyController {
	Logger log = LoggerFactory.getLogger(ImageConsultationDetailyController.class);
	@Resource
	private IImageConsultationDetailyService imageConsultationDetailyService;
	@Resource
	private IGdNumberInfoService gdNumberInfoService;
	@Resource
	private CacheManager cache;
	@Resource
	private IDoctorService doctorService;
	@Resource
	private IServiceRespTaskService serviceRespTaskService;
	@Resource
	private IUserServiceService userSeviceSevice;
	@Resource
	private IImageConsultationRecordsInfoService imageConsultationRecordsInfoService;
	@Resource
	private ISysHintMessageService sysHintMessageService;

	@Override
	@Transactional
	public synchronized Map<String, Object> insertImageConsultationDetaily(
			ImageConsultationDetaily imageConsultationDetaily, BindingResult resul, String token) {
		// 缓存中获取医生数据
		Element element = cache.getCache(Global.CACHE_DOCTOR).get(token);
		if (element != null) {
			// 新增成功发送至微信
			Map<String, Object> param = new HashMap<>();
			if (imageConsultationDetaily.getDoctorId() != null) {
				// 判断医生是否存在
				Doctor doctor = new Doctor();
				doctor.setId(imageConsultationDetaily.getDoctorId());
				Map<String, Object> doctorMap = doctorService.getDoctorDetil(doctor);
				// 获取医生名和所在医院
				param.put("hospitalName", imageConsultationDetaily.getSnapshot());
				param.put("expertsName", doctorMap.get("name"));
				if (doctorMap == null || doctorMap.size() <= 0) {
					return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("doctor.empty"));
				}
			} // 判断服务响应是否存在
			ServiceRespTask srt = new ServiceRespTask();
			srt.setId(imageConsultationDetaily.getServiceRespTaskId());
			Map<String, Object> srtMap = serviceRespTaskService.getServiceRespTaskDetail(srt);
			if (srtMap == null || srtMap.size() <= 0) {
				return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("serviceRespTask.empty"));
			}
			if ((int) srtMap.get("taskStatus") != 2) {
				return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("serviceRespTask.status.error"));
			}
			// 判断用户服务是否存在且未锁定次数是否大于0 不存在提示用户购买 不大于0提示用户次数不足
			UserService userService = new UserService();
			userService.setId(imageConsultationDetaily.getUserServiceId());
			Map<String, Object> userServiceMap = userSeviceSevice.getUserServiceDetail(userService);
			if (userServiceMap == null || userServiceMap.size() <= 0) {
				return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("userService.empty"));
			} else {
				if (((int) userServiceMap.get("times") - (int) userServiceMap.get("lockTimes")) <= 0) {
					return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("lockTimes.empty"));
				}
			}
			@SuppressWarnings("unchecked")
			Map<String, Object> userMap = (Map<String, Object>) element.getObjectValue();
			// 设置原医生id
			imageConsultationDetaily.setFromDoctorId((Integer) userMap.get("id"));
			// 设置转诊时间
			imageConsultationDetaily.setTransDate(new Date());
			// 设置使用次数
			imageConsultationDetaily.setUsedCount(1);
			// 设置工单号
			imageConsultationDetaily
					.setTransTreatNumber(gdNumberInfoService.getGdnumberForDay(ServiceEnum.YXHZ, new Date()));
			// 设置使用时间
			imageConsultationDetaily.setUsedDate(new Date());
			// 设置默认状态-- 待用户确认状态
			imageConsultationDetaily.setStatus(1);
			imageConsultationDetaily.setUpdateTime(new Date());

			// 新增转诊记录并推送至微信端
			if (imageConsultationDetailyService.insertImageConsultationDetaily(imageConsultationDetaily) > 0) {
				// 添加成功判断是够有病例资料 有则添加
				if (imageConsultationDetaily.getFiles() != null) {
					// 添加病例资料
					if (imageConsultationDetailyService.insertImageConsultationDetailyFiles(
							imageConsultationDetaily) != imageConsultationDetaily.getFiles().size()) {
						throw new RuntimeException();
					}
				}
				// 设置转诊记录信息
				ImageConsultationRecordsInfo transtreatRecordsInfo = new ImageConsultationRecordsInfo();
				transtreatRecordsInfo.setSrcDoctorId(imageConsultationDetaily.getFromDoctorId());
				transtreatRecordsInfo.setDescDoctorId(imageConsultationDetaily.getDoctorId());
				transtreatRecordsInfo.setTransTreatDate(imageConsultationDetaily.getTransDate());
				transtreatRecordsInfo.setImageConsultationDetailyId(imageConsultationDetaily.getId());
				// 执行修改用户该服务的锁定次数 并且 执行新增 转诊记录信息和减掉一次医生预约次数
				if (imageConsultationRecordsInfoService.insertImageConsultationRecordsInfo(transtreatRecordsInfo) > 0) {
					// 锁定用户服务次数
					Integer newLockTimes = (Integer) userServiceMap.get("lockTimes") + 1;
					userService.setLockTimes(newLockTimes);
					// 执行修改 判断状态
					if (userSeviceSevice.updateUserService(userService) <= 0) {
						throw new RuntimeException();
					}
					// 设置订单号
					param.put("orderId", imageConsultationDetaily.getTransTreatNumber());
					// 设置下单时间
					param.put("orderTime", imageConsultationDetaily.getTransDate().getTime());
					// 获取原医生姓名
					param.put("doctorName", userMap.get("name"));
					param.put("openId", srtMap.get("wechatId"));
					param.put("type", "imageConsultation");
					param.put("id", imageConsultationDetaily.getId());
					RESTClient.post(WechatConfig.getServer(), Global.WECHAT_SERVICE_PAYSERVICEPACKAGE, param);
					return ResultMap.convertMap(ResultCode.CODE_SUCCESS, Message.bundle("insert.success"));
				} else {
					throw new RuntimeException();
				}
			}
			return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("insert.fail"));
		} else {
			return ResultMap.convertMap(ResultCode.CODE_NO_LOGIN, Message.bundle("permission.no.login"));
		}
	}

	@Override
	@Transactional
	public Map<String, Object> updateTransTreatSure(Integer imageConsultationDetailyId,
			ImageConsultationDetaily imageConsultationDetaily, BindingResult result, String token) {
		// 缓存中获取用户数据
		Element element = cache.getCache(Global.CACHE_USER).get(token);
		if (element != null) {
			@SuppressWarnings("unchecked")
			Map<String, Object> userMap = (Map<String, Object>) element.getObjectValue();
			// 判断影像会诊信息是否存在
			imageConsultationDetaily.setId(imageConsultationDetailyId);
			// 查询影像会诊详情，获取 用户服务 实际次数和 锁定次数
			Map<String, Object> transMap = imageConsultationDetailyService
					.getImageConsultationDetailyDetail(imageConsultationDetaily);
			if (transMap == null || transMap.size() <= 0) {
				return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("query.empty"));
			}
			// 只允许用户确认或者取消
			if (imageConsultationDetaily.getStatus() != 2 && imageConsultationDetaily.getStatus() != 3
					|| (int) transMap.get("status") != 1) {
				return ResultMap.convertMap(ResultCode.CODE_PARAMETER_ERROR,
						Message.bundle("imageConsultationDetaily.status.error"));
			}
			// 判读是否是属于用户的影像会诊信息
			if ((int) userMap.get("id") != (int) transMap.get("userId")) {
				return ResultMap.convertMap(ResultCode.CODE_PERMISSION_ERROR, Message.bundle("record.is.outside.user"));
			}
			imageConsultationDetaily.setUpdateTime(new Date());
			if (imageConsultationDetaily.getStatus() == 2) {
				imageConsultationDetaily.setUserRejectTime(new Date());
			} else {
				imageConsultationDetaily.setUserConfirmTime(new Date());
			}
			if (imageConsultationDetailyService.updateImageConsultationDetaily(imageConsultationDetaily) > 0) {

				UserService userService = new UserService();
				// 获取用户服务编号
				Integer userServiceId = (Integer) transMap.get("userServiceId");
				Integer lockTimes = (Integer) transMap.get("lockTimes") - 1;
				userService.setLockTimes(lockTimes);
				userService.setId(userServiceId);
				if (imageConsultationDetaily.getStatus() == 3) {
					// 获取转诊记录 用户服务 实际次数 实际次数 -1
					Integer times = (Integer) transMap.get("times") - 1;
					userService.setTimes(times);
				}
				// 执行修改 判断状态
				if (userSeviceSevice.updateUserService(userService) <= 0) {
					throw new RuntimeException();
				}

				// 新增系统消息给医生
				/*
				 * SysHintMessage sysHintMessage = new SysHintMessage();
				 * sysHintMessage.setFromDoctorId((Integer)
				 * transMap.get("fromDoctorId"));
				 * sysHintMessage.setToDoctorId(transMap.get("doctorId").
				 * toString()); sysHintMessage.setMsgType(1);
				 * sysHintMessage.setPackageServiceId((Integer)
				 * transMap.get("productServiceId"));
				 * sysHintMessage.setUserId(transMap.get("userId").toString());
				 * sysHintMessage.setStartTime(new Date());
				 * sysHintMessage.setEndTime(new Date());
				 * sysHintMessage.setMsgContent(Message.bundle(
				 * "sysHintMessage.transTreatDetaily.prompt",
				 * transMap.get("userName"), transMap.get("serviceName"),
				 * transMap.get("transTreatNumber"))); if
				 * (sysHintMessageService.insertSysHintMessage(sysHintMessage)
				 * <= 0) { throw new RuntimeException(); }
				 */
				return ResultMap.convertMap(ResultCode.CODE_SUCCESS, Message.bundle("update.success"));
			} else {
				return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("update.fail"));
			}
		} else {
			return ResultMap.convertMap(ResultCode.CODE_NO_LOGIN, Message.bundle("permission.no.login"));
		}
	}

	@Override
	public Map<String, Object> getImageConsultationDetailyList(ImageConsultationDetaily imageConsultationDetaily,
			BindingResult result, String token) {
		// 缓存中获取医生数据
		Element element = cache.getCache(Global.CACHE_DOCTOR).get(token);
		if (element != null) {
			@SuppressWarnings("unchecked")
			Map<String, Object> userMap = (Map<String, Object>) element.getObjectValue();
			// 设置用户id
			imageConsultationDetaily.setFromDoctorId((Integer) userMap.get("id"));
			// 定义返回对象
			Map<String, Object> resultMap = new HashMap<>();
			List<Map<String, Object>> transList = imageConsultationDetailyService
					.getImageConsultationDetailyList(imageConsultationDetaily);
			resultMap.put(Global.DATA_TOTAL, imageConsultationDetaily.getTotal());
			if (transList != null && transList.size() > 0) {
				// 得到数据总数
				resultMap.put(Global.DATA_ROWS, transList);
				return ResultMap.convertMap(ResultCode.CODE_SUCCESS, resultMap, Message.bundle("query.success"));
			}
			return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, resultMap, Message.bundle("query.empty"));
		} else {
			return ResultMap.convertMap(ResultCode.CODE_NO_LOGIN, Message.bundle("permission.no.login"));
		}
	}

	@Override
	public Map<String, Object> getImageConsultationDetailyDetail(Integer imageConsultationDetailyId,
			ImageConsultationDetaily imageConsultationDetaily, BindingResult result, String token) {
		// 缓存中获取医生数据
		Element element = cache.getCache(Global.CACHE_DOCTOR).get(token);
		if (element != null) {
			/*
			 * @SuppressWarnings("unchecked") Map<String, Object> userMap =
			 * (Map<String, Object>) element.getObjectValue();
			 */
			imageConsultationDetaily.setId(imageConsultationDetailyId);
			// 定义返回对象
			Map<String, Object> transMap = imageConsultationDetailyService
					.getImageConsultationDetailyDetail(imageConsultationDetaily);
			if (transMap != null && transMap.size() > 0) {
				/*
				 * if ((int)userMap.get("id") !=
				 * (int)transMap.get("fromDoctorId")) { return
				 * ResultMap.convertMap(ResultCode.CODE_PERMISSION_ERROR,
				 * Message.bundle("record.is.outside.doctor")); }
				 */
				return ResultMap.convertMap(ResultCode.CODE_SUCCESS, transMap, Message.bundle("query.success"));
			}
			return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("query.empty"));

		} else {
			return ResultMap.convertMap(ResultCode.CODE_NO_LOGIN, Message.bundle("permission.no.login"));
		}
	}

	@Override
	public Map<String, Object> getImageConsultationDetailyDetailByUser(Integer imageConsultationDetailyId,
			ImageConsultationDetaily imageConsultationDetaily, BindingResult result, String token) {
		Element element = cache.getCache(Global.CACHE_USER).get(token);
		if (element != null) {
			/*
			 * @SuppressWarnings("unchecked") Map<String, Object> userMap =
			 * (Map<String, Object>) element.getObjectValue();
			 */
			imageConsultationDetaily.setId(imageConsultationDetailyId);
			// 定义返回对象
			Map<String, Object> transMap = imageConsultationDetailyService
					.getImageConsultationDetailyDetail(imageConsultationDetaily);
			if (transMap != null && transMap.size() > 0) {
				/*
				 * if ((int)userMap.get("id") != (int)transMap.get("userId")) {
				 * return ResultMap.convertMap(ResultCode.CODE_PERMISSION_ERROR,
				 * Message.bundle("record.is.outside.user")); }
				 */
				return ResultMap.convertMap(ResultCode.CODE_SUCCESS, transMap, Message.bundle("query.success"));
			}
			return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("query.empty"));

		} else {
			return ResultMap.convertMap(ResultCode.CODE_NO_LOGIN, Message.bundle("permission.no.login"));
		}
	}

}
