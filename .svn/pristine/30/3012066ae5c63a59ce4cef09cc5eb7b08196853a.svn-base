package org.system.controller.impl.user;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.core.result.ResultCode;
import org.core.result.ResultMap;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.system.Global;
import org.system.controller.iface.user.IFollowController;
import org.system.entity.user.Follow;
import org.system.message.Message;
import org.system.service.iface.user.IFollowService;

@Controller
public class FollowController implements IFollowController {
	Logger log = LoggerFactory.getLogger(FollowController.class);
	@Resource
	private IFollowService followService;

	@Override
	public Map<String, Object> insertFollow(Follow follow, BindingResult result) {
		// 检查数据是否重复
		Map<String, Object> followMap = followService.getFollowByFild(follow);
		if (followMap != null && followMap.size() > 0) {
			// 数据已存在 返回提示结束流程
			return ResultMap.convertMap(ResultCode.CODE_DATA_EXISTS, Message.bundle("data.exists"));
		}
		// 执行新增 判断状态
		if (followService.insertFollow(follow) > 0) {
			// 新增成功 返回提示结束流程
			return ResultMap.convertMap(ResultCode.CODE_SUCCESS, Message.bundle("insert.success"));
		} else {
			// 新增失败 返回提示结束流程
			return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("insert.fail"));
		}
	}

	@Override
	public Map<String, Object> updateFollow(Integer followId, Follow follow, BindingResult result) {
		// 设置主键
		follow.setId(followId);
		// 检查数据是否重复
		Map<String, Object> followMap = followService.getFollowByFild(follow);
		if (followMap != null && followMap.size() > 0) {
			// 数据已存在 返回提示结束流程
			return ResultMap.convertMap(ResultCode.CODE_DATA_EXISTS, Message.bundle("data.exists"));
		}
		// 执行修改 判断状态
		if (followService.updateFollow(follow) > 0) {
			// 修改成功 返回提示结束流程
			return ResultMap.convertMap(ResultCode.CODE_SUCCESS, Message.bundle("update.success"));
		} else {
			// 修改失败 返回提示结束流程
			return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("update.fail"));
		}
	}

	@Override
	public Map<String, Object> getFollowList(Follow follow,BindingResult result) {
		//定义返回对象
		Map<String, Object> resultMap = new HashMap<>();
		//得到返回数据
		List<Map<String, Object>> dataList = followService.getFollowList(follow);
		if (dataList != null && dataList.size() > 0) {
			//得到数据总数
			resultMap.put(Global.DATA_TOTAL, follow.getTotal());
			resultMap.put(Global.DATA_ROWS, dataList);
			return ResultMap.convertMap(ResultCode.CODE_SUCCESS, resultMap, Message.bundle("query.success"));
		}
		return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("query.empty"));
	}

	@Override
	public Map<String, Object> getFollowDetail(Integer followId, Follow follow) {
		// 设置主键
		follow.setId(followId);
		// 查询详情
		Map<String, Object> resultMap = followService.getFollowDetail(follow);
		if (resultMap != null && resultMap.size() > 0) {
			return ResultMap.convertMap(ResultCode.CODE_SUCCESS, resultMap, Message.bundle("query.success"));
		}
		return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("query.empty"));
	}
}
