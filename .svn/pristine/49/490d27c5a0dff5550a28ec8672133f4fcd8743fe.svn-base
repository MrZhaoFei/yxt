package org.system.controller.iface.contract;

import java.util.Map;

import javax.servlet.http.HttpSession;

import org.core.annotation.RequiresPermissions;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.BindingResult;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.system.entity.contract.Contract;
import org.system.entity.contract.Contract.offlineContract;
import org.system.entity.contract.Contract.updateContractByRenew;
import org.utils.spring.Groups;
import org.system.entity.contract.ContractFeedback;

/**
 * @ClassName: IContractController
 * @Description: 签约
 * @author: LiuGangQiang
 * @date: 2016年5月16日 上午10:41:02
 */
@RequestMapping()
public interface IContractController {

	/**
	 * @Title: insertContract
	 * @Description: 用户新增签约
	 * @param contract
	 * @param result
	 * @param token
	 * @return Map<String,Object>
	 */
	@RequestMapping(value = "/user/contract", method = RequestMethod.POST)
	@ResponseBody
	@RequiresPermissions("contract:insert")
	public Map<String, Object> insertContract(@Validated({ Groups.Insert.class }) Contract contract,
			BindingResult result, @RequestHeader(value = "token", required = false) String token);

	/**
	 * @Title: sureContract
	 * @Description: 确认签约
	 * @param contractId
	 * @param contract
	 * @param result
	 * @return Map<String,Object>
	 */
	@RequestMapping(value = "/user/contract/sure/{contractId}", method = RequestMethod.PUT)
	@ResponseBody
	@RequiresPermissions("contract:sure")
	public Map<String, Object> sureContract(@PathVariable("contractId") Integer contractId,
			@Validated({ Groups.Update.class }) Contract contract, BindingResult result);

	/**
	 * @Title: refusedContract
	 * @Description: 拒绝签约
	 * @param contractId
	 * @param contractFeedback
	 * @param result
	 * @param token
	 * @return Map<String,Object>
	 */
	@RequestMapping(value = "/user/contract/refused/{contractId}", method = RequestMethod.PUT)
	@ResponseBody
	@RequiresPermissions("contract:refused")
	@Transactional
	public Map<String, Object> refusedContract(@PathVariable("contractId") Integer contractId,
			@Validated({ Groups.Insert.class }) ContractFeedback contractFeedback, BindingResult result,
			@RequestHeader(value = "token", required = false) String token);

	/**
	 * @Title: getContractList
	 * @Description: 签约列表
	 * @param contract
	 * @param result
	 * @param session
	 * @return Map<String,Object>
	 */
	@RequestMapping(value = "/user/contracts", method = RequestMethod.GET)
	@ResponseBody
	@RequiresPermissions("contract:list")
	public Map<String, Object> getContractList(@Validated({ Groups.Select.class }) Contract contract,
			BindingResult result, HttpSession session);

	/**
	 * @Title: getContractListBySession
	 * @Description: 用户获取自己的签约信息
	 * @param contract
	 * @param result
	 * @param token
	 * @return Map<String,Object>
	 */
	@RequestMapping(value = "/user/userContracts", method = RequestMethod.GET)
	@ResponseBody
	@RequiresPermissions("userContracts:list")
	public Map<String, Object> getContractListBySession(Contract contract, BindingResult result,
			@RequestHeader(value = "token", required = false) String token);

	/**
	 * @Title: getContractDetail
	 * @Description: 查询签约详情
	 * @param contractId
	 * @param contract
	 * @return Map<String,Object>
	 */
	@RequestMapping(value = "/user/contract/{contractId}", method = RequestMethod.GET)
	@ResponseBody
	@RequiresPermissions("contract:detail")
	public Map<String, Object> getContractDetail(@PathVariable("contractId") Integer contractId, Contract contract);

	/**
	 * @Title: getContractListByDoctor
	 * @Description: 查询医生的签约用户
	 * @param contract
	 * @param result
	 * @param token
	 * @return Map<String,Object>
	 */
	@RequestMapping(value = "/user/contractsByDoctor", method = RequestMethod.GET)
	@ResponseBody
	@RequiresPermissions("contractByDoctor:list")
	public Map<String, Object> getContractListByDoctor(@Validated({ Groups.Other.class }) Contract contract,
			BindingResult result, @RequestHeader(value = "token", required = false) String token);

	/**
	 * @Title: updateContractByUser
	 * @Description: 用户修改签约信息
	 * @param contractId
	 * @param contract
	 * @param result
	 * @param token
	 * @return Map<String,Object>
	 */
	@RequestMapping(value = "/user/contract/{contractId}", method = RequestMethod.PUT)
	@ResponseBody
	public Map<String, Object> updateContractByUser(@PathVariable("contractId") Integer contractId, Contract contract,
			BindingResult result, @RequestHeader(value = "token", required = false) String token);

	/**
	 * @Title: getContractAgreement
	 * @Description: 得到签约协议模板及内容
	 * @param contractId
	 * @param contract
	 * @param result
	 * @param token
	 * @return Map<String,Object>
	 */
	@RequestMapping(value = "/doctor/contract/agreement/{contractId}", method = RequestMethod.GET)
	@ResponseBody
	public Map<String, Object> getContractAgreement(@PathVariable("contractId") Integer contractId, Contract contract,
			BindingResult result, @RequestHeader(value = "token", required = false) String token);

	/**
	 * 线下签约
	 * 
	 * @param contract
	 * @param result
	 * @param token
	 * @return
	 */
	@RequestMapping(value = "/doctor/offlineContract", method = RequestMethod.POST)
	@ResponseBody
	public Map<String, Object> insertOfflineContract(@Validated({ offlineContract.class }) Contract contract,
			BindingResult result, @RequestHeader(value = "token", required = false) String token);

	/**
	 * 续约
	 * 
	 * @param contractId
	 * @param contract
	 * @param result
	 * @param token
	 * @return
	 */
	@RequestMapping(value = "/doctor/renewContract/{contractId}", method = RequestMethod.PUT)
	@ResponseBody
	public Map<String, Object> updateContractByRenew(@PathVariable("contractId") Integer contractId,
			@Validated({ updateContractByRenew.class }) Contract contract, BindingResult result,
			@RequestHeader(value = "token", required = false) String token);

}