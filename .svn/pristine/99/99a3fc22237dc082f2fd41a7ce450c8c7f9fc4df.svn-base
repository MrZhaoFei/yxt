package org.system.controller.impl.sms;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.core.result.ResultCode;
import org.core.result.ResultMap;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.system.Global;
import org.system.controller.iface.sms.ISmsSendTaskController;
import org.system.entity.sms.SmsSendTask;
import org.system.entity.user.User;
import org.system.message.Message;
import org.system.service.iface.sms.ISmsSendTaskService;
import org.system.service.iface.user.IUserService;

import net.sf.ehcache.CacheManager;
import net.sf.ehcache.Element;

@Controller
public class SmsSendTaskController implements ISmsSendTaskController {
	Logger log = LoggerFactory.getLogger(SmsSendTaskController.class);
	@Resource
	private CacheManager cache;
	@Resource
	private ISmsSendTaskService smsSendTaskService;
	@Resource
	private IUserService userService;

	@Override
	public Map<String, Object> getSmsSendTaskList(SmsSendTask sms, BindingResult result, String token) {
		// 缓存中获取医生数据
		Element element = cache.getCache(Global.CACHE_DOCTOR).get(token);
		if (element != null) {
			@SuppressWarnings("unchecked")
			Map<String, Object> doctorMap = (Map<String, Object>) element.getObjectValue();
			sms.setFromDoctorId((Integer) doctorMap.get("id"));
			sms.setSmsType(2);
			// 定义返回对象
			Map<String, Object> resultMap = new HashMap<>();
			// 得到返回数据
			List<Map<String, Object>> dataList = smsSendTaskService.getSmsList(sms);
			if (dataList != null && dataList.size() > 0) {
				// 得到数据总数
				resultMap.put(Global.DATA_TOTAL, sms.getTotal());
				resultMap.put(Global.DATA_ROWS, dataList);
				return ResultMap.convertMap(ResultCode.CODE_SUCCESS, resultMap, Message.bundle("query.success"));
			}
			return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("query.empty"));
		} else {
			// 定义返回对象
			Map<String, Object> resultMap = new HashMap<>();
			// 得到返回数据
			List<Map<String, Object>> dataList = smsSendTaskService.getSmsList(sms);
			if (dataList != null && dataList.size() > 0) {
				// 得到数据总数
				resultMap.put(Global.DATA_TOTAL, sms.getTotal());
				resultMap.put(Global.DATA_ROWS, dataList);
				return ResultMap.convertMap(ResultCode.CODE_SUCCESS, resultMap, Message.bundle("query.success"));
			}
			return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("query.empty"));
		}

	}

	@Override
	public Map<String, Object> insertSmsSendTask(SmsSendTask sms, BindingResult result, String token) {
		// 缓存中获取医生数据
		Element element = cache.getCache(Global.CACHE_DOCTOR).get(token);
		if (element != null) {
			@SuppressWarnings("unchecked")
			Map<String, Object> doctorMap = (Map<String, Object>) element.getObjectValue();

			User u = new User();
			u.setId(sms.getToUserId());
			Map<String, Object> userMap = userService.getUserDetail(u);
			if (userMap == null || userMap.size() <= 0) {
				return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("user.empty"));
			}
			sms.setFromDoctorId((Integer) doctorMap.get("id"));
			sms.setFrom((String) doctorMap.get("name"));
			sms.setTo((String) userMap.get("phone"));
			sms.setCreateTime(new Date());
			sms.setSmsType(2);
			if (smsSendTaskService.insertSms(sms) > 0) {
				// 新增成功 返回提示结束流程
				return ResultMap.convertMap(ResultCode.CODE_SUCCESS, Message.bundle("insert.success"));
			} else {
				// 新增失败 返回提示结束流程
				return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("insert.fail"));
			}

		} else {
			return ResultMap.convertMap(ResultCode.CODE_NO_LOGIN, Message.bundle("permission.no.login"));
		}
	}

	@Override
	public Map<String, Object> updateSmsSendTask(Long smsId, SmsSendTask sms, BindingResult result, String token) {
		sms.setId(smsId);
		// 缓存中获取用户数据
		Element element = cache.getCache(Global.CACHE_DOCTOR).get(token);
		if (element != null) {
			if (smsSendTaskService.updateSms(sms) > 0) {
				// 修改成功 返回提示结束流程
				return ResultMap.convertMap(ResultCode.CODE_SUCCESS, Message.bundle("update.success"));
			} else {
				// 修改失败 返回提示结束流程
				return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("update.fail"));
			}
		} else {
			return ResultMap.convertMap(ResultCode.CODE_NO_LOGIN, Message.bundle("permission.no.login"));
		}
	}

	@Override
	public Map<String, Object> deleteSmsSendTask(Long smsId, SmsSendTask sms, BindingResult result, String token) {
		sms.setId(smsId);
		// 缓存中获取用户数据
		Element element = cache.getCache(Global.CACHE_DOCTOR).get(token);
		if (element != null) {
			// 执行删除
			if (smsSendTaskService.deleteSms(sms) > 0) {
				// 删除成功 返回提示结束流程
				return ResultMap.convertMap(ResultCode.CODE_SUCCESS, Message.bundle("delete.success"));
			} else {
				// 删除失败 返回提示结束流程
				return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("delete.fail"));
			}

		} else {
			return ResultMap.convertMap(ResultCode.CODE_NO_LOGIN, Message.bundle("permission.no.login"));
		}
	}

	@Override
	public Map<String, Object> getSmsSendHistoryList(SmsSendTask sms, BindingResult result, String token) {
		// 缓存中获取医生数据
		Element element = cache.getCache(Global.CACHE_DOCTOR).get(token);
		if (element != null) {
			@SuppressWarnings("unchecked")
			Map<String, Object> doctorMap = (Map<String, Object>) element.getObjectValue();
			sms.setFromDoctorId((Integer) doctorMap.get("id"));
			// 定义返回对象
			Map<String, Object> resultMap = new HashMap<>();
			// 得到返回数据
			List<Map<String, Object>> dataList = smsSendTaskService.getSmsSendHistoryList(sms);
			if (dataList != null && dataList.size() > 0) {
				// 得到数据总数
				resultMap.put(Global.DATA_TOTAL, sms.getTotal());
				resultMap.put(Global.DATA_ROWS, dataList);
				return ResultMap.convertMap(ResultCode.CODE_SUCCESS, resultMap, Message.bundle("query.success"));
			}
			return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("query.empty"));
		} else {
			return ResultMap.convertMap(ResultCode.CODE_NO_LOGIN, Message.bundle("permission.no.login"));
		}
	}
}
