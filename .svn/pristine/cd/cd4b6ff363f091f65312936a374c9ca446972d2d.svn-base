package org.system.controller.impl.order;

import java.math.BigDecimal;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.core.result.ResultCode;
import org.core.result.ResultMap;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.BindingResult;
import org.store.wechat.WechatConfig;
import org.system.Global;
import org.system.controller.iface.order.IUserOrderController;
import org.system.entity.contract.Contract;
import org.system.entity.order.PayInfo;
import org.system.entity.order.PayType;
import org.system.entity.order.UserOrder;
import org.system.entity.service.ServicePack;
import org.system.entity.service.UserServicePack;
import org.system.entity.user.UserDetail;
import org.system.message.Message;
import org.system.service.iface.contract.IContractService;
import org.system.service.iface.order.IPackagePayInfoService;
import org.system.service.iface.order.IPackagePayTypeService;
import org.system.service.iface.order.IUserOrderService;
import org.system.service.iface.service.IGdNumberInfoService;
import org.system.service.iface.service.IServicePackService;
import org.system.service.iface.service.IUserServicePackService;
import org.system.service.iface.user.IUserDetailService;
import org.utils.calc.DateUtils;
import org.utils.spring.RESTClient;

import net.sf.ehcache.CacheManager;
import net.sf.ehcache.Element;

@Controller
public class UserOrderController implements IUserOrderController {
	Logger log = LoggerFactory.getLogger(UserOrderController.class);
	@Resource
	private IUserOrderService userOrderService;
	@Resource
	private IServicePackService servicePackService;
	@Resource
	private IUserServicePackService userServicePackService;
	@Resource
	private CacheManager cache;
	@Resource
	private IContractService contractService;
	@Resource
	private IPackagePayInfoService packagePayInfoService;
	@Resource
	private IPackagePayTypeService packagePayTypeService;
	@Resource
	private IUserDetailService userDetailService;
	@Resource
	private IGdNumberInfoService gdNumberInfoService;

	@Override
	public Map<String, Object> insertUserOrder(UserOrder userOrder, BindingResult result, String token) {
		/* 缓存中获取用户数据 */
		Element element = cache.getCache(Global.CACHE_USER).get(token);
		if (element != null) {
			@SuppressWarnings("unchecked")
			Map<String, Object> userMap = (Map<String, Object>) element.getObjectValue();
			/* 设置用户ID */
			userOrder.setUserId((Integer) userMap.get("id"));
			userOrder.setOrderType(0);
			/* 检查服务包是否存在 */
			ServicePack servicePack = new ServicePack();
			servicePack.setId(userOrder.getServicePackId());
			servicePack.setUserId((Integer) userMap.get("id"));
			Map<String, Object> servicePackMap = servicePackService.getServicePackDetail(servicePack);
			if (servicePackMap == null || servicePackMap.size() <= 0) {
				return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("servicePack.empty"));
			}
			/* 判断用户购买的包的类型 */

			/* 设置包类型ID */
			userOrder.setPackageTypeId((Integer) servicePackMap.get("packageTypeId"));
			/* 如果类型为基共卫 */
			if ((int) servicePackMap.get("packageTypeId") == 1) {
				return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("servicePack.not.buy"));
			}
			/* 如果类型为基本网格服务包 */
			else if ((int) servicePackMap.get("packageTypeId") == 4) {
				/* 判断用户基础网格服务包是否过期 */
				UserServicePack usp = new UserServicePack();
				/* 设置用户ID */
				usp.setUserId(userOrder.getUserId());
				ServicePack sp = new ServicePack();
				/* 设置包类型为4 */
				sp.setPackageTypeId(4);
				usp.setServicePack(sp);
				List<Map<String, Object>> userServicepackList = userServicePackService
						.getNoExpireUserServicePackList(usp);
				if (userServicepackList != null && userServicepackList.size() > 0) {
					return ResultMap.convertMap(ResultCode.CODE_DATA_EXISTS, Message.bundle("servicePack.exists"));
				}
			}
			/* 根据用户查询签约的机构 */
			Contract contract = new Contract();
			contract.setUserId(userOrder.getUserId());
			Map<String, Object> contractMap = contractService.getContractByFild(contract);
			if (contractMap != null && contractMap.size() > 0) {
				userOrder.setHospitalId((Integer) contractMap.get("hospitalId"));
			} else {
				return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("contract.empty"));
			}
			// 设置订单信息
			userOrder.setPrice((BigDecimal) servicePackMap.get("price"));
			userOrder.setOrderNum(gdNumberInfoService.getOrderNumber());
			userOrder.setCreateTime(new Date());
			userOrder.setState(Global.ORDER_START);
			// 执行新增 判断状态
			if (userOrderService.insertUserOrder(userOrder) > 0) {
				// 新增成功 返回提示结束流程
				return ResultMap.convertMap(ResultCode.CODE_SUCCESS, userOrder, Message.bundle("insert.success"));
			} else {
				// 新增失败 返回提示结束流程
				return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("insert.fail"));
			}
		} else {
			return ResultMap.convertMap(ResultCode.CODE_NO_LOGIN, Message.bundle("permission.no.login"));
		}
	}

	@Override
	@Transactional
	public synchronized Map<String, Object> sureUserOrder(String orderNo, UserOrder userOrder, BindingResult result,
			String token) {
		// 缓存中获取用户数据
		/*
		 * Element element = cache.getCache(Global.CACHE_USER).get(token); if
		 * (element != null) {
		 * 
		 * @SuppressWarnings("unchecked") Map<String, Object> userMap =
		 * (Map<String, Object>) element.getObjectValue();
		 * userOrder.setUserId((Integer) userMap.get("id"));
		 */
		// 设置主键
		userOrder.setOrderNum(orderNo);
		// 查询订单信息
		Map<String, Object> orderMap = userOrderService.getUserOrderDetail(userOrder);
		if (orderMap != null && orderMap.size() > 0) {
			if (Global.ORDER_START != (int) orderMap.get("state")) {
				return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("userOrder.state.error"));
			}
			/* 判断订单对应的服务包类型 */
			/* 基本公共卫生服务包 */
			if ((int) orderMap.get("packageTypeId") == 1) {
				/* 不能购买直接返回 */
				return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("servicePack.not.buy"));
			}
			/* 网格服务包 */
			else if ((int) orderMap.get("packageTypeId") == 4) {
				/* 判断用户基础网格服务包是否过期 */
				UserServicePack usp = new UserServicePack();
				/* 设置用户ID */
				usp.setUserId((Integer) orderMap.get("userId"));
				ServicePack sp = new ServicePack();
				/* 设置包类型为4 */
				sp.setPackageTypeId(4);
				usp.setServicePack(sp);
				List<Map<String, Object>> userServicepackList = userServicePackService.getNoExpireUserServicePackList(usp);
				if (userServicepackList != null && userServicepackList.size() > 0) {
					/* 网格服务包已存在则默认状态修改状态为已取消 */
			/*		userOrder.setState(Global.ORDER_CANCEL);
					if (userOrderService.updateUserOrder(userOrder) >0) {
						return ResultMap.convertMap(ResultCode.CODE_DATA_EXISTS, Message.bundle("servicePack.exists"));
					} else {
						throw new RuntimeException();
					}*/
					return ResultMap.convertMap(ResultCode.CODE_DATA_EXISTS, Message.bundle("servicePack.exists"));
				}
				/* 购买成功修改用户为会员 */
				UserDetail userDetail = new UserDetail();
				userDetail.setUserId((Integer) orderMap.get("userId"));
				userDetail.setMember(true);
				if (userDetailService.updateUserDetail(userDetail) <= 0) {
					throw new RuntimeException();
				}
			}
			userOrder.setState(Global.ORDER_SURE);
			// 执行修改 判断状态
			if (userOrderService.updateUserOrder(userOrder) > 0) {
				if((int) orderMap.get("packageTypeId") == 4){
					/*购买成功 修改所有网格服务包订单为已取消*/
					userOrderService.updateUserOrderForType(orderMap);	
				}
				UserServicePack userServicePack = new UserServicePack();
				userServicePack.setCreateTime(new Date());
				userServicePack.setUserId((Integer) orderMap.get("userId"));
				userServicePack.setExpireTime(DateUtils.dateAfter(new Date(), (int) orderMap.get("acquisitive"), Calendar.MONTH));
				userServicePack.setServicePackId((Integer) orderMap.get("servicePackId"));
				userServicePack.setPrice(userOrder.getPrice());
				userServicePack.setState(Global.SERVICE_PACK_USE);

				// 修改成功 新增用户服务包
				if (userServicePackService.insertUserServicePack(userServicePack) > 0) {
					// 设置支付信息
					PayInfo payinfo = new PayInfo();
					payinfo.setOrderNum(userOrder.getOrderNum());
					payinfo.setPayTypeId(userOrder.getPayTypeId());
					payinfo.setPayAmount(userOrder.getPrice());

					PayType payType = new PayType();
					payType.setId(payinfo.getPayTypeId());
					// 检查支付类型数据是否存在
					Map<String, Object> payTypeMap = packagePayTypeService.getPayTypeDetail(payType);
					if (payTypeMap == null || payTypeMap.size() <= 0) {
						return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("payType.empty"));
					} else {
						// 添加支付信息
						if (packagePayInfoService.insertPayinfo(payinfo) > 0) {
							/* 推送消息至微信 */
							Map<String, Object> param = new HashMap<>();
							// 设置订单号
							param.put("orderId", orderNo);
							// 设置服务名
							param.put("serviceName", orderMap.get("packageName"));
							// 设置微信openId
							param.put("openId", orderMap.get("wechatId"));
							// 设置商品ID
							param.put("goodsId", orderMap.get("servicePackId"));

							RESTClient.post(WechatConfig.getServer(), Global.WECHAT_SERVICE_PACE_BUYSUCCESS, param);
							return ResultMap.convertMap(ResultCode.CODE_SUCCESS, Message.bundle("insert.success"));
						} else {
							throw new RuntimeException();
						}
					}
				} else {
					throw new RuntimeException();
				}
			} else {
				// 修改失败 返回提示结束流程
				return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("update.fail"));
			}
		} else {
			return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("userOrder.empty"));
		}
		/*
		 * } else { return ResultMap.convertMap(ResultCode.CODE_NO_LOGIN,
		 * Message.bundle("permission.no.login")); }
		 */
	}

	@Override
	public Map<String, Object> getUserOrderList(UserOrder userOrder, BindingResult result, String token) {
		// 缓存中获取用户数据
		Element element = cache.getCache(Global.CACHE_USER).get(token);
		if (element != null) {
			@SuppressWarnings("unchecked")
			Map<String, Object> userMap = (Map<String, Object>) element.getObjectValue();
			userOrder.setUserId((Integer) userMap.get("id"));
			Map<String, Object> resultMap = new HashMap<>();
			List<Map<String, Object>> orderList = userOrderService.getUserOrderList(userOrder);
			if (orderList != null && orderList.size() > 0) {
				resultMap.put(Global.DATA_TOTAL, userOrder.getTotal());
				resultMap.put(Global.DATA_ROWS, orderList);
				return ResultMap.convertMap(ResultCode.CODE_SUCCESS, resultMap, Message.bundle("query.success"));
			}
			return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("query.empty"));
		} else {
			return ResultMap.convertMap(ResultCode.CODE_NO_LOGIN, Message.bundle("permission.no.login"));
		}
	}

	@Override
	public Map<String, Object> getUserOrderDetail(Integer userOrderId, UserOrder userOrder, String token) {
		// 缓存中获取用户数据
		Element element = cache.getCache(Global.CACHE_USER).get(token);
		if (element != null) {
			@SuppressWarnings("unchecked")
			Map<String, Object> userMap = (Map<String, Object>) element.getObjectValue();
			userOrder.setUserId((Integer) userMap.get("id"));
			userOrder.setId(userOrderId);
			Map<String, Object> orderMap = userOrderService.getUserOrderDetail(userOrder);
			if (orderMap != null && orderMap.size() > 0) {
				return ResultMap.convertMap(ResultCode.CODE_SUCCESS, orderMap, Message.bundle("query.success"));
			}
			return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("query.empty"));
		} else {
			return ResultMap.convertMap(ResultCode.CODE_NO_LOGIN, Message.bundle("permission.no.login"));
		}
	}

	@Override
	public Map<String, Object> getUserOrderListByDoctor(UserOrder userOrder, BindingResult result, String token) {
		// 缓存中获取用户数据
		Element element = cache.getCache(Global.CACHE_DOCTOR).get(token);
		if (element != null) {
			Map<String, Object> resultMap = new HashMap<>();
			List<Map<String, Object>> orderList = userOrderService.getUserOrderList(userOrder);
			if (orderList != null && orderList.size() > 0) {
				resultMap.put(Global.DATA_TOTAL, userOrder.getTotal());
				resultMap.put(Global.DATA_ROWS, orderList);
				return ResultMap.convertMap(ResultCode.CODE_SUCCESS, resultMap, Message.bundle("query.success"));
			}
			return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("query.empty"));
		} else {
			return ResultMap.convertMap(ResultCode.CODE_NO_LOGIN, Message.bundle("permission.no.login"));
		}
	}

	@Override
	public Map<String, Object> getUserOrderDetailByDoctor(Integer userOrderId, UserOrder userOrder, String token) {
		// 设置ID
		userOrder.setId(userOrderId);
		// 缓存中获取用户数据
		Element element = cache.getCache(Global.CACHE_DOCTOR).get(token);
		if (element != null) {
			Map<String, Object> orderMap = userOrderService.getUserOrderDetail(userOrder);
			if (orderMap != null && orderMap.size() > 0) {
				return ResultMap.convertMap(ResultCode.CODE_SUCCESS, orderMap, Message.bundle("query.success"));
			}
			return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("query.empty"));
		} else {
			return ResultMap.convertMap(ResultCode.CODE_NO_LOGIN, Message.bundle("permission.no.login"));
		}
	}
}
