var aCity={11:"北京",12:"天津",13:"河北",14:"山西",15:"内蒙古",21:"辽宁",22:"吉林",23:"黑龙江",31:"上海",32:"江苏",33:"浙江",34:"安徽",35:"福建",36:"江西",37:"山东",41:"河南",42:"湖北",43:"湖南",44:"广东",45:"广西",46:"海南",50:"重庆",51:"四川",52:"贵州",53:"云南",54:"西藏",61:"陕西",62:"甘肃",63:"青海",64:"宁夏",65:"新疆",71:"台湾",81:"香港",82:"澳门",91:"国外"}  
function isCardID(sId){   
	var iSum=0  
	var info=""  
		if(!/^\d{17}(\d|x)$/i.test(sId)) 
			return "你输入的身份证长度或格式错误";   sId=sId.replace(/x$/i,"a");  
			if(aCity[parseInt(sId.substr(0,2))]==null) return "你的身份证地区非法";  
			sBirthday=sId.substr(6,4)+"-"+Number(sId.substr(10,2))+"-"+Number(sId.substr(12,2));  
			var d=new Date(sBirthday.replace(/-/g,"/"))   
			if(sBirthday!=(d.getFullYear()+"-"+ (d.getMonth()+1) + "-" + d.getDate()))return "身份证上的出生日期非法";  
			for(var i = 17;i>=0;i --) iSum += (Math.pow(2,i) % 11) * parseInt(sId.charAt(17 - i),11)  
			if(iSum%11!=1) return "你输入的身份证号非法";   return true;//aCity[parseInt(sId.substr(0,2))]+","+sBirthday+","+(sId.substr(16,1)%2?"男":"女")  }  
}
$.extend($.fn.validatebox.defaults.rules, {
	  phoneRex: {
		    validator: function(value){
		    	 var mobile = /^1[3|5|7|8]\d{9}$/ , phone = /^0\d{2,3}-?\d{7,8}$/;
		    	  return mobile.test(value) || phone.test(value);		  
		    },
		    message: '请输入正确的电话号码格式'
		  },
	equalLength : {
		validator : function(value,param) {
			return value.length==param[0];
		},
		message : '长度不对'
	},
	zipCodeRex : {
		validator : function(value) {
			var rex = /^[1-9][0-9]{5}$/;
			if (rex.test(value)) {
				return true;
			} else {
				return false;
			}
		},
		message : '邮编格式有误'
	},
	zoneRex : {
		validator : function(value) {
			var rex = /(0[1-9]{2,3})/;
			if (rex.test(value)) {
				return true;
			} else {
				return false;
			}
		},
		message : '电话区号有误'
	},
	text : {
		validator : function(value) {
			return isNaN(value);
		},
		message : '请输入文本内容！'
	},

	idCard : {// 验证身份证
		validator: function(value,param){       
			var flag= isCardID(value);           
			return flag==true?true:false;       
			},           
			message: '不是有效的身份证号码'
		
	},
	checkPsd:{//验证密码是否含有空格以及特殊字符
		validator : function(value) {
			var containSpecial = RegExp(/[(\ )(\~)(\!)(\@)(\#)(\$)(\%)(\^)(\&)(\*)(\()(\))(\-)(\_)(\+)(\=)(\[)(\])(\{)(\})(\|)(\\)(\;)(\:)(\')(\")(\,)(\.)(\/)(\<)(\>)(\?)(\)]+/);
		    var result = !containSpecial.test(value) ;
			return result;   
		},
		message : '密码不能含有特殊字符及空格！'
	},
	calenderTo : {
		validator : function(value) {
			var dateFrom = $('#seach_dateFrom').datebox('getValue');
			if (dateFrom != null && dateFrom != "") {
				if (value < dateFrom) {
					return false;
				}
				return true;
			}
			return true;
		},
		message : '结束时间应该大于开始时间！'
	},
	calenderFrom : {
		validator : function(value) {
			var dateTo = $('#seach_dateTo').datebox('getValue');
			if (dateTo != null && dateTo != "") {
				if (value > dateTo) {
					return false;
				}
				return true;
			}
			return true;
		},
		message : '开始时间应该小于结束时间！'
	},
	comperTime:{
		validator:function(value){
			var dB = new Date(value.replace(/-/g, "/"));
			if(new Date()>Date.parse(dB)){
				return true;
			}
			return false;
		},
		message : '出生日期小于当前时间'
	},
	 //密码，确认密码是否匹配
    pwdMatch: {
      validator: function(value) {
        var matchValue = $("#pwd").textbox('getValue');
        if (value == matchValue) {
          return true;
        } else {
          return false;
        }
      },
      message: "‘密码’和‘确认密码’不一致！"
    },
	
	// 网址格式
	checkUrl :{
		validator:function(value){
			 var RegUrl = new RegExp();
			    RegUrl.compile("^[A-Za-z]+://[A-Za-z0-9-_]+\\.[A-Za-z0-9-_%&\?\/.=]+$");
			    if (!RegUrl.test(value)) {
			        return false;
			    }
			    return true;
		},
		message:"机构主页格式不正确！"
	}
	
	
	
	

});