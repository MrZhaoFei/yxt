package org.system.controller.impl.user;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.core.result.ResultCode;
import org.core.result.ResultMap;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.store.file.StoreFactory;
import org.store.his.HisFactory;
import org.store.phone.PhoneFactory;
import org.system.Global;
import org.system.controller.iface.user.IUserController;
import org.system.entity.user.SysUserLogs;
import org.system.entity.user.User;
import org.system.message.Message;
import org.system.service.iface.user.ISysUserLogsService;
import org.system.service.iface.user.IUserService;

import net.sf.ehcache.CacheManager;
import net.sf.ehcache.Element;

@Controller
public class UserController implements IUserController {
	Logger log = LoggerFactory.getLogger(UserController.class);
	@Resource
	private IUserService userService;
	@Resource
	private ISysUserLogsService sysUserLogsService;

	@Resource
	private CacheManager cache;

	@Override
	public Map<String, Object> login(User user, BindingResult result, HttpSession session, HttpServletRequest request)
			throws Exception {
		// 根据微信号查询个人信息
		Map<String, Object> userMap = userService.getUserByWechatId(user);
		if (userMap != null && userMap.size() > 0) {
			userMap.put("token", session.getId());
			// 登录成功存入缓存
			cache.getCache(Global.CACHE_USER).put(new Element(session.getId(), userMap));
			// 登录成功 进行日志记录
			SysUserLogs sysUserLogs = new SysUserLogs();
			sysUserLogs.setUserId((int) userMap.get("id"));
			sysUserLogs.setIp(user.getIp());
			sysUserLogs.setLogLevel(1);
			sysUserLogs.setLogContent(Message.bundle("user.log.login.success", user.getWechatId()));
			sysUserLogs.setCreateTime(new Date());
			if (sysUserLogsService.insertSysUserLogs(sysUserLogs) > 0) {
				// 存入缓存
				return ResultMap.convertMap(ResultCode.CODE_SUCCESS, userMap, Message.bundle("user.login.success"));
			}

		}
		return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("user.wechat.login.error"));
	}

	@Override
	public synchronized Map<String, Object> insertUser(String validCode, User user, BindingResult result) {
		Element element = cache.getCache(Global.CACHE_CODE).get(user.getPhone());
		if (element == null) {
			return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("valid.code.empty"));
		} else {
			// 比较验证码
			if (!validCode.equalsIgnoreCase(element.getObjectValue().toString())) {
				return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("valid.code.error"));
			}
		}
		// 查询手机号是否已注册
		User param = new User();
		param.setPhone(user.getPhone());
		List<Map<String, Object>> userList = userService.getUserByFiled(param);
		if (userList != null && userList.size() > 0) {
			return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("user.insert.phone.exists"));
		}
		// 查询微信号是否已经被绑定
		param = new User();
		param.setWechatId(user.getWechatId());
		Map<String, Object> userMapForWechat = userService.checkUserExists(param);
		if (userMapForWechat != null && userMapForWechat.size() > 0) {
			// 微信已被绑定
			return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("user.wechat.bind.wechat.already"));
		}
		// 设置来源信息和时间
		user.setRegisterDate(new Date());
		user.setRegisterSourceId(1);
		if (userService.insertUser(user) > 0) {
			// 正确移除验证码
			cache.getCache(Global.CACHE_CODE).remove(user.getPhone());
			return ResultMap.convertMap(ResultCode.CODE_SUCCESS, Message.bundle("insert.success"));
		}
		return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("insert.fail"));
	}

	@Override
	public synchronized Map<String, Object> bingUser(String validCode, User user, BindingResult result) {
		Element element = cache.getCache(Global.CACHE_CODE).get(user.getPhone());
		if (element == null) {
			return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("valid.code.empty"));
		} else {
			// 比较验证码
			if (!validCode.equalsIgnoreCase(element.getObjectValue().toString())) {
				return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("valid.code.error"));
			} else {
				cache.getCache(Global.CACHE_CODE).remove(user.getPhone());
				// 查询用户是否存在
				User param = new User();
				param.setPhone(user.getPhone());
				Map<String, Object> userMapForPhone = userService.checkUserExists(param);
				if (userMapForPhone != null && userMapForPhone.size() > 0) {
					param = new User();
					param.setWechatId(user.getWechatId());
					// 用户存在 查询微信是否已被绑定
					Map<String, Object> userMapForWechat = userService.checkUserExists(param);
					if (userMapForWechat != null && userMapForWechat.size() > 0) {
						// 微信已被绑定
						return ResultMap.convertMap(ResultCode.CODE_FAIL,
								Message.bundle("user.wechat.bind.wechat.already"));
					} else {
						// 符合条件绑定
						if (userService.updateUserWechat(user) > 0) {
							return ResultMap.convertMap(ResultCode.CODE_SUCCESS,
									Message.bundle("user.wechat.bind.success"));
						} else {
							return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("user.wechat.bind.error"));
						}
					}
				} else {
					return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("user.wechat.bind.user.empty"));
				}
			}
		}
	}

	@Override
	public Map<String, Object> unbingUser(String validCode, User user, BindingResult result) {
		Element element = cache.getCache(Global.CACHE_CODE).get(user.getPhone());
		if (element == null) {
			return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("valid.code.empty"));
		} else {
			// 比较验证码
			if (!validCode.equalsIgnoreCase(element.getObjectValue().toString())) {
				return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("valid.code.error"));
			} else {
				// 正确移除验证码
				cache.getCache(Global.CACHE_CODE).remove(user.getPhone());
				List<Map<String, Object>> userList = userService.getUserByFiled(user);
				if (userList != null && userList.size() > 0) {
					if (userService.updateUserWechatUnBind(user) > 0) {
						return ResultMap.convertMap(ResultCode.CODE_SUCCESS,
								Message.bundle("user.wechat.unbind.success"));
					} else {
						return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("user.wechat.unbind.error"));
					}
				} else {
					return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("user.wechat.unbind.user.empty"));
				}

			}
		}
	}

	@Override
	public Map<String, Object> getUserByDetailFiled(User user, BindingResult result) {
		Map<String, Object> userMap = userService.getUserByDetailFiled(user);
		if (userMap != null && userMap.size() > 0) {
			return ResultMap.convertMap(ResultCode.CODE_SUCCESS, userMap, Message.bundle("query.success"));
		}
		return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("query.empty"));
	}

	@Override
	public Map<String, Object> updateUser(User user, BindingResult result, String token) {
		// 缓存中获取用户数据
		Element element = cache.getCache(Global.CACHE_USER).get(token);
		if (element != null) {
			@SuppressWarnings("unchecked")
			Map<String, Object> userMap = (Map<String, Object>) element.getObjectValue();
			user.setId((Integer) userMap.get("id"));
			// 执行修改 判断状态
			if (userService.updateUser(user) > 0) {
				// 修改成功 返回提示结束流程
				return ResultMap.convertMap(ResultCode.CODE_SUCCESS, Message.bundle("update.success"));
			} else {
				// 修改失败 返回提示结束流程
				return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("update.fail"));
			}
		} else {
			return ResultMap.convertMap(ResultCode.CODE_NO_LOGIN, Message.bundle("permission.no.login"));
		}

	}

	@Override
	public Map<String, Object> getStoreToken(String token, String chooseStr) {
		Element element = cache.getCache(Global.CACHE_USER).get(token);
		if (element != null) {
			Map<String, Map<String, Object>> resultMap = new HashMap<String, Map<String, Object>>();
			if ("file".equals(chooseStr)) {
				resultMap.put("file", StoreFactory.getInstance().getPermissionToken(Global.STORE_ACQUISITIVE));
			} else if ("phone".equals(chooseStr)) {
				resultMap.put("phone", PhoneFactory.getInstance().getPermissionToken(Global.PHONE_ACQUISITIVE));
			} else if ("his".equals(chooseStr)) {
				resultMap.put("his", HisFactory.getInstance().getPermissionToken(Global.HIS_ACQUISITIVE));
			} else if ("all".equals(chooseStr)) {
				resultMap.put("file", StoreFactory.getInstance().getPermissionToken(Global.STORE_ACQUISITIVE));
				resultMap.put("phone", PhoneFactory.getInstance().getPermissionToken(Global.PHONE_ACQUISITIVE));
				resultMap.put("his", HisFactory.getInstance().getPermissionToken(Global.HIS_ACQUISITIVE));
			}
			return ResultMap.convertMap(ResultCode.CODE_SUCCESS, resultMap, Message.bundle("query.success"));
		} else {
			return ResultMap.convertMap(ResultCode.CODE_NO_LOGIN, Message.bundle("permission.no.login"));
		}
	}

	@Override
	public Map<String, Object> getDocPassword(String token) {
		Element element = cache.getCache(Global.CACHE_USER).get(token);
		if (element != null) {
			@SuppressWarnings("unchecked")
			Map<String, Object> userMap = (Map<String, Object>) element.getObjectValue();
			// 设置用户ID
			User user = new User();
			user.setId((Integer) userMap.get("id"));
			Map<String, Object> userDetailMap = userService.getUserDetail(user);
			Map<String, Object> resultMap = new HashMap<>();
			if (userDetailMap.get("docPwd") != null) {
				resultMap.put("is", true);
			} else {
				resultMap.put("is", false);
			}
			return ResultMap.convertMap(ResultCode.CODE_SUCCESS, resultMap, Message.bundle("query.success"));
		} else {
			return ResultMap.convertMap(ResultCode.CODE_NO_LOGIN, Message.bundle("permission.no.login"));
		}
	}

	@Override
	public Map<String, Object> setDocPassword(String validCode, String token, User user, BindingResult result) {
		Element element = cache.getCache(Global.CACHE_USER).get(token);
		if (element != null) {
			Element codeElement = cache.getCache(Global.CACHE_CODE).get(token);
			if (codeElement == null) {
				return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("valid.code.empty"));
			} else {
				if (!validCode.equalsIgnoreCase(codeElement.getObjectValue().toString())) {
					return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("valid.code.error"));
				} else {
					// 移除验证码
					cache.getCache(Global.CACHE_CODE).remove(token);
				}
			}
			@SuppressWarnings("unchecked")
			Map<String, Object> userMap = (Map<String, Object>) element.getObjectValue();
			// 设置用户ID
			user.setId((Integer) userMap.get("id"));
			if (userService.updateUser(user) > 0) {
				return ResultMap.convertMap(ResultCode.CODE_SUCCESS, Message.bundle("update.success"));
			} else {
				return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("update.fail"));
			}
		} else {
			return ResultMap.convertMap(ResultCode.CODE_NO_LOGIN, Message.bundle("permission.no.login"));
		}
	}

	@Override
	public Map<String, Object> resetDocPassword(String validCode, String token, User user, BindingResult result) {
		Element element = cache.getCache(Global.CACHE_USER).get(token);
		if (element != null) {
			Element codeElement = cache.getCache(Global.CACHE_CODE).get(token);
			if (codeElement == null) {
				return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("valid.code.empty"));
			} else {
				if (!validCode.equalsIgnoreCase(codeElement.getObjectValue().toString())) {
					return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("valid.code.error"));
				} else {
					// 移除验证码
					cache.getCache(Global.CACHE_CODE).remove(token);
				}
			}
			@SuppressWarnings("unchecked")
			Map<String, Object> userMap = (Map<String, Object>) element.getObjectValue();
			// 设置用户ID
			user.setId((Integer) userMap.get("id"));
			if (userService.updateUser(user) > 0) {
				return ResultMap.convertMap(ResultCode.CODE_SUCCESS, Message.bundle("update.success"));
			} else {
				return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("update.fail"));
			}
		} else {
			return ResultMap.convertMap(ResultCode.CODE_NO_LOGIN, Message.bundle("permission.no.login"));
		}
	}
}
