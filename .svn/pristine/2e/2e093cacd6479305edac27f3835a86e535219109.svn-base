package org.system.controller.impl.service.transfer;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.core.result.ResultCode;
import org.core.result.ResultMap;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.BindingResult;
import org.store.wechat.WechatConfig;
import org.system.Global;
import org.system.controller.iface.service.transfer.ITransTreatDetailyController;
import org.system.entity.doctor.Doctor;
import org.system.entity.service.UserService;
import org.system.entity.service.resp.ServiceRespTask;
import org.system.entity.service.transfer.TransTreatDetaily;
import org.system.entity.service.transfer.TransTreatRecordsInfo;
import org.system.entity.service.transfer.YuyueCountInfo;
import org.system.entity.sms.SmsSendTask;
import org.system.entity.sys.SysHintMessage;
import org.system.message.Message;
import org.system.service.iface.doctor.IDoctorService;
import org.system.service.iface.service.IGdNumberInfoService;
import org.system.service.iface.service.IUserServiceService;
import org.system.service.iface.service.resp.IServiceRespTaskService;
import org.system.service.iface.service.transfer.ITransTreatDetailyService;
import org.system.service.iface.service.transfer.ITransTreatRecordsInfoService;
import org.system.service.iface.service.transfer.IYuyueCountInfoService;
import org.system.service.iface.sms.ISmsSendTaskService;
import org.system.service.iface.sys.ISysHintMessageService;
import org.utils.service.ServiceEnum;
import org.utils.spring.RESTClient;

import net.sf.ehcache.CacheManager;
import net.sf.ehcache.Element;

@Controller
public class TransTreatDetailyController implements ITransTreatDetailyController {
	Logger log = LoggerFactory.getLogger(TransTreatDetailyController.class);
	@Resource
	private ITransTreatDetailyService transTreatDetailyService;
	@Resource
	private IGdNumberInfoService gdNumberInfoService;
	@Resource
	private CacheManager cache;
	@Resource
	private IDoctorService doctorService;
	@Resource
	private IServiceRespTaskService serviceRespTaskService;
	@Resource
	private IUserServiceService userSeviceSevice;
	@Resource
	private ITransTreatRecordsInfoService transTreatRecordsInfoService;
	@Resource
	private IYuyueCountInfoService yuyueCountInfoService;
	@Resource
	private ISysHintMessageService sysHintMessageService;
	@Resource
	private ISmsSendTaskService smsSendTaskService;

	@Override
	@Transactional
	public synchronized Map<String, Object> insertTransTreatDetaily(TransTreatDetaily transTreatDetaily,
			BindingResult resul, String token) {
		// 缓存中获取医生数据
		Element element = cache.getCache(Global.CACHE_DOCTOR).get(token);
		if (element != null) {
			// 判断医生是否存在
			Doctor doctor = new Doctor();
			doctor.setId(transTreatDetaily.getDoctorId());
			Map<String, Object> doctorMap = doctorService.getDoctorDetil(doctor);
			if (doctorMap == null || doctorMap.size() <= 0) {
				return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("doctor.empty"));
			}
			// 判断服务响应是否存在
			ServiceRespTask srt = new ServiceRespTask();
			srt.setId(transTreatDetaily.getServiceRespTaskId());
			Map<String, Object> srtMap = serviceRespTaskService.getServiceRespTaskDetail(srt);
			if (srtMap == null || srtMap.size() <= 0) {
				return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("serviceRespTask.empty"));
			}

			// 判断服务响应状态是否正确
			if ((int) srtMap.get("taskStatus") != 2) {
				return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("serviceRespTask.status.error"));
			}
			// 判断医生预约信息是否存在
			YuyueCountInfo yuyueCountInfo = new YuyueCountInfo();
			yuyueCountInfo.setId(transTreatDetaily.getYuyueCountInfoId());
			Map<String, Object> yuyueMap = yuyueCountInfoService.getYuyueCountInfoDetail(yuyueCountInfo);
			if (yuyueMap == null || yuyueMap.size() <= 0
					|| (int) yuyueMap.get("doctorId") != transTreatDetaily.getDoctorId()
					|| ((int) yuyueMap.get("totalCount") - (int) yuyueMap.get("usedCount")) <= 0) {
				return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("yuyueCountInfo.empty"));
			}
			// 判断用户服务是否存在且未锁定次数是否大于0 不存在提示用户购买 不大于0提示用户次数不足
			UserService userService = new UserService();
			userService.setId(transTreatDetaily.getUserServiceId());
			Map<String, Object> userServiceMap = userSeviceSevice.getUserServiceDetail(userService);
			if (userServiceMap == null || userServiceMap.size() <= 0) {
				return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("userService.empty"));
			} else {
				if (((int) userServiceMap.get("times") - (int) userServiceMap.get("lockTimes")) <= 0) {
					return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("lockTimes.empty"));
				}
			}
			@SuppressWarnings("unchecked")
			Map<String, Object> userMap = (Map<String, Object>) element.getObjectValue();
			// 设置原医生id
			transTreatDetaily.setFromDoctorId((Integer) userMap.get("id"));
			// 设置转诊时间
			transTreatDetaily.setTransDate(new Date());
			// 设置使用次数
			transTreatDetaily.setUsedCount(1);
			if ((int) userServiceMap.get("serviceTypeId") == 6) {
				transTreatDetaily
						.setTransTreatNumber(gdNumberInfoService.getGdnumberForDay(ServiceEnum.YCFW, new Date()));
			} else {
				transTreatDetaily
						.setTransTreatNumber(gdNumberInfoService.getGdnumberForDay(ServiceEnum.FJZZ, new Date()));
			}
			// 设置使用时间
			transTreatDetaily.setUsedDate(new Date());
			// 设置默认状态-- 待用户确认状态
			transTreatDetaily.setStatus(1);
			// 设置更新时间
			transTreatDetaily.setUpdateTime(new Date());
			// 新增转诊记录并推送至微信端
			if (transTreatDetailyService.insertTransTreatDetaily(transTreatDetaily) > 0) {
				// 添加成功判断是够有病例资料 有则添加
				if (transTreatDetaily.getFiles() != null) {
					// 添加病例资料
					if (transTreatDetailyService.insertTransTreatDetailyFiles(transTreatDetaily) != transTreatDetaily
							.getFiles().size()) {
						throw new RuntimeException();
					}
				}
				// 设置转诊记录信息
				TransTreatRecordsInfo transtreatRecordsInfo = new TransTreatRecordsInfo();
				transtreatRecordsInfo.setSrcDoctorId(transTreatDetaily.getFromDoctorId());
				transtreatRecordsInfo.setDescDoctorId(transTreatDetaily.getDoctorId());
				transtreatRecordsInfo.setTransTreatDate(transTreatDetaily.getTransDate());
				transtreatRecordsInfo.setTransTreatDetailyId(transTreatDetaily.getId());
				// 执行修改用户该服务的锁定次数 并且 执行新增 转诊记录信息和减掉一次医生预约次数
				if (transTreatRecordsInfoService.insertTransTreatRecordsInfo(transtreatRecordsInfo) > 0) {
					// 锁定用户服务次数
					Integer newLockTimes = (Integer) userServiceMap.get("lockTimes") + 1;
					userService.setLockTimes(newLockTimes);
					// 执行修改 判断状态
					if (userSeviceSevice.updateUserService(userService) <= 0) {
						throw new RuntimeException();
					}
					// 修改医生预约次数
					yuyueCountInfo.setTotalCount((int) yuyueMap.get("totalCount") - 1);
					if (yuyueCountInfoService.updateYuyueCountInfoCut(yuyueCountInfo) <= 0) {
						throw new RuntimeException();
					}
					// 新增成功发送至微信
					Map<String, Object> param = new HashMap<>();
					// 获取医生名和所在医院
					param.put("hospitalName", transTreatDetaily.getSnapshot());
					param.put("expertsName", doctorMap.get("name"));
					// 设置订单号
					param.put("orderId", transTreatDetaily.getTransTreatNumber());
					// 设置下单时间
					param.put("orderTime", transTreatDetaily.getTransDate().getTime());
					// 获取原医生姓名
					param.put("doctorName", userMap.get("name"));
					// 获取预约时间
					param.put("serviceTime", ((Date) yuyueMap.get("yuyueDate")).getTime());
					param.put("openId", srtMap.get("wechatId"));
					param.put("type", "transTreat");
					param.put("id", transTreatDetaily.getId());
					RESTClient.post(WechatConfig.getServer(), Global.WECHAT_SERVICE_PAYSERVICEPACKAGE, param);
					return ResultMap.convertMap(ResultCode.CODE_SUCCESS, Message.bundle("insert.success"));
				} else {
					throw new RuntimeException();
				}
			}
			return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("insert.fail"));
		} else {
			return ResultMap.convertMap(ResultCode.CODE_NO_LOGIN, Message.bundle("permission.no.login"));
		}
	}

	@Override
	@Transactional
	public Map<String, Object> updateTransTreatSure(Integer transTreatDetailyId, TransTreatDetaily transTreatDetaily,
			BindingResult result, String token) {
		// 缓存中获取用户数据
		Element element = cache.getCache(Global.CACHE_USER).get(token);
		if (element != null) {
			@SuppressWarnings("unchecked")
			Map<String, Object> userMap = (Map<String, Object>) element.getObjectValue();
			// 判断转诊信息是否存在
			transTreatDetaily.setId(transTreatDetailyId);
			// 查询转诊详情，获取 用户服务 实际次数和 锁定次数
			Map<String, Object> transMap = transTreatDetailyService.getTransTreatDetailyDetail(transTreatDetaily);
			if (transMap == null || transMap.size() <= 0) {
				return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("query.empty"));
			}
			// 只允许用户确认或者取消
			if (transTreatDetaily.getStatus() != 2 && transTreatDetaily.getStatus() != 3
					|| (int) transMap.get("status") != 1) {
				return ResultMap.convertMap(ResultCode.CODE_PARAMETER_ERROR,
						Message.bundle("transTreatDetaily.status.error"));
			}
			// 判读是否是属于用户的转诊信息
			if ((int) userMap.get("id") != (int) transMap.get("userId")) {
				return ResultMap.convertMap(ResultCode.CODE_PERMISSION_ERROR, Message.bundle("record.is.outside.user"));
			}
			// 判断确认时间是否超过预约时间
			try {
				Date yuyueDate = new SimpleDateFormat("yyyy-MM-dd").parse(transMap.get("yuyueDate").toString());
				if (yuyueDate.before(new Date())) {
					// 设置状态
					transTreatDetaily.setStatus(2);
					// 设置更新时间和用户确认时间
					transTreatDetaily.setUpdateTime(new Date());
					if (transTreatDetaily.getStatus() == 2) {
						transTreatDetaily.setUserRejectTime(new Date());
					} else {
						transTreatDetaily.setUserConfirmTime(new Date());
					}
					if (transTreatDetailyService.updateTransTreatDetaily(transTreatDetaily) > 0) {
						return ResultMap.convertMap(ResultCode.CODE_SUCCESS, Message.bundle("yuyueDate.outside"));
					} else {
						return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("update.fail"));
					}
				}
			} catch (ParseException e) {
				e.printStackTrace();
			}
			if (transTreatDetailyService.updateTransTreatDetaily(transTreatDetaily) > 0) {
				UserService userService = new UserService();
				// 获取用户服务编号
				Integer userServiceId = (Integer) transMap.get("userServiceId");
				Integer lockTimes = (Integer) transMap.get("lockTimes") - 1;
				userService.setLockTimes(lockTimes);
				userService.setId(userServiceId);
				if (transTreatDetaily.getStatus() == 3) {
					// 获取转诊记录 用户服务 实际次数 实际次数 -1
					Integer times = (Integer) transMap.get("times") - 1;
					userService.setTimes(times);
				}
				// 执行修改 判断状态
				if (userSeviceSevice.updateUserService(userService) <= 0) {
					throw new RuntimeException();
				}
				// 新增系统消息给医生
				SysHintMessage sysHintMessage = new SysHintMessage();
				sysHintMessage.setFromDoctorId((Integer) transMap.get("fromDoctorId"));
				sysHintMessage.setToDoctorId(transMap.get("doctorId").toString());
				sysHintMessage.setMsgType(1);
				sysHintMessage.setPackageServiceId(transTreatDetailyId);
				sysHintMessage.setUserId(transMap.get("userId").toString());
				sysHintMessage.setStartTime(new Date());
				sysHintMessage.setEndTime(new Date());
				sysHintMessage.setMsgContent(Message.bundle("sysHintMessage.transTreatDetaily.prompt",
						transMap.get("userName"), transMap.get("serviceName"), transMap.get("transTreatNumber")));
				if (sysHintMessageService.insertSysHintMessage(sysHintMessage) <= 0) {
					throw new RuntimeException();
				}
				return ResultMap.convertMap(ResultCode.CODE_SUCCESS, Message.bundle("update.success"));

			} else {
				return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("update.fail"));
			}
		} else {
			return ResultMap.convertMap(ResultCode.CODE_NO_LOGIN, Message.bundle("permission.no.login"));
		}
	}

	@Override
	public Map<String, Object> updateTransTreatAccept(Integer transTreatDetailyId, TransTreatDetaily transTreatDetaily,
			BindingResult result, String token) {

		// 缓存中获取用户数据
		Element element = cache.getCache(Global.CACHE_DOCTOR).get(token);
		if (element != null) {
			@SuppressWarnings("unchecked")
			Map<String, Object> doctorMap = (Map<String, Object>) element.getObjectValue();
			// 设置ID
			transTreatDetaily.setId(transTreatDetailyId);
			// 设置转诊状态
			transTreatDetaily.setStatus(5);
			transTreatDetaily.setUpdateTime(new Date());
			transTreatDetaily.setDoctorAcceptTime(new Date());
			// 查询转诊详情，获取 用户服务 实际次数和 锁定次数
			Map<String, Object> transMap = transTreatDetailyService.getTransTreatDetailyDetail(transTreatDetaily);
			if (transMap == null || transMap.size() <= 0) {
				return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("query.empty"));
			} // 判读是否是属于医生的转诊信息
			if ((int) doctorMap.get("id") != (int) transMap.get("doctorId")) {
				return ResultMap.convertMap(ResultCode.CODE_PERMISSION_ERROR,
						Message.bundle("record.is.outside.doctor"));
			}
			// 只允许用户确认或者取消
			if ((int) transMap.get("status") != 3) {
				return ResultMap.convertMap(ResultCode.CODE_PARAMETER_ERROR,
						Message.bundle("transTreatDetaily.status.error"));
			}
			// 执行修改 判断状态
			if (transTreatDetailyService.updateTransTreatDetaily(transTreatDetaily) > 0) {
				Map<String, Object> param = new HashMap<>();
				// 设置订单号
				param.put("orderId", transMap.get("transTreatNumber"));
				// 获取原医生姓名
				param.put("doctorName", doctorMap.get("name"));
				// 获取预约时间
				param.put("serviceName", transMap.get("serviceName"));
				param.put("openId", transMap.get("wechatId"));
				RESTClient.post(WechatConfig.getServer(), Global.WECHAT_SERVICE_ACCEPTSERVICE, param);
				// 修改成功 返回提示结束流程
				return ResultMap.convertMap(ResultCode.CODE_SUCCESS, Message.bundle("update.success"));
			} else {
				return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("update.fail"));
			}
		} else {
			return ResultMap.convertMap(ResultCode.CODE_NO_LOGIN, Message.bundle("permission.no.login"));
		}
	}

	@Override
	@Transactional
	public Map<String, Object> updateTransTreatRefuse(Integer transTreatDetailyId, TransTreatDetaily transTreatDetaily,
			BindingResult result, String token) {
		Element element = cache.getCache(Global.CACHE_DOCTOR).get(token);
		if (element != null) {
			@SuppressWarnings("unchecked")
			Map<String, Object> doctorMap = (Map<String, Object>) element.getObjectValue();
			// 设置ID
			transTreatDetaily.setId(transTreatDetailyId);
			// 查询转诊详情，获取 用户服务 实际次数和 锁定次数
			Map<String, Object> transMap = transTreatDetailyService.getTransTreatDetailyDetail(transTreatDetaily);
			if (transMap == null || transMap.size() <= 0) {
				return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("query.empty"));
			}
			if ((int) transMap.get("status") != 3) {
				return ResultMap.convertMap(ResultCode.CODE_PARAMETER_ERROR,
						Message.bundle("transTreatDetaily.status.error"));
			} // 判读是否是属于医生的转诊信息
			if ((int) doctorMap.get("id") != (int) transMap.get("doctorId")) {
				return ResultMap.convertMap(ResultCode.CODE_PERMISSION_ERROR,
						Message.bundle("record.is.outside.doctor"));
			}
			// 获取转诊记录 用户服务 实际次数 实际次数不变
			Integer times = (Integer) transMap.get("times") + 1;
			// 获取用户服务编号
			Integer userServiceId = (Integer) transMap.get("userServiceId");
			UserService userService = new UserService();
			userService.setId(userServiceId);
			userService.setTimes(times);

			// 设置转诊状态
			transTreatDetaily.setStatus(4);
			transTreatDetaily.setUpdateTime(new Date());
			transTreatDetaily.setDoctorRejectTime(new Date());
			// userService.setLockTimes(lockTimes);
			// 执行修改 判断状态
			if (userSeviceSevice.updateUserService(userService) > 0
					&& transTreatDetailyService.updateTransTreatDetaily(transTreatDetaily) > 0) {
				// 新增系统消息给医生
				SysHintMessage sysHintMessage = new SysHintMessage();
				sysHintMessage.setFromDoctorId((Integer) transMap.get("doctorId"));
				sysHintMessage.setToDoctorId(transMap.get("fromDoctorId").toString());
				sysHintMessage.setMsgType(1);
				sysHintMessage.setPackageServiceId(transTreatDetailyId);
				sysHintMessage.setUserId(transMap.get("userId").toString());
				sysHintMessage.setStartTime(new Date());
				sysHintMessage.setEndTime(new Date());
				sysHintMessage.setMsgContent(Message.bundle("sysHintMessage.transTreatDetaily.refuse.prompt",
						doctorMap.get("name"), transMap.get("userName"), transMap.get("serviceName"),
						transMap.get("transTreatNumber")));
				if (sysHintMessageService.insertSysHintMessage(sysHintMessage) <= 0) {
					throw new RuntimeException();
				}

				/* 推送消息至微信 */
				Map<String, Object> param = new HashMap<>();
				// 设置服务名
				param.put("serviceName", transMap.get("serviceName"));
				// 设置订单号
				param.put("orderId", transMap.get("transTreatNumber"));
				// 获取医生名
				param.put("doctorName", transMap.get("doctorName"));
				// 设置服务时间
				param.put("serviceTime", ((Date) transMap.get("yuyueDate")).getTime());
				// 设置下单时间
				param.put("orderTime", ((Date) transMap.get("transDate")).getTime());
				// 设置微信openId
				param.put("openId", transMap.get("wechatId"));
				// TODO 修改接口方法名
				RESTClient.post(WechatConfig.getServer(), Global.WECHAT_SERVICE_PAYSERVICEPACKAGE, param);

				SmsSendTask sms = new SmsSendTask();
				sms.setFromDoctorId((Integer) doctorMap.get("id"));
				sms.setFrom((String) doctorMap.get("phone"));
				sms.setToUserId((Integer) transMap.get("userId"));
				sms.setTo((String) transMap.get("phone"));
				sms.setCreateTime(new Date());
				sms.setSmsType(0);
				sms.setContent(Message.bundle("transRefuse.sms.user.content", transMap.get("serviceName"),
						Message.bundle("platform.telephone")));
				if (smsSendTaskService.insertSms(sms) <= 0) {
					throw new RuntimeException();
				}
				// 修改成功 返回提示结束流程
				return ResultMap.convertMap(ResultCode.CODE_SUCCESS, Message.bundle("update.success"));
			} else {
				// 修改失败 返回提示结束流程
				throw new RuntimeException();
			}
		} else {
			return ResultMap.convertMap(ResultCode.CODE_NO_LOGIN, Message.bundle("permission.no.login"));
		}
	}

	@Override
	@Transactional
	public Map<String, Object> updateTransTreatSwitchBack(Integer transTreatDetailyId,
			TransTreatDetaily transTreatDetaily, BindingResult result, String token) {
		Element element = cache.getCache(Global.CACHE_DOCTOR).get(token);
		if (element != null) {
			@SuppressWarnings("unchecked")
			Map<String, Object> userMap = (Map<String, Object>) element.getObjectValue();
			// 设置ID
			transTreatDetaily.setId(transTreatDetailyId);
			// 查询转诊详情，获取 转诊的 来源医生ID 和当前医生Id
			Map<String, Object> transMap = transTreatDetailyService.getTransTreatDetailyDetail(transTreatDetaily);
			if (transMap == null || transMap.size() <= 0) {
				return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("query.empty"));
			}
			if ((int) transMap.get("status") != 5) {
				return ResultMap.convertMap(ResultCode.CODE_PARAMETER_ERROR,
						Message.bundle("transTreatDetaily.status.error"));
			}
			// 判读是否是属于医生的转诊信息
			if ((int) userMap.get("id") != (int) transMap.get("doctorId")) {
				return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("record.is.outside.doctor"));
			}
			Integer fromDoctorId = (Integer) transMap.get("fromDoctorId");
			Integer doctorId = (Integer) transMap.get("doctorId");
			// 交换 医生编号
			transTreatDetaily.setDoctorId((Integer) fromDoctorId);
			transTreatDetaily.setFromDoctorId(doctorId);
			// 设置状态
			transTreatDetaily.setStatus(6);
			transTreatDetaily.setUpdateTime(new Date());
			transTreatDetaily.setDoctorReturnTime(new Date());
			// 设置转诊记录信息 数据
			TransTreatRecordsInfo transTreatRecordsInfo = new TransTreatRecordsInfo();
			transTreatRecordsInfo.setDescDoctorId(transTreatDetaily.getDoctorId());
			transTreatRecordsInfo.setSrcDoctorId(transTreatDetaily.getFromDoctorId());
			// 设置转诊记录流水 ID
			transTreatRecordsInfo.setTransTreatDetailyId(transTreatDetailyId);
			/*
			 * transTreatRecordsInfo.setHmZdjg(transTreatDetaily.getHmZdjg());
			 * transTreatRecordsInfo.setHmZljg(transTreatDetaily.getHmZljg());
			 * transTreatRecordsInfo.setHmKfjy(transTreatDetaily.getHmKfjy());
			 * transTreatRecordsInfo.setHmGjtysjy(transTreatDetaily.getHmGjtysjy
			 * ());
			 */
			transTreatRecordsInfo.setTransTreatDate(new Date());
			// 执行修改 判断状态
			if (transTreatDetailyService.updateTransTreatDetaily(transTreatDetaily) > 0
					&& transTreatRecordsInfoService.insertTransTreatRecordsInfo(transTreatRecordsInfo) > 0) {
				// 新增系统消息给医生
				SysHintMessage sysHintMessage = new SysHintMessage();
				sysHintMessage.setFromDoctorId(transTreatDetaily.getFromDoctorId());
				sysHintMessage.setToDoctorId(transTreatDetaily.getDoctorId().toString());
				sysHintMessage.setMsgType(1);
				sysHintMessage.setPackageServiceId(transTreatDetailyId);
				sysHintMessage.setUserId(transMap.get("userId").toString());
				sysHintMessage.setStartTime(new Date());
				sysHintMessage.setEndTime(new Date());
				sysHintMessage.setMsgContent(Message.bundle("sysHintMessage.transTreatDetaily.prompt.doctor",
						userMap.get("name"), transMap.get("serviceName"), transMap.get("transTreatNumber")));
				if (sysHintMessageService.insertSysHintMessage(sysHintMessage) <= 0) {
					throw new RuntimeException();
				}
				// 修改成功 返回提示结束流程
				return ResultMap.convertMap(ResultCode.CODE_SUCCESS, Message.bundle("update.success"));
			} else {
				throw new RuntimeException();
			}
		} else {
			return ResultMap.convertMap(ResultCode.CODE_NO_LOGIN, Message.bundle("permission.no.login"));
		}
	}

	@Override
	public Map<String, Object> updateTransTreatReceive(Integer transTreatDetailyId, TransTreatDetaily transTreatDetaily,
			BindingResult result, String token) {
		// 缓存中获取医生数据
		Element element = cache.getCache(Global.CACHE_DOCTOR).get(token);
		if (element != null) {
			@SuppressWarnings("unchecked")
			Map<String, Object> userMap = (Map<String, Object>) element.getObjectValue();
			// 判断转诊信息是否存在
			transTreatDetaily.setId(transTreatDetailyId);
			// 查询转诊详情，获取 用户服务 实际次数和 锁定次数
			Map<String, Object> transMap = transTreatDetailyService.getTransTreatDetailyDetail(transTreatDetaily);
			if (transMap == null || transMap.size() <= 0) {
				return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("query.empty"));
			}
			if ((int) transMap.get("status") != 6) {
				return ResultMap.convertMap(ResultCode.CODE_PARAMETER_ERROR,
						Message.bundle("transTreatDetaily.status.error"));
			}
			// 判读是否是属于医生的转诊信息
			if ((int) userMap.get("id") != (int) transMap.get("doctorId")) {
				return ResultMap.convertMap(ResultCode.CODE_PERMISSION_ERROR,
						Message.bundle("record.is.outside.doctor"));
			}
			// 设置状态
			transTreatDetaily.setStatus(7);
			transTreatDetaily.setUpdateTime(new Date());
			transTreatDetaily.setDoctorRecvTime(new Date());
			if (transTreatDetailyService.updateTransTreatDetaily(transTreatDetaily) > 0) {
				return ResultMap.convertMap(ResultCode.CODE_SUCCESS, Message.bundle("update.success"));
			} else {
				return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("update.fail"));
			}
		} else {
			return ResultMap.convertMap(ResultCode.CODE_NO_LOGIN, Message.bundle("permission.no.login"));
		}
	}

	@Override
	public Map<String, Object> updateTransTreatDetaily(Integer transTreatDetailyId, TransTreatDetaily transTreatDetaily,
			BindingResult result) {
		// 设置ID
		transTreatDetaily.setId(transTreatDetailyId);
		// 执行修改 判断状态
		if (transTreatDetailyService.updateTransTreatDetaily(transTreatDetaily) > 0) {
			// 修改成功 返回提示结束流程
			return ResultMap.convertMap(ResultCode.CODE_SUCCESS, Message.bundle("update.success"));
		} else {
			// 修改失败 返回提示结束流程
			return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("update.fail"));
		}
	}

	@Override
	public Map<String, Object> getTransTreatDetailyList(TransTreatDetaily transTreatDetaily, BindingResult result,
			String token) {
		// 缓存中获取医生数据
		Element element = cache.getCache(Global.CACHE_DOCTOR).get(token);
		if (element != null) {
			@SuppressWarnings("unchecked")
			Map<String, Object> userMap = (Map<String, Object>) element.getObjectValue();
			// 设置用户id
			transTreatDetaily.setDoctorId((Integer) userMap.get("id"));
			// 定义返回对象
			Map<String, Object> resultMap = new HashMap<>();
			List<Map<String, Object>> transList = transTreatDetailyService.getTransTreatDetailyList(transTreatDetaily);
			resultMap.put(Global.DATA_TOTAL, transTreatDetaily.getTotal());
			if (transList != null && transList.size() > 0) {
				// 得到数据总数
				resultMap.put(Global.DATA_ROWS, transList);
				return ResultMap.convertMap(ResultCode.CODE_SUCCESS, resultMap, Message.bundle("query.success"));
			}
			return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, resultMap, Message.bundle("query.empty"));
		} else {
			return ResultMap.convertMap(ResultCode.CODE_NO_LOGIN, Message.bundle("permission.no.login"));
		}
	}

	@Override
	public Map<String, Object> getTransTreatDetailyDetail(Integer transTreatDetailyId,
			TransTreatDetaily transTreatDetaily, BindingResult result, String token) {
		// 缓存中获取医生数据
		Element element = cache.getCache(Global.CACHE_DOCTOR).get(token);
		if (element != null) {
			/*
			 * @SuppressWarnings("unchecked") Map<String, Object> userMap =
			 * (Map<String, Object>) element.getObjectValue();
			 */
			transTreatDetaily.setId(transTreatDetailyId);
			// 定义返回对象
			Map<String, Object> transMap = transTreatDetailyService.getTransTreatDetailyDetail(transTreatDetaily);
			if (transMap != null && transMap.size() > 0) {
				/*
				 * if ((int) userMap.get("id") != (int)
				 * transMap.get("doctorId")) { return
				 * ResultMap.convertMap(ResultCode.CODE_PERMISSION_ERROR,
				 * Message.bundle("record.is.outside.doctor")); }
				 */
				return ResultMap.convertMap(ResultCode.CODE_SUCCESS, transMap, Message.bundle("query.success"));
			}
			return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("query.empty"));

		} else {
			return ResultMap.convertMap(ResultCode.CODE_NO_LOGIN, Message.bundle("permission.no.login"));
		}
	}

	@Override
	public Map<String, Object> getTransTreatDetailyByUserList(TransTreatDetaily transTreatDetaily, BindingResult result,
			String token) {
		// 定义返回对象
		Map<String, Object> resultMap = new HashMap<>();
		List<Map<String, Object>> transList = transTreatDetailyService
				.getTransTreatDetailyDoctorByUserList(transTreatDetaily);
		resultMap.put(Global.DATA_TOTAL, transTreatDetaily.getTotal());
		if (transList != null && transList.size() > 0) {
			// 得到数据总数
			resultMap.put(Global.DATA_ROWS, transList);
			return ResultMap.convertMap(ResultCode.CODE_SUCCESS, resultMap, Message.bundle("query.success"));
		}
		return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, resultMap, Message.bundle("query.empty"));

	}

	@Override
	public Map<String, Object> getTransTreatDetailyDetailByUser(Integer transTreatDetailyId,
			TransTreatDetaily transTreatDetaily, BindingResult result, String token) {
		// 缓存中获取医生数据
		Element element = cache.getCache(Global.CACHE_USER).get(token);
		if (element != null) {
			/*
			 * @SuppressWarnings("unchecked") Map<String, Object> userMap =
			 * (Map<String, Object>) element.getObjectValue();
			 */
			transTreatDetaily.setId(transTreatDetailyId);
			// 定义返回对象
			Map<String, Object> transMap = transTreatDetailyService.getTransTreatDetailyDetail(transTreatDetaily);
			if (transMap != null && transMap.size() > 0) {
				/*
				 * if ((int) userMap.get("id") != (int) transMap.get("userId"))
				 * { return
				 * ResultMap.convertMap(ResultCode.CODE_PERMISSION_ERROR,
				 * Message.bundle("record.is.outside.user")); }
				 */
				return ResultMap.convertMap(ResultCode.CODE_SUCCESS, transMap, Message.bundle("query.success"));
			}
			return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("query.empty"));

		} else {
			return ResultMap.convertMap(ResultCode.CODE_NO_LOGIN, Message.bundle("permission.no.login"));
		}
	}

}
