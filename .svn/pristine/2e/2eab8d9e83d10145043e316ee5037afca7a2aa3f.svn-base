package org.system.controller.impl.contract;

import java.math.BigDecimal;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpSession;

import org.core.result.ResultCode;
import org.core.result.ResultMap;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.BindingResult;
import org.store.his.HisConfig;
import org.store.his.HisFactory;
import org.store.wechat.WechatConfig;
import org.system.Global;
import org.system.controller.iface.contract.IContractController;
import org.system.entity.contract.Contract;
import org.system.entity.contract.ContractFeedback;
import org.system.entity.contract.ContractHistory;
import org.system.entity.doctor.Doctor;
import org.system.entity.doctor.DoctorGroup;
import org.system.entity.order.UserOrder;
import org.system.entity.service.ServicePack;
import org.system.entity.service.UserServicePack;
import org.system.entity.sys.SysHintMessage;
import org.system.entity.user.User;
import org.system.entity.user.UserDetail;
import org.system.message.Message;
import org.system.service.iface.contract.IContractFeedbackService;
import org.system.service.iface.contract.IContractHistoryService;
import org.system.service.iface.contract.IContractService;
import org.system.service.iface.doctor.IDoctorGroupService;
import org.system.service.iface.doctor.IDoctorService;
import org.system.service.iface.order.IUserOrderService;
import org.system.service.iface.service.IGdNumberInfoService;
import org.system.service.iface.service.IServicePackService;
import org.system.service.iface.service.IUserServicePackService;
import org.system.service.iface.sys.ISysHintMessageService;
import org.system.service.iface.user.IUserDetailService;
import org.system.service.iface.user.IUserService;
import org.utils.calc.DateUtils;
import org.utils.calc.IdcardUtils;
import org.utils.spring.RESTClient;

import net.sf.ehcache.CacheManager;
import net.sf.ehcache.Element;

@Controller
public class ContractController implements IContractController {
	Logger log = LoggerFactory.getLogger(ContractController.class);
	@Resource
	private IContractService contractService;
	@Resource
	private IContractFeedbackService contractFeedbackService;
	@Resource
	private CacheManager cache;
	@Resource
	private IDoctorGroupService doctorGroupService;
	@Resource
	private IDoctorService doctorService;
	@Resource
	private IUserDetailService userDetailService;
	@Resource
	private IGdNumberInfoService gdNumberInfoService;
	@Resource
	private IUserService userService;
	@Resource
	private IUserServicePackService userServicePackService;
	@Resource
	private IContractHistoryService contractHistoryService;
	@Resource
	private IServicePackService servicePackService;
	@Resource
	private IUserOrderService userOrderService;
	@Resource
	private ISysHintMessageService sysHintMessageService;

	@Override
	@Transactional
	public Map<String, Object> insertContract(Contract contract, BindingResult result, String token) {
		// 缓存中获取用户数据
		Element element = cache.getCache(Global.CACHE_USER).get(token);
		if (element != null) {
			@SuppressWarnings("unchecked")
			Map<String, Object> userMap = (Map<String, Object>) element.getObjectValue();
			contract.setUserId((Integer) userMap.get("id"));
			DoctorGroup doctorGroup = new DoctorGroup();
			doctorGroup.setId(contract.getDoctorGroupId());
			// 检查团队是否存在
			Map<String, Object> doctorGroupMap = doctorGroupService.getDoctorGroupDetail(doctorGroup);
			if (doctorGroupMap == null || doctorGroupMap.size() <= 0) {
				// 数据不存在 返回提示结束流程
				return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("doctorGroup.empty"));
			}
			contract.setContractNumber(
					gdNumberInfoService.getGdnumberForHospital((Integer) doctorGroupMap.get("hospitalId")));
			// 检查数据是否重复
			Map<String, Object> contractMap = contractService.getContractByFild(contract);
			if (contractMap != null && contractMap.size() > 0) {
				// 数据已存在 返回提示结束流程
				return ResultMap.convertMap(ResultCode.CODE_DATA_EXISTS, Message.bundle("data.exists"));
			}
			// 设置默认值
			contract.setCreateDate(new Date());
			contract.setState(Global.CONTRACT_STATE_WAIT);
			contract.setContractSource(1);
			// 执行新增 判断状态
			if (contractService.insertContract(contract) > 0) {
				/*新增签约时 调用存储过程,添加地址省、市、区、街道、居委会*/
				Contract contractAddress=new Contract();
				contractAddress.setId(contract.getId());
				contractService.updateContractAddressById(contractAddress);
				
				/* 根据团队ID查询团队长ID */
				Map<String, Object> groupMap = doctorGroupService.getDoctorGroupManager(doctorGroup);
				// 新增系统消息给医生
				SysHintMessage sysHintMessage = new SysHintMessage();
				sysHintMessage.setToDoctorId(groupMap.get("doctorId").toString());
				sysHintMessage.setMsgType(4);
				sysHintMessage.setPackageServiceId(contract.getId());
				sysHintMessage.setUserId(contract.getUserId().toString());
				sysHintMessage.setStartTime(new Date());
				sysHintMessage.setEndTime(new Date());
				sysHintMessage.setMsgContent(Message.bundle("contract.insert.success.sms.content"));
				if (sysHintMessageService.insertSysHintMessage(sysHintMessage) <= 0) {
					throw new RuntimeException();
				}
				/*
				 * // 新增成功 推送微信消息 同步档案 返回提示结束流程 Map<String, Object> param = new
				 * HashMap<>(); param.put("userID", userMap.get("id"));
				 * param.put("cardID", contract.getIdcard());
				 * param.put("encodeStr",
				 * HisFactory.getInstance().getPermissionTokenString(Global.
				 * HIS_ACQUISITIVE));
				 * RESTClient.postForSynchronize(Global.HIS_SERVER,
				 * Global.HIS_SYNCHEALTHINFO, param);
				 */
				return ResultMap.convertMap(ResultCode.CODE_SUCCESS, Message.bundle("insert.success"));
			} else {
				// 新增失败 返回提示结束流程
				return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("insert.fail"));
			}
		} else {
			return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("permission.no.login"));
		}
	}

	@Override
	@Transactional
	public synchronized Map<String, Object> sureContract(Integer contractId, Contract contract, BindingResult result) {

		// 查询医生是否存在
		if (contract.getCreatorId() != null) {
			Doctor doctor = new Doctor();
			doctor.setId(contract.getCreatorId());
			Map<String, Object> doctorMap = doctorService.getDoctorDetil(doctor);
			if (doctorMap == null || doctorMap.size() <= 0) {
				return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("doctor.empty"));
			}
		}
		// 设置主键
		contract.setId(contractId);
		Map<String, Object> contractMap = contractService.getContractDetail(contract);
		// 判断签约是否存在并且状态是否为0（待签约）
		if (contractMap != null && contractMap.size() > 0
				&& (int) contractMap.get("state") == Global.CONTRACT_STATE_WAIT) {
			// 设置签约状态为已签约（状态为2）
			contract.setState(Global.CONTRACT_STATE_SURE);

			// 执行修改 判断状态
			if (contractService.updateContract(contract) > 0) {
				// 新增系统消息给医生
				SysHintMessage sysHintMessage = new SysHintMessage();
				sysHintMessage.setToDoctorId(contract.getCreatorId().toString());
				sysHintMessage.setMsgType(5);
				sysHintMessage.setPackageServiceId((Integer) contractMap.get("id"));
				sysHintMessage.setUserId(contractMap.get("userId").toString());
				sysHintMessage.setStartTime(new Date());
				sysHintMessage.setEndTime(new Date());
				sysHintMessage.setMsgContent(Message.bundle("contract.sure.success.content"));
				if (sysHintMessageService.insertSysHintMessage(sysHintMessage) <= 0) {
					throw new RuntimeException();
				}

				Map<String, Object> param = new HashMap<>();
				param.put("openId", contractMap.get("wechatId"));
				param.put("groupName", contractMap.get("doctorGroupName"));
				RESTClient.post(WechatConfig.getServer(), Global.WECHAT_CONTRACT_SUCCESS, param);

				// 新增成功 推送微信消息 同步档案 返回提示结束流程
				Map<String, Object> hisParam = new HashMap<>();
				hisParam.put("userID", contractMap.get("userId"));
				hisParam.put("cardID", contractMap.get("idcard"));
				hisParam.put("encodeStr", HisFactory.getInstance().getPermissionTokenString(Global.HIS_ACQUISITIVE));
				RESTClient.postForSynchronize(HisConfig.getUrl(), Global.HIS_SYNCHEALTHINFO, hisParam);
				return ResultMap.convertMap(ResultCode.CODE_SUCCESS, Message.bundle("update.success"));
			} else {
				// 修改失败 返回提示结束流程
				return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("update.fail"));
			}
		} else {
			return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("contract.state.error"));
		}
	}

	@Override
	public Map<String, Object> getContractList(Contract contract, BindingResult result, HttpSession session) {
		// 定义返回对象
		Map<String, Object> resultMap = new HashMap<>();
		// 得到返回数据
		List<Map<String, Object>> dataList = contractService.getContractList(contract);
		resultMap.put(Global.DATA_TOTAL, contract.getTotal());
		if (dataList != null && dataList.size() > 0) {
			// 得到数据总数
			resultMap.put(Global.DATA_ROWS, dataList);
			return ResultMap.convertMap(ResultCode.CODE_SUCCESS, resultMap, Message.bundle("query.success"));
		}
		return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, resultMap, Message.bundle("query.empty"));
	}

	@Override
	public Map<String, Object> getContractDetail(Integer contractId, Contract contract) {
		// 设置主键
		contract.setId(contractId);
		// 查询详情
		Map<String, Object> resultMap = contractService.getContractDetail(contract);
		if (resultMap != null && resultMap.size() > 0) {
			return ResultMap.convertMap(ResultCode.CODE_SUCCESS, resultMap, Message.bundle("query.success"));
		}
		return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("query.empty"));
	}

	@Override
	public Map<String, Object> getContractListBySession(Contract contract, BindingResult result, String token) {
		// 缓存中获取用户数据
		Element element = cache.getCache(Global.CACHE_USER).get(token);
		if (element != null) {
			@SuppressWarnings("unchecked")
			Map<String, Object> userMap = (Map<String, Object>) element.getObjectValue();
			contract.setUserId((Integer) userMap.get("id"));
			// 得到返回数据
			List<Map<String, Object>> dataList = contractService.getContractList(contract);
			if (dataList != null && dataList.size() > 0) {
				// 得到数据总数
				return ResultMap.convertMap(ResultCode.CODE_SUCCESS, dataList, Message.bundle("query.success"));
			}
			return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("query.empty"));
		} else {
			return ResultMap.convertMap(ResultCode.CODE_NO_LOGIN, Message.bundle("permission.no.login"));
		}
	}

	@Override
	public Map<String, Object> refusedContract(Integer contractId, ContractFeedback contractFeedback,
			BindingResult result, String token) {
		contractFeedback.setContractId(contractId);
		// 缓存中获取用户数据
		Element element = cache.getCache(Global.CACHE_DOCTOR).get(token);
		if (element != null) {
			@SuppressWarnings("unchecked")
			Map<String, Object> userMap = (Map<String, Object>) element.getObjectValue();
			contractFeedback.setDoctorId((Integer) userMap.get("id"));
			// 检查签约是否存在
			Contract contract = new Contract();
			contract.setId(contractId);
			Map<String, Object> contractMap = contractService.getContractDetail(contract);
			if (contractMap == null || contractMap.size() <= 0) {
				// 数据不存在 返回提示结束流程 return
				return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("contract.empty"));
			} else if ((int) contractMap.get("state") != Global.CONTRACT_STATE_WAIT) {
				return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("contract.state.error"));
			}
			contractFeedback.setCreateDate(new Date());
			// 执行新增 判断状态
			contract.setState(Global.CONTRACT_STATE_REFUSED);
			if (contractFeedbackService.insertContractFeedback(contractFeedback) > 0
					&& contractService.updateContract(contract) > 0) {
				Map<String, Object> param = new HashMap<>();
				param.put("openId", contractMap.get("wechatId"));
				param.put("groupName", contractMap.get("doctorGroupName"));
				param.put("cause", contractFeedback.getReason());
				param.put("phone", Message.bundle("platform.telephone"));
				RESTClient.post(WechatConfig.getServer(), Global.WECHAT_CONTRACT_FAIL, param);
				return ResultMap.convertMap(ResultCode.CODE_SUCCESS, Message.bundle("insert.success"));
			} else {
				// 新增失败 返回提示结束流程
				throw new RuntimeException();
			}
		} else {
			return ResultMap.convertMap(ResultCode.CODE_NO_LOGIN, Message.bundle("permission.no.login"));
		}
	}

	@Override
	public Map<String, Object> getContractListByDoctor(Contract contract, BindingResult result, String token) {
		// 缓存中获取医生数据
		Element element = cache.getCache(Global.CACHE_DOCTOR).get(token);
		if (element != null) {
			@SuppressWarnings("unchecked")
			Map<String, Object> doctorMap = (Map<String, Object>) element.getObjectValue();
			contract.setCreatorId((Integer) doctorMap.get("id"));
			// 定义返回对象
			Map<String, Object> resultMap = new HashMap<>();
			// 得到返回数据
			List<Map<String, Object>> dataList = contractService.getContractListByDoctor(contract);
			resultMap.put(Global.DATA_TOTAL, contract.getTotal());
			if (dataList != null && dataList.size() > 0) {
				// 得到数据总数
				resultMap.put(Global.DATA_ROWS, dataList);
				return ResultMap.convertMap(ResultCode.CODE_SUCCESS, resultMap, Message.bundle("query.success"));
			}
			return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, resultMap, Message.bundle("query.empty"));
		} else {
			return ResultMap.convertMap(ResultCode.CODE_NO_LOGIN, Message.bundle("permission.no.login"));
		}
	}

	@Override
	@Transactional
	public Map<String, Object> updateContractByUser(Integer contractId, Contract contract, BindingResult result,
			String token) {
		// 缓存中获取用户数据
		Element element = cache.getCache(Global.CACHE_USER).get(token);
		if (element != null) {
			@SuppressWarnings("unchecked")
			Map<String, Object> userMap = (Map<String, Object>) element.getObjectValue();
			// 查询签约是否存在
			contract.setId(contractId);
			Map<String, Object> contractMap = contractService.getContractDetail(contract);
			if (contractMap == null || contractMap.size() <= 0) {
				return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("contract.empty"));
			}
			// 判断签约信息是否属于本人
			if (!userMap.get("id").equals(contractMap.get("userId"))) {
				return ResultMap.convertMap(ResultCode.CODE_PERMISSION_ERROR, Message.bundle("record.is.outside.user"));
			}
			DoctorGroup doctorGroup = new DoctorGroup();
			if (contract.getDoctorGroupId() != null) {
				// 检查团队是否存在
				doctorGroup.setId(contract.getDoctorGroupId());
				Map<String, Object> doctorGroupMap = doctorGroupService.getDoctorGroupDetail(doctorGroup);
				if (doctorGroupMap == null || doctorGroupMap.size() <= 0) {
					return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("doctorGroup.empty"));
				}
			} else {
				doctorGroup.setId((Integer) contractMap.get("doctorGroupId"));
			}
			// 修改签约信息 设置签约状态为待签约状态
			contract.setCreatorId(null);
			contract.setState(Global.CONTRACT_STATE_WAIT);
			if (contractService.updateContract(contract) > 0) {
				Map<String, Object> groupMap = doctorGroupService.getDoctorGroupManager(doctorGroup);
				// 新增系统消息给医生
				SysHintMessage sysHintMessage = new SysHintMessage();
				sysHintMessage.setToDoctorId(groupMap.get("doctorId").toString());
				sysHintMessage.setMsgType(4);
				sysHintMessage.setPackageServiceId((Integer) contractMap.get("id"));
				sysHintMessage.setUserId(contractMap.get("userId").toString());
				sysHintMessage.setStartTime(new Date());
				sysHintMessage.setEndTime(new Date());
				sysHintMessage.setMsgContent(Message.bundle("contract.insert.success.sms.content"));
				if (sysHintMessageService.insertSysHintMessage(sysHintMessage) <= 0) {
					throw new RuntimeException();
				}
				if (contract.getUserDetail() != null) {
					// 修改用户详情 设置用户详情id
					contract.getUserDetail().setUserId((Integer) userMap.get("id"));
					// 如果修改了身份证检查身份证是否重复
					if (contract.getUserDetail().getIdcard() != null) {
						Map<String, Object> userDetailMap = userDetailService
								.getUserDetailByFild(contract.getUserDetail());
						if (userDetailMap != null && userDetailMap.size() > 0) {
							return ResultMap.convertMap(ResultCode.CODE_DATA_EXISTS, Message.bundle("idcard.is.bind"));
						}
					}
					if (userDetailService.updateUserDetail(contract.getUserDetail()) <= 0) {
						throw new RuntimeException();
					}
				}
			}
			return ResultMap.convertMap(ResultCode.CODE_SUCCESS, Message.bundle("update.success"));
		} else {
			return ResultMap.convertMap(ResultCode.CODE_NO_LOGIN, Message.bundle("permission.no.login"));
		}
	}

	@Override
	public Map<String, Object> getContractAgreement(Integer contractId, Contract contract, BindingResult result,
			String token) {
		// 缓存中获取用户数据
		Element element = cache.getCache(Global.CACHE_DOCTOR).get(token);
		if (element != null) {
			@SuppressWarnings("unchecked")
			Map<String, Object> userMap = (Map<String, Object>) element.getObjectValue();
			contract.setId(contractId);
			contract.setCreatorId((Integer) userMap.get("id"));
			// 得到返回数据
			Map<String, Object> dataMap = contractService.getContractAgreement(contract);
			if (dataMap != null && dataMap.size() > 0) {
				// 得到数据总数
				return ResultMap.convertMap(ResultCode.CODE_SUCCESS, dataMap, Message.bundle("query.success"));
			}
			return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("query.empty"));
		} else {
			return ResultMap.convertMap(ResultCode.CODE_NO_LOGIN, Message.bundle("permission.no.login"));
		}
	}

	@Override
	@Transactional
	public Map<String, Object> insertOfflineContract(Contract contract, BindingResult result, String token) {
		// 缓存中获取用户数据
		Element element = cache.getCache(Global.CACHE_DOCTOR).get(token);
		if (element != null) {
			// 判断联系方式是否为空
			User user = contract.getUser();
			if (user == null) {
				return ResultMap.convertMap(ResultCode.CODE_DATA_EXISTS, Message.bundle("user.empty"));
			} else {
				if (user.getPhone() == null || "".equals(user.getPhone())) {
					return ResultMap.convertMap(ResultCode.CODE_DATA_EXISTS, Message.bundle("user.phone.notnull"));
				}
			}
			DoctorGroup doctorGroup = new DoctorGroup();
			doctorGroup.setId(contract.getDoctorGroupId());
			// 检查团队是否存在
			Map<String, Object> doctorGroupMap = doctorGroupService.getDoctorGroupDetail(doctorGroup);
			if (doctorGroupMap == null || doctorGroupMap.size() <= 0) {
				// 数据不存在 返回提示结束流程
				return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("doctorGroup.empty"));
			}
			contract.setContractNumber(
					gdNumberInfoService.getGdnumberForHospital((Integer) doctorGroupMap.get("hospitalId")));
			// 检查用户是否存在
			List<Map<String, Object>> userList = userService.getUserByFiled(user);
			if (userList != null && userList.size() > 0) {
				// 数据存在 返回提示结束流程
				return ResultMap.convertMap(ResultCode.CODE_DATA_EXISTS, Message.bundle("data.exists"));
			}
			UserDetail userDetail = contract.getUserDetail();
			// 判断身份证是否为空
			if (userDetail == null) {
				return ResultMap.convertMap(ResultCode.CODE_DATA_EXISTS, Message.bundle("user.empty"));
			} else {
				if (userDetail.getIdcard() == null || "".equals(userDetail.getIdcard())) {
					return ResultMap.convertMap(ResultCode.CODE_DATA_EXISTS,
							Message.bundle("userDetail.idcard.notnull"));
				}
				if (userDetail.getName() == null || "".equals(userDetail.getName())) {
					return ResultMap.convertMap(ResultCode.CODE_DATA_EXISTS, Message.bundle("userDetail.name.notnull"));
				}
			}
			// 检查用户详情是否存在
			Map<String, Object> userDetailMap = userDetailService.getUserDetailByFild(userDetail);
			if (userDetailMap != null && userDetailMap.size() > 0) {
				// 数据存在 返回提示结束流程
				return ResultMap.convertMap(ResultCode.CODE_DATA_EXISTS, Message.bundle("data.exists"));
			}
			// 设置默认值 注册来源 1 微信
			user.setRegisterSourceId(1);
			// 设置默认值 注册时间
			user.setRegisterDate(new Date());

			/*
			 * // 判断基公卫包 是否存在 ServicePack servicePack = new ServicePack();
			 * servicePack.setId(contract.getServicePackId()); List<Map<String,
			 * Object>> basePackMap =
			 * servicePackService.getServicePackDetailByBase(servicePack); if
			 * (basePackMap == null || basePackMap.size() <= 0) { return
			 * ResultMap.convertMap(ResultCode.CODE_DATA_EXISTS,
			 * Message.bundle("servicePack.error")); }
			 */
			// 添加用户
			if (userService.insertUser(user) > 0) {
				// 设置用户ID
				userDetail.setUserId(user.getId());
				// 计算性别年龄
				userDetail.setBirthday(IdcardUtils.getBirthByIdCard(userDetail.getIdcard()));
				userDetail.setSex(IdcardUtils.getGenderByIdCard(userDetail.getIdcard()));
				if (userDetailService.insertUserDetail(userDetail) > 0) {
					/*
					 * // 新增用户基共卫包 UserServicePack userServicePack = new
					 * UserServicePack();
					 * userServicePack.setServicePackId(contract.
					 * getServicePackId());
					 * userServicePack.setUserId(user.getId());
					 * userServicePack.setCreateTime(new Date());
					 * userServicePack.setExpireTime(DateUtils.dateAfter(new
					 * Date(), 1, Calendar.YEAR)); userServicePack.setPrice(new
					 * BigDecimal(0)); userServicePack.setState(1); if
					 * (userServicePackService.insertUserServicePack(
					 * userServicePack) <= 0) { throw new RuntimeException(); }
					 * // 成功 设置签约对应的用户基共卫记录ID
					 * contract.setUserServicePackId(userServicePack.getId());
					 */
					// 设置签约用户ID
					contract.setUserId(user.getId());
					// 设置签约状态 已签约 2
					contract.setState(2);
					// 设置为线下签约
					contract.setContractSource(2);
					// 设置申请日期
					contract.setCreateDate(new Date());
					// 新增签约信息
					if (contractService.insertContract(contract) > 0) {
						/*新增签约时 调用存储过程,添加地址省、市、区、街道、居委会*/
						Contract contractAddress=new Contract();
						contractAddress.setId(contract.getId());
						contractService.updateContractAddressById(contractAddress);
						
						// 同步档案
						Map<String, Object> param = new HashMap<>();
						param.put("userID", user.getId());
						param.put("cardID", contract.getUserDetail().getIdcard());
						param.put("encodeStr",HisFactory.getInstance().getPermissionTokenString(Global.HIS_ACQUISITIVE));
						// 新增成功 推送微信消息 同步档案 返回提示结束流程
						String text = RESTClient.postForSynchronize(HisConfig.getUrl(), Global.HIS_SYNCHEALTHINFO,param);
						log.info(text);
						return ResultMap.convertMap(ResultCode.CODE_SUCCESS, contract,
								Message.bundle("insert.success"));
					} else {
						throw new RuntimeException();
					}
				} else {
					throw new RuntimeException();
				}
			} else {
				return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("insert.fail"));
			}
		} else {
			return ResultMap.convertMap(ResultCode.CODE_NO_LOGIN, Message.bundle("permission.no.login"));
		}
	}

	@Override
	@Transactional
	public Map<String, Object> updateContractByRenew(Integer contractId, Contract contract, BindingResult result,
			String token) {
		// 设置签约ID
		contract.setId(contractId);
		// 缓存中获取医生数据
		Element element = cache.getCache(Global.CACHE_DOCTOR).get(token);
		if (element != null) {
			@SuppressWarnings("unchecked")
			Map<String, Object> doctorMap = (Map<String, Object>) element.getObjectValue();
			// 查询签约是否存在
			Map<String, Object> contractMap = contractService.getContractDetail(contract);
			if (contractMap == null || contractMap.size() <= 0) {
				return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("contract.empty"));
			}
			// 判断基公卫包 是否存在
			ServicePack servicePack = new ServicePack();
			servicePack.setId(contract.getServicePackId());
			List<Map<String, Object>> basePackMap = servicePackService.getServicePackDetailByBase(servicePack);
			if (basePackMap == null || basePackMap.size() <= 0) {
				return ResultMap.convertMap(ResultCode.CODE_DATA_EXISTS, Message.bundle("servicePack.error"));
			}

			// 判断用户基共卫是否过期
			UserServicePack usp = new UserServicePack();
			usp.setUserId((Integer) contractMap.get("userId"));
			ServicePack sp = new ServicePack();
			sp.setPackageTypeId(1);
			usp.setServicePack(sp);
			List<Map<String, Object>> userServicepackList = userServicePackService.getNoExpireUserServicePackList(usp);
			if (userServicepackList != null && userServicepackList.size() > 0) {
				// 有则不应该购买
				return ResultMap.convertMap(ResultCode.CODE_DATA_EXISTS, Message.bundle("servicePack.exists"));
			}

			// 新增用户基共卫包
			UserServicePack userServicePack = new UserServicePack();
			userServicePack.setServicePackId(contract.getServicePackId());
			userServicePack.setUserId((Integer) contractMap.get("userId"));
			userServicePack.setCreateTime(new Date());
			userServicePack.setExpireTime(DateUtils.getCurrYearLast(new Date()));
			userServicePack.setPrice(new BigDecimal(0));
			userServicePack.setState(1);
			if (userServicePackService.insertUserServicePack(userServicePack) <= 0) {
				throw new RuntimeException();
			}
			// 成功 设置签约对应的用户基共卫记录ID
			contract.setUserServicePackId(userServicePack.getId());
			// 设置数据更新时间
			contract.setUpdateTime(new Date());
			// 执行续约修改操作
			if (contractService.updateContract(contract) > 0) {
				Map<String, Object> param = new HashMap<>();
				param.put("openId", contractMap.get("wechatId"));
				param.put("groupName", contractMap.get("doctorGroupName"));
				RESTClient.post(WechatConfig.getServer(), Global.WECHAT_CONTRACT_SUCCESS, param);
				/*
				 * 新增成功 增加医生购买日志 设置医生ID 设置机构ID
				 */
				UserOrder order = new UserOrder();
				/* 设置订单编号 */
				order.setOrderNum(gdNumberInfoService.getOrderNumber());
				/* 设置机构ID */
				order.setHospitalId((Integer) contractMap.get("hospitalId"));
				/* 设置订单状态 */
				order.setState(1);
				/* 设置订单价格 */
				order.setPrice(userServicePack.getPrice());
				/* 设置医生ID */
				order.setDoctorId((Integer) doctorMap.get("id"));
				/* 设置日期 */
				order.setCreateTime(new Date());
				/* 设置包ID */
				order.setServicePackId(userServicePack.getServicePackId());
				/* 设置用户ID */
				order.setUserId(userServicePack.getUserId());
				/* 设置订单类型 */
				order.setOrderType(1);
				/* 设置其他信息 */
				order.setEvidenceSn(userServicePack.getEvidenceSn());
				order.setEvidenceObjectId(userServicePack.getEvidenceObjectId());
				/* 新增医生购买订单 */
				if (userOrderService.insertUserOrder(order) <= 0) {
					throw new RuntimeException();
				}
				/*新增签约时 调用存储过程,添加地址省、市、区、街道、居委会*/
				contractService.updateContractAddressById(contract);

				/*
				 * // 查询签约是否存在 Map<String, Object> contractUpdateMap =
				 * contractService.getContractDetail(contract); if
				 * (contractUpdateMap == null || contractUpdateMap.size() <= 0)
				 * { return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY,
				 * Message.bundle("contract.empty")); }
				 */
				// 将记录插入到签约历史表
				ContractHistory contractHistory = new ContractHistory();
				contractHistory.setUserId((Integer) contractMap.get("userId"));
				contractHistory.setCreatorId((Integer) contractMap.get("doctorId"));
				contractHistory.setDoctorGroupId((Integer) contractMap.get("doctorGroupId"));
				contractHistory.setState((Integer) contractMap.get("state"));
				contractHistory.setCreateDate((Date) contractMap.get("createDate"));
				contractHistory.setSourceId((Integer) contractMap.get("sourceId"));
				contractHistory.setFirstSendSmsId((Integer) contractMap.get("firstSendSmsId"));
				contractHistory.setContractNumber((String) contractMap.get("contractNumber"));
				contractHistory.setContractSource((Integer) contractMap.get("contractSource"));
				contractHistory.setUserServicePackId(contract.getUserServicePackId());
				contractHistory.setUpdateTime(contract.getUpdateTime());
				// 执行新增 签约历史操作
				if (contractHistoryService.insertContractHistory(contractHistory) > 0) {
					return ResultMap.convertMap(ResultCode.CODE_SUCCESS, Message.bundle("update.success"));
				}
				return ResultMap.convertMap(ResultCode.CODE_SUCCESS, Message.bundle("update.success"));
			}
			throw new RuntimeException();
		} else {
			return ResultMap.convertMap(ResultCode.CODE_NO_LOGIN, Message.bundle("permission.no.login"));
		}
	}
}
