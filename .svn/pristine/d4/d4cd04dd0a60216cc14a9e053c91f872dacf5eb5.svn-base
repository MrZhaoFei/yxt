package org.system.controller.impl.code;

import java.io.IOException;
import java.io.OutputStream;
import java.util.Date;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.core.encrypt.DBConfigurer;
import org.core.encrypt.DESUtil;
import org.core.result.ResultCode;
import org.core.result.ResultMap;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.system.Global;
import org.system.controller.iface.code.IValidCodeController;
import org.system.entity.doctor.Doctor;
import org.system.entity.sms.SmsSendTask;
import org.system.message.Message;
import org.system.service.iface.doctor.IDoctorService;
import org.system.service.iface.sms.ISmsSendTaskService;
import org.utils.code.ValidCodeUtils;
import org.utils.code.VerifyCodeUtils;

import net.sf.ehcache.CacheManager;
import net.sf.ehcache.Element;

@Controller
public class ValidCodeController implements IValidCodeController {
	Logger log = LoggerFactory.getLogger(ValidCodeController.class);

	@Resource
	private IDoctorService doctorService;
	@Resource
	private ISmsSendTaskService smsSendTaskService;
	@Resource
	private CacheManager cache;
	private int width = 120;// 定义图片的width
	private int height = 36;// 定义图片的height
	char[] codeSequence = { 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R',
			'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9' };

	@Override
	public Map<String, Object> getCodeByPhone(String phone) {
		String code = ValidCodeUtils.generateCode(6);
		cache.getCache(Global.CACHE_CODE).put(new Element(phone, code));
		/*发送短信，设置参数*/
		SmsSendTask sms = new SmsSendTask();
		sms.setContent(Message.bundle("valid.code.valid.model", code));
		sms.setTo(phone);
		sms.setCreateTime(new Date());
		sms.setSmsType(1);
		/*执行新增操作*/
		if (smsSendTaskService.insertSms(sms) > 0) {
			return ResultMap.convertMap(ResultCode.CODE_SUCCESS, Message.bundle("valid.code.send.success"));
		}
		return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("valid.code.send.fail"));
	}

	@Override
	public void getCode(HttpSession session, HttpServletResponse response) {
		response.setHeader("Pragma", "no-cache");
		response.setHeader("Cache-Control", "no-cache");
		response.setDateHeader("Expires", 0);
		response.setContentType("image/jpeg");
		String code = ValidCodeUtils.generateCode(6);
		session.setAttribute(Global.SESSION_CODE, code);
		log.info("this is valid code --> {}", code);
		OutputStream out = null;
		try {
			out = response.getOutputStream();
			VerifyCodeUtils.outputImage(width, height, out, code);
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			try {
				out.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}

	@Override
	public Map<String, Object> getCodeByDoctorName(String name) {
		// 封装用户信息
		Doctor doctor = new Doctor();
		doctor.setName(name);
		// 获取对应用户信息
		Map<String, Object> userMap = doctorService.getDoctorByFiled(doctor);
		if (userMap != null && userMap.size() > 0) {
			// 获取手机号
			Object obj = userMap.get("phone");
			if (obj == null || "".equals(obj)) {
				return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("valid.code.send.user.phone.empty"));
			}
			String phone = (String) obj;
			String code = ValidCodeUtils.generateCode(6);
			cache.getCache(Global.CACHE_CODE).put(new Element(name, code));
			/*发送短信，设置参数*/
			SmsSendTask sms = new SmsSendTask();
			sms.setContent(Message.bundle("valid.code.valid.model", code));
			sms.setTo(phone);
			sms.setCreateTime(new Date());
			sms.setSmsType(1);
			/*执行新增操作*/
			if (smsSendTaskService.insertSms(sms) > 0) {
				return ResultMap.convertMap(ResultCode.CODE_SUCCESS, Message.bundle("valid.code.send.success"));
			}
			return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("valid.code.send.fail"));
		}
		return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("valid.code.send.user.empty"));
	}

	@Override
	public Map<String, Object> getCodeByLoginDoctor(String token) {
		// 缓存中获取用户数据
		Element element = cache.getCache(Global.CACHE_DOCTOR).get(token);
		if (element != null) {
			@SuppressWarnings("unchecked")
			Map<String, Object> userMap = (Map<String, Object>) element.getObjectValue();
			Doctor doctor = new Doctor();
			doctor.setId((Integer) userMap.get("id"));
			// 获取对应用户信息
			Map<String, Object> user = doctorService.getDoctorDetil(doctor);
			if (user != null && user.size() > 0) {
				// 获取手机号码
				Object objPhone = userMap.get("phone");
				if (objPhone == null || "".equals(objPhone)) {
					return ResultMap.convertMap(ResultCode.CODE_FAIL,
							Message.bundle("valid.code.send.user.phone.empty"));
				}
				String code = ValidCodeUtils.generateCode(6);
				String phone = (String) objPhone;
				/*发送短信，设置参数*/
				SmsSendTask sms = new SmsSendTask();
				cache.getCache(Global.CACHE_CODE).put(new Element(token, code));
				sms.setContent(Message.bundle("valid.code.valid.model", code));
				sms.setTo(phone);
				sms.setCreateTime(new Date());
				sms.setSmsType(1);
				/*执行新增操作*/
				if (smsSendTaskService.insertSms(sms) > 0) {
					return ResultMap.convertMap(ResultCode.CODE_SUCCESS, Message.bundle("valid.code.send.success"));
				}
				return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("valid.code.send.fail"));
			} else {
				return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("doctor.empty"));
			}
		} else {
			return ResultMap.convertMap(ResultCode.CODE_NO_LOGIN, Message.bundle("permission.no.login"));
		}
	}

	@Override
	public Map<String, Object> getCodeByLoginUser(String token) {
		// 缓存中获取用户数据
		Element element = cache.getCache(Global.CACHE_USER).get(token);
		if (element != null) {
			@SuppressWarnings("unchecked")
			Map<String, Object> userMap = (Map<String, Object>) element.getObjectValue();
			// 获取手机号码
			Object objPhone = userMap.get("phone");
			if (objPhone == null || "".equals(objPhone)) {
				return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("valid.code.send.user.phone.empty"));
			}
			String code = ValidCodeUtils.generateCode(6);
			String phone = (String) objPhone;
			/*发送短信，设置参数*/
			SmsSendTask sms = new SmsSendTask();
			cache.getCache(Global.CACHE_CODE).put(new Element(token, code));
			sms.setContent(Message.bundle("valid.code.valid.model", code));
			sms.setTo(phone);
			sms.setCreateTime(new Date());
			sms.setSmsType(1);
			/*执行新增操作*/
			if (smsSendTaskService.insertSms(sms) > 0) {
				return ResultMap.convertMap(ResultCode.CODE_SUCCESS, Message.bundle("valid.code.send.success"));
			}
			return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("valid.code.send.fail"));
		} else {
			return ResultMap.convertMap(ResultCode.CODE_NO_LOGIN, Message.bundle("permission.no.login"));
		}
	}

	@Override
	public String getCodeByDes(String data) throws Exception {
		if (data == null || "".equals(data)) {
			return "加密内容为空";
		}
		return DESUtil.encrypt(data, DBConfigurer.getKey());
	}
}
