package org.system.controller.impl.chat;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.core.result.ResultCode;
import org.core.result.ResultMap;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.system.Global;
import org.system.controller.iface.chat.IWeixinRecordsController;
import org.system.entity.chat.WeixinRecords;
import org.system.message.Message;
import org.system.service.iface.chat.IWeixinRecordsService;

import net.sf.ehcache.CacheManager;
import net.sf.ehcache.Element;

@Controller
public class WeixinRecordsController implements IWeixinRecordsController {
	Logger log = LoggerFactory.getLogger(WeixinRecordsController.class);
	@Resource
	private IWeixinRecordsService weixinRecordsService;
	@Resource
	private CacheManager cache;

	@Override
	public Map<String, Object> insertWeixinRecordsByUser(WeixinRecords weixinRecords, BindingResult result,
			String token) {
		/* 条件：医生ID必须选择 */
		// 缓存中获取用户数据
		Element element = cache.getCache(Global.CACHE_USER).get(token);
		if (element != null) {
			@SuppressWarnings("unchecked")
			Map<String, Object> userMap = (Map<String, Object>) element.getObjectValue();
			// 设置记录
			weixinRecords.setUserId((Integer) userMap.get("id"));
			weixinRecords.setSendTime(new Date());
			// 设置消息类型 用户-->医生
			weixinRecords.setMessageTo(Global.MSG_SEND_USER_TO_DOCTOR);
			if (weixinRecordsService.insertWeixinRecords(weixinRecords) > 0) {
				return ResultMap.convertMap(ResultCode.CODE_SUCCESS, Message.bundle("insert.success"));
			}
			return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("insert.fail"));
		} else {
			return ResultMap.convertMap(ResultCode.CODE_NO_LOGIN, Message.bundle("permission.no.login"));
		}
	}

	@Override
	public Map<String, Object> insertWeixinRecordsByDoctor(WeixinRecords weixinRecords, BindingResult result,
			String token) {
		/* 条件：用户ID必须选择 */
		// 缓存中获取用户数据
		Element element = cache.getCache(Global.CACHE_DOCTOR).get(token);
		if (element != null) {
			@SuppressWarnings("unchecked")
			Map<String, Object> userMap = (Map<String, Object>) element.getObjectValue();
			// 设置记录
			weixinRecords.setDoctorId((Integer) userMap.get("id"));
			weixinRecords.setSendTime(new Date());
			// 设置消息类型 医生-->用户
			weixinRecords.setMessageTo(Global.MSG_SEND_DOCTOR_TO_USER);
			if (weixinRecordsService.insertWeixinRecords(weixinRecords) > 0) {
				return ResultMap.convertMap(ResultCode.CODE_SUCCESS, Message.bundle("insert.success"));
			}
			return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("insert.fail"));
		} else {
			return ResultMap.convertMap(ResultCode.CODE_NO_LOGIN, Message.bundle("permission.no.login"));
		}
	}

	@Override
	public Map<String, Object> getWeixinRecordsListByUser(WeixinRecords weixinRecords, BindingResult result,
			String token) {
		// 缓存中获取用户数据
		Element element = cache.getCache(Global.CACHE_USER).get(token);
		if (element != null) {
			@SuppressWarnings("unchecked")
			Map<String, Object> userMap = (Map<String, Object>) element.getObjectValue();
			// 设置用户id
			weixinRecords.setUserId((Integer) userMap.get("id"));
			weixinRecords.setMessageTo(Global.MSG_SEND_DOCTOR_TO_USER);
			// 定义返回对象
			Map<String, Object> resultMap = new HashMap<>();
			List<Map<String, Object>> weixinRecordsList = weixinRecordsService.getWeixinRecordsListByUser(weixinRecords);
			if (weixinRecordsList != null && weixinRecordsList.size() > 0) {
				// 得到数据总数
				resultMap.put(Global.DATA_TOTAL, weixinRecords.getTotal());
				resultMap.put(Global.DATA_ROWS, weixinRecordsList);
				return ResultMap.convertMap(ResultCode.CODE_SUCCESS, resultMap, Message.bundle("query.success"));
			}
			return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("query.empty"));
		} else {
			return ResultMap.convertMap(ResultCode.CODE_NO_LOGIN, Message.bundle("permission.no.login"));
		}
	}

	@Override
	public Map<String, Object> getWeixinRecordsListByDoctor(WeixinRecords weixinRecords, BindingResult result,
			String token) {
		// 缓存中获取医生数据
		Element element = cache.getCache(Global.CACHE_DOCTOR).get(token);
		if (element != null) {
			@SuppressWarnings("unchecked")
			Map<String, Object> userMap = (Map<String, Object>) element.getObjectValue();
			// 设置用户id
			weixinRecords.setDoctorId((Integer) userMap.get("id"));
			weixinRecords.setMessageTo(Global.MSG_SEND_USER_TO_DOCTOR);
			// 定义返回对象
			Map<String, Object> resultMap = new HashMap<>();
			List<Map<String, Object>> weixinRecordsList = weixinRecordsService.getWeixinRecordsListByDoctor(weixinRecords);
			if (weixinRecordsList != null && weixinRecordsList.size() > 0) {
				// 得到数据总数
				resultMap.put(Global.DATA_TOTAL, weixinRecords.getTotal());
				resultMap.put(Global.DATA_ROWS, weixinRecordsList);
				return ResultMap.convertMap(ResultCode.CODE_SUCCESS, resultMap, Message.bundle("query.success"));
			}
			return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("query.empty"));
		} else {
			return ResultMap.convertMap(ResultCode.CODE_NO_LOGIN, Message.bundle("permission.no.login"));
		}
	}

	@Override
	public Map<String, Object> getWeixinRecordsDetailByUser(WeixinRecords weixinRecords, BindingResult result,
			String token) {
		// 缓存中获取用户数据
		Element element = cache.getCache(Global.CACHE_USER).get(token);
		if (element != null) {
			@SuppressWarnings("unchecked")
			Map<String, Object> userMap = (Map<String, Object>) element.getObjectValue();
			// 设置用户id
			weixinRecords.setUserId((Integer) userMap.get("id"));
			weixinRecords.setMessageTo(Global.MSG_SEND_DOCTOR_TO_USER);
			// 定义返回对象
			Map<String, Object> resultMap = new HashMap<>();
			List<Map<String, Object>> weixinRecordsList = weixinRecordsService
					.getWeixinRecordsDetailList(weixinRecords);
			if (weixinRecordsList != null && weixinRecordsList.size() > 0) {
				/* 删除对应的数据 */
				// 获取查询到的记录的id
				List<Long> ids = new ArrayList<>();
				for (Map<String, Object> resord : weixinRecordsList) {
					ids.add((Long) resord.get("id"));
				}
				// 执行删除
				if (weixinRecordsService.deleteWeiXinRecordsByQuery(ids) != weixinRecordsList.size()) {
					throw new RuntimeException();
				}
				// 得到数据总数
				resultMap.put(Global.DATA_TOTAL, weixinRecords.getTotal());
				resultMap.put(Global.DATA_ROWS, weixinRecordsList);
				return ResultMap.convertMap(ResultCode.CODE_SUCCESS, resultMap, Message.bundle("query.success"));
			}
			return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("query.empty"));
		} else {
			return ResultMap.convertMap(ResultCode.CODE_NO_LOGIN, Message.bundle("permission.no.login"));
		}
	}

	@Override
	public Map<String, Object> getWeixinRecordsDetailByDoctor(WeixinRecords weixinRecords, BindingResult result,
			String token) {
		// 缓存中获取用户数据
		Element element = cache.getCache(Global.CACHE_DOCTOR).get(token);
		if (element != null) {
			@SuppressWarnings("unchecked")
			Map<String, Object> userMap = (Map<String, Object>) element.getObjectValue();
			// 设置用户id
			weixinRecords.setDoctorId((Integer) userMap.get("id"));
			weixinRecords.setMessageTo(Global.MSG_SEND_USER_TO_DOCTOR);
			// 定义返回对象
			Map<String, Object> resultMap = new HashMap<>();
			List<Map<String, Object>> weixinRecordsList = weixinRecordsService
					.getWeixinRecordsDetailList(weixinRecords);
			if (weixinRecordsList != null && weixinRecordsList.size() > 0) {
				/* 删除对应的数据 */
				// 获取查询到的记录的id
				List<Long> ids = new ArrayList<>();
				for (Map<String, Object> resord : weixinRecordsList) {
					ids.add((Long) resord.get("id"));
				}
				// 执行删除
				if (weixinRecordsService.deleteWeiXinRecordsByQuery(ids) != weixinRecordsList.size()) {
					throw new RuntimeException();
				}
				// 得到数据总数
				resultMap.put(Global.DATA_TOTAL, weixinRecords.getTotal());
				resultMap.put(Global.DATA_ROWS, weixinRecordsList);
				return ResultMap.convertMap(ResultCode.CODE_SUCCESS, resultMap, Message.bundle("query.success"));
			}
			return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("query.empty"));
		} else {
			return ResultMap.convertMap(ResultCode.CODE_NO_LOGIN, Message.bundle("permission.no.login"));
		}
	}
}
