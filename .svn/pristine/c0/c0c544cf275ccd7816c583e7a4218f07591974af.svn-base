package org.system.controller.impl.self;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.core.result.ResultCode;
import org.core.result.ResultMap;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.system.Global;
import org.system.controller.iface.self.ISelfTestQuestionController;
import org.system.entity.self.SelfTestAnswer;
import org.system.entity.self.SelfTestQuestion;
import org.system.entity.self.SelfTestTitle;
import org.system.message.Message;
import org.system.service.iface.self.ISelfTestAnswerService;
import org.system.service.iface.self.ISelfTestQuestionService;
import org.system.service.iface.self.ISelfTestTitleService;

@Controller
public class SelfTestQuestionController implements ISelfTestQuestionController{

	
	Logger log = LoggerFactory.getLogger(SelfTestQuestionController.class);
	@Resource
	private ISelfTestQuestionService selfTestQuestionService;
	@Resource
	private ISelfTestTitleService selfTestTitleService; 
	@Resource
	private  ISelfTestAnswerService selfTestAnswerService;
	
	@Override
	public Map<String, Object> insertSelfTestQuestion(SelfTestQuestion selfTestQuestion, BindingResult result) {
		//判断问卷是否存在
		SelfTestTitle stt=new SelfTestTitle();
		stt.setId(selfTestQuestion.getTitleId());
		System.out.println(selfTestQuestion.getTitleId());
		Map<String, Object> questionMap = selfTestTitleService.getSelfTestTitleDetail(stt);
		if (questionMap == null || questionMap.size() <= 0) {
			return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("selfTestTitle.empty"));
		}
		//检查数据是否重复
		Map<String, Object> stqMap = selfTestQuestionService.getSelfTestQuestionByFiled(selfTestQuestion);
		if (stqMap != null && stqMap.size() > 0) {
			return ResultMap.convertMap(ResultCode.CODE_DATA_EXISTS, Message.bundle("data.exists"));
		}
		// 执行新增操作
		if (selfTestQuestionService.insertSelfTestQuestion(selfTestQuestion) > 0) {
			return ResultMap.convertMap(ResultCode.CODE_SUCCESS, Message.bundle("insert.success"));
		}
		return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("insert.fail"));
	}

	@Override
	public Map<String, Object> updatetSelfTestQuestion(Integer selfTestQuestionId, SelfTestQuestion selfTestQuestion,
			BindingResult result) {
		selfTestQuestion.setId(selfTestQuestionId);
		//判断问卷是否存在
		SelfTestTitle stt=new SelfTestTitle();
		stt.setId(selfTestQuestion.getTitleId());
		if (stt.getId()!=null) {
			Map<String, Object> questionMap = selfTestTitleService.getSelfTestTitleDetail(stt);
			if (questionMap == null || questionMap.size() <= 0) {
				return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("selfTestTitle.empty"));
			}
		}
		//检查数据是否重复
		Map<String, Object> stqMap = selfTestQuestionService.getSelfTestQuestionByFiled(selfTestQuestion);
		if (stqMap != null && stqMap.size() > 0) {
			return ResultMap.convertMap(ResultCode.CODE_DATA_EXISTS, Message.bundle("data.exists"));
		}
		// 执行修改操作
		if (selfTestQuestionService.updateSelfTestQuestion(selfTestQuestion) > 0) {
			return ResultMap.convertMap(ResultCode.CODE_SUCCESS, Message.bundle("update.success"));
		}
		return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("update.fail"));
	}

	@Override
	public Map<String, Object> getSelfTestQuestionList(SelfTestQuestion selfTestQuestion, BindingResult result,HttpServletRequest req) {
		 HttpSession session=req.getSession();
		 if(session.getAttribute("user")!=null){
			 
			 // 定义返回对象
			 Map<String, Object> resultMap = new HashMap<>();
			 List<Map<String, Object>> stqList = selfTestQuestionService.getSelfTestQuestions(selfTestQuestion);
			 if (stqList != null && stqList.size() > 0) {
				 // 得到数据总数
				 resultMap.put(Global.DATA_TOTAL, selfTestQuestion.getTotal());
				 resultMap.put(Global.DATA_ROWS, stqList);
				 return ResultMap.convertMap(ResultCode.CODE_SUCCESS, resultMap, Message.bundle("query.success"));
			 }
			 return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("query.empty"));
		 }else{
			 return ResultMap.convertMap(ResultCode.CODE_NO_LOGIN, Message.bundle("permission.no.login"));
		 }
	}

	@Override
	public Map<String, Object> getSelfTestQuestionDetail(Integer selfTestQuestionId, SelfTestQuestion selfTestQuestion,
			BindingResult result) {
	    // 设置实例的id属性
		selfTestQuestion.setId(selfTestQuestionId);
		Map<String, Object> resultList = selfTestQuestionService.getSelfTestQuestionDetail(selfTestQuestion);
		if (resultList != null && resultList.size() > 0) {
			return ResultMap.convertMap(ResultCode.CODE_SUCCESS, resultList, Message.bundle("query.success"));
		}
		return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("query.empty"));
	}

	
	
	/**
	 * 删除问题   还需要删除答案
	 */
	@Override
	public Map<String, Object> deleteSelfTestQuestion(Integer selfTestQuestionId, SelfTestQuestion selfTestQuestion,
			BindingResult result) {		
		SelfTestAnswer  sta=new SelfTestAnswer();
		selfTestQuestion.setId(selfTestQuestionId);
		List<Map<String, Object>> sttList = selfTestQuestionService.getQuestionOfAnswer(selfTestQuestion);		
		int num=sttList.size();
		for(int i=0;i<num;i++){
			if(sttList.get(i).get("id")!=null){
				// 得到答案中问题的id值
				int ay=(int) sttList.get(i).get("id");
				if(ay!=0){	
				sta.setId(ay);
                if(selfTestAnswerService.deleteSelfTestAnswer(sta)>0){
					}else{
						throw new RuntimeException();
					}
					
				}
			}				
		}
		// 执行修改操作
		if (selfTestQuestionService.deleteSelfTestQuestion(selfTestQuestion) > 0) {
			return ResultMap.convertMap(ResultCode.CODE_SUCCESS, Message.bundle("delete.success"));
		}else{
			throw new RuntimeException();
		}
	}

}
