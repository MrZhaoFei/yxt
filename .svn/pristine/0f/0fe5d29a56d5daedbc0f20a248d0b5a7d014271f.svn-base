package org.system.controller.impl.doctor;

import java.util.Map;

import javax.annotation.Resource;

import org.core.result.ResultCode;
import org.core.result.ResultMap;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.system.Global;
import org.system.controller.iface.doctor.IDoctorDetailController;
import org.system.entity.doctor.DoctorDetail;
import org.system.message.Message;
import org.system.service.iface.doctor.IDoctorDetailService;

import net.sf.ehcache.CacheManager;
import net.sf.ehcache.Element;

@Controller
public class DoctorDetailController  implements IDoctorDetailController{
	
	Logger log=LoggerFactory.getLogger(DoctorDetailController.class);
	
	@Resource
	private CacheManager cache;
	@Resource
	private IDoctorDetailService doctorDetailService; 
	
	@Override
	public Map<String, Object> updateDoctorDetail(DoctorDetail doctorDetail, BindingResult result, String token) {
		// 缓存中获取用户数据
		Element element = cache.getCache(Global.CACHE_DOCTOR).get(token);
		if (element != null) {
			//执行修改操作
			if (doctorDetailService.updateDoctorDetailById(doctorDetail) >0) {
				// 正确移除原来缓存并且更新缓存    photo gootat addressDetail
				@SuppressWarnings("unchecked")
				Map<String, Object> doctorMap = (Map<String, Object>) element.getObjectValue();
				if (doctorDetail.getPhoto()!=null && !("".equals(doctorDetail.getPhoto())) ) {
					cache.getCache(Global.CACHE_DOCTOR).remove(doctorDetail.getPhoto());
					doctorMap.put("photo", doctorDetail.getPhoto());
				}
				if (doctorDetail.getGootat()!=null && !("".equals(doctorDetail.getGootat())) ) {
					cache.getCache(Global.CACHE_DOCTOR).remove(doctorDetail.getGootat());
					doctorMap.put("gootat", doctorDetail.getGootat());
				}
				if (doctorDetail.getAddressDetail()!=null && !("".equals(doctorDetail.getAddressDetail())) ) {
					cache.getCache(Global.CACHE_DOCTOR).remove(doctorDetail.getAddressDetail());
					doctorMap.put("addressDetail", doctorDetail.getAddressDetail());
				}
				cache.getCache(Global.CACHE_DOCTOR).put(new Element(token, doctorMap));
				return ResultMap.convertMap(ResultCode.CODE_SUCCESS,Message.bundle("update.success"));
			}else {
				return ResultMap.convertMap(ResultCode.CODE_FAIL,Message.bundle("update.fail"));
			}
		} else {
			return ResultMap.convertMap(ResultCode.CODE_NO_LOGIN, Message.bundle("permission.no.login"));
		}
	}

}
