package org.system.controller.impl.file;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.core.result.ResultCode;
import org.core.result.ResultMap;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.multipart.MultipartFile;
import org.system.controller.iface.file.IFileController;
import org.system.message.Message;

@Controller
public class FileController implements IFileController {
	Logger log = LoggerFactory.getLogger(FileController.class);

	@Override
	public Map<String, Object> uploadFile(MultipartFile[] files, HttpServletRequest request) {
		String path = request.getSession().getServletContext().getRealPath("upload");
		List<Map<String, Object>> fileList = new ArrayList<>();
		// 判断file数组不能为空并且长度大于0
		if (files != null && files.length > 0) {
			// 循环获取file数组中得文件
			for (int i = 0; i < files.length; i++) {
				MultipartFile file = files[i];
				// 保存文件
				Map<String, Object> temp = new HashMap<>();
				temp.put("path", saveFile(file, path));
				fileList.add(temp);
			}
		}
		return ResultMap.convertMap(ResultCode.CODE_SUCCESS, fileList, Message.bundle("insert.success"));
	}

	private String saveFile(MultipartFile file, String path) {
		if (!file.isEmpty()) {
			try {
				String tempName=file.getOriginalFilename();
				String fileName = System.currentTimeMillis() +tempName.substring(tempName.lastIndexOf("."));
				// 转存文件
				File temp = new File(path, fileName);
				if (!temp.exists()) {
					temp.mkdirs();
				}
				file.transferTo(temp);
				return "/upload/" + fileName;
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		return null;
	}

	@Override
	public ResponseEntity<byte[]> downloadFile(String path, HttpServletRequest request) {
		HttpHeaders headers = new HttpHeaders();
		byte[] body = null;
		HttpStatus httpState = HttpStatus.NOT_FOUND;
		File file = new File(request.getServletContext().getRealPath("/") + path);
		if (file.exists() && file.isFile()) {

			InputStream is;
			try {
				is = new FileInputStream(file);
				body = new byte[is.available()];
				is.read(body);
				is.close();
				headers.add("Content-Length", "" + body.length);
				headers.add("Content-Disposition", "attachment;filename=" + path.substring(path.lastIndexOf("/") + 1));
				httpState = HttpStatus.OK;
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		ResponseEntity<byte[]> entity = new ResponseEntity<>(body, headers, httpState);
		return entity;
	}
}
