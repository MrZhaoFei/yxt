package org.system.controller.impl.doctor;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.core.result.ResultCode;
import org.core.result.ResultMap;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.system.Global;
import org.system.controller.iface.doctor.IDoctorGroupController;
import org.system.entity.address.Address;
import org.system.entity.doctor.DoctorDoctorGroup;
import org.system.entity.doctor.DoctorGroup;
import org.system.message.Message;
import org.system.service.iface.doctor.IDoctorDoctorGroupService;
import org.system.service.iface.doctor.IDoctorGroupService;
import org.utils.calc.GeographyScope;

import net.sf.ehcache.CacheManager;
import net.sf.ehcache.Element;

@Controller
public class DoctorGroupController implements IDoctorGroupController {
	Logger log = LoggerFactory.getLogger(DoctorGroupController.class);
	@Resource
	private IDoctorGroupService doctorGroupService;
	@Resource
	private CacheManager cache;
	@Resource
	private IDoctorDoctorGroupService doctorDoctorGroupService;

	@Override
	public Map<String, Object> getDoctorGroupList(DoctorGroup doctorGroup, BindingResult result, Address address) {
		if (address.getLatitude() != null && address.getLongitude() != null && address.getRaidus() != null) {
			doctorGroup.setGeography(
					GeographyScope.getAround(address.getLatitude(), address.getLongitude(), address.getRaidus()));
		}
		// 查询团队信息
		Map<String, Object> resultMap = new HashMap<>();
		doctorGroup.setDoctorGroupTypeId(1);
		// 查询数据主体
		List<Map<String, Object>> dataList = doctorGroupService.getDoctorGroupList(doctorGroup);
		if (dataList != null && dataList.size() > 0) {
			// 得到总数
			resultMap.put(Global.DATA_TOTAL, doctorGroup.getTotal());
			resultMap.put(Global.DATA_ROWS, dataList);
			return ResultMap.convertMap(ResultCode.CODE_SUCCESS, resultMap, Message.bundle("query.success"));
		}
		return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("query.empty"));
	}

	@Override
	public Map<String, Object> getDoctorGroupDetail(Integer doctorGroupId, DoctorGroup doctorGroup) {
		// 设置团队id
		doctorGroup.setId(doctorGroupId);
		// 查询团队详情
		Map<String, Object> resultMap = doctorGroupService.getDoctorGroupDetail(doctorGroup);
		if (resultMap != null && resultMap.size() > 0) {
			return ResultMap.convertMap(ResultCode.CODE_SUCCESS, resultMap, Message.bundle("query.success"));
		}
		return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("query.empty"));
	}

	@Override
	public Map<String, Object> getDoctorGroupDetailByDoctor(DoctorGroup doctorGroup, String token) {

		// 缓存中获取用户数据
		Element element = cache.getCache(Global.CACHE_DOCTOR).get(token);
		if (element != null) {
			@SuppressWarnings("unchecked")
			Map<String, Object> userMap = (Map<String, Object>) element.getObjectValue();
			doctorGroup.setDoctorId((Integer) userMap.get("id"));
			// 查询团队信息
			Map<String, Object> resultMap = new HashMap<>();
			// 查询数据主体
			List<Map<String, Object>> dataList = doctorGroupService.getDoctorGroupList(doctorGroup);
			if (dataList != null && dataList.size() > 0) {
				// 得到总数
				resultMap.put(Global.DATA_TOTAL, doctorGroup.getTotal());
				resultMap.put(Global.DATA_ROWS, dataList);
				return ResultMap.convertMap(ResultCode.CODE_SUCCESS, resultMap, Message.bundle("query.success"));
			}
			return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("query.empty"));
		} else {
			return ResultMap.convertMap(ResultCode.CODE_NO_LOGIN, Message.bundle("permission.no.login"));
		}
	}

	@Override
	public Map<String, Object> getDoctorGroupDoctorList(Integer doctorGroupId, DoctorGroup doctorGroup,
			BindingResult result) {
		// TODO 这里以后会加入权限判断
		doctorGroup.setId(doctorGroupId);
		// 查询团队信息
		Map<String, Object> resultMap = new HashMap<>();
		// 查询数据主体
		List<Map<String, Object>> dataList = doctorGroupService.getDoctorGroupDoctorList(doctorGroup);
		if (dataList != null && dataList.size() > 0) {
			// 得到总数
			resultMap.put(Global.DATA_TOTAL, doctorGroup.getTotal());
			resultMap.put(Global.DATA_ROWS, dataList);
			return ResultMap.convertMap(ResultCode.CODE_SUCCESS, resultMap, Message.bundle("query.success"));
		}
		return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("query.empty"));
	}

	@Override
	public Map<String, Object> updateDoctorGroup(Integer doctorGroupId, DoctorGroup doctorGroup,
			BindingResult result,String token) {
		//设置主键ID
		doctorGroup.setId(doctorGroupId);
		// 缓存中获取用户数据
		Element element = cache.getCache(Global.CACHE_DOCTOR).get(token);
		if (element != null) {
			@SuppressWarnings("unchecked")
			Map<String, Object> doctorMap = (Map<String, Object>) element.getObjectValue();
			DoctorDoctorGroup doctorDoctorGroup=new DoctorDoctorGroup();
			doctorDoctorGroup.setDoctorId((Integer)doctorMap.get("id"));
			doctorDoctorGroup.setDoctorGroupId(doctorGroupId);
			//判断登录医生 是否为团队长
			Map<String, Object> doctorDoctorGroupMap=doctorDoctorGroupService.getDoctorDoctorGroupDetail(doctorDoctorGroup);
			if (doctorDoctorGroupMap == null || doctorDoctorGroupMap.size() <= 0) {
				return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("query.empty"));
			}
			//获取医生 角色ID
			Integer roleId=(Integer)doctorDoctorGroupMap.get("roleId");
			//角色ID为1 团队长可以进行操作
			if (roleId==1) {
				//设置团队ID
				if (doctorGroupService.updateDoctorGroup(doctorGroup) >0) {
					return ResultMap.convertMap(ResultCode.CODE_SUCCESS, Message.bundle("update.success"));
				}
				return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("update.fail"));
			}
			return ResultMap.convertMap(ResultCode.CODE_PERMISSION_ERROR, Message.bundle("permission.no.permission"));
		} else {
			return ResultMap.convertMap(ResultCode.CODE_NO_LOGIN, Message.bundle("permission.no.login"));
		}
	}

	@Override
	public Map<String, Object> getExpertDoctorGroupList(DoctorGroup doctorGroup, BindingResult result,
			Address address) {
		if (address.getLatitude() != null && address.getLongitude() != null && address.getRaidus() != null) {
			doctorGroup.setGeography(
					GeographyScope.getAround(address.getLatitude(), address.getLongitude(), address.getRaidus()));
		}
		// 查询团队信息
		Map<String, Object> resultMap = new HashMap<>();
		doctorGroup.setDoctorGroupTypeId(2);
		// 查询数据主体
		List<Map<String, Object>> dataList = doctorGroupService.getExpertGroupDoctorList(doctorGroup);
		if (dataList != null && dataList.size() > 0) {
			// 得到总数
			resultMap.put(Global.DATA_TOTAL, doctorGroup.getTotal());
			resultMap.put(Global.DATA_ROWS, dataList);
			return ResultMap.convertMap(ResultCode.CODE_SUCCESS, resultMap, Message.bundle("query.success"));
		}
		return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("query.empty"));
	}

}
