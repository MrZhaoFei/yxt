package org.system.controller.impl;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.core.result.ResultCode;
import org.core.result.ResultMap;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.system.Global;
import org.system.controller.iface.IServicePackController;
import org.system.entity.service.ServicePack;
import org.system.message.Message;
import org.system.service.iface.service.IServicePackService;

@Controller
public class ServicePackController implements IServicePackController {
      
	Logger log = LoggerFactory.getLogger(ServicePackController.class);
	@Resource
	private IServicePackService servicePackService;
	
	/**
	 * 获取基础产品列表
	 */
	@Override
	public Map<String, Object> getServicePackList(ServicePack servicePack, BindingResult result,HttpServletRequest req) {
		 HttpSession session=req.getSession();
		 if(session.getAttribute("user")!=null){
			 Map<String, Object> resultMap = new HashMap<>();
			 //得到返回数据
			 List<Map<String, Object>> dataList = servicePackService.getServicePackList(servicePack);	  
			 if (dataList != null && dataList.size() > 0) {
				 //得到数据总数
				 resultMap.put(Global.DATA_TOTAL, servicePack.getTotal());
				 resultMap.put(Global.DATA_ROWS, dataList);
				 return ResultMap.convertMap(ResultCode.CODE_SUCCESS, resultMap, Message.bundle("query.success"));
			 }
			 return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("query.empty"));
		 }else{
			 return ResultMap.convertMap(ResultCode.CODE_NO_LOGIN, Message.bundle("permission.no.login"));
		 }
	}
	
	/**
	 * 新增
	 */
	@Override
	public Map<String, Object> insertServicePack(ServicePack servicePack, BindingResult result) {
	  	// 检查数据是否存在
		Map<String, Object> dataMap = servicePackService.getServicePackByFild(servicePack);
		if (dataMap != null && dataMap.size() > 0) {
			return ResultMap.convertMap(ResultCode.CODE_DATA_EXISTS, Message.bundle("data.exists"));
		}
		if (servicePackService.insertServicePack(servicePack)> 0) {
			// 新增成功
			return ResultMap.convertMap(ResultCode.CODE_SUCCESS, Message.bundle("insert.success"));
		}
		// 新增失败
		return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("insert.fail"));
	}

    
	/**
	 * 修改
	 */
	@Override
	public Map<String, Object> updateServicePack(Integer id, ServicePack servicePack, BindingResult result) {
		 // 设置实例的id属性
		servicePack.setId(id);
		// 查询 基础产品包是否被用户购买 （可以修改图片，状态，描述）
		int num = servicePackService.getIsBuyByUser(servicePack);
		if(num>0){			
		    if(servicePackService.updatePic(servicePack)>0){
		    	return ResultMap.convertMap(ResultCode.CODE_SUCCESS, Message.bundle("update.success"));
		    }else{
		    	return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("service_pack.notUpdate"));
		    }
		}else {
			//检查数据是否存在
			Map<String, Object> dataMap = servicePackService.getServicePackByFild(servicePack);
			if (dataMap != null && dataMap.size() > 0) {
				// 数据已存在
				return ResultMap.convertMap(ResultCode.CODE_DATA_EXISTS, Message.bundle("data.exists"));
			}
			// 设置实例的id属性
			if (servicePackService.updateServicePack(servicePack)> 0) {
				
				return ResultMap.convertMap(ResultCode.CODE_SUCCESS, Message.bundle("update.success"));
			}
			return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("update.fail"));
		}
		
	}

	/**
	 * 删除数据
	 */
	@Override
	public Map<String, Object> deleteServicePack(Integer id, ServicePack servicePack) {
		 // 设置实例的id属性
		servicePack.setId(id);	
		 //得到返回数据    查看基础服务包是否在产品发布管理里   存在则不删除   
		 List<Map<String, Object>> dataList = servicePackService.getServicePackCondition(servicePack);		
		 if(dataList.get(0)!=null){   			
			 return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("service_pack.notDelete")); 
		 }
		Map<String, Object> resultList = servicePackService.getServicePackDetail(servicePack);
		if (resultList == null || resultList.size() <= 0) {
			return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY,Message.bundle("servicePack.empty"));
		}
		//执行删除
		if (servicePackService.deleteServicePack(servicePack) >0) {
			return ResultMap.convertMap(ResultCode.CODE_SUCCESS,Message.bundle("delete.success"));
		}
		return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("delete.fail"));
	}

	
	/**
	 * 获取单个详细信息
	 */
	@Override
	public Map<String, Object> getServicePackDetail(Integer id, ServicePack servicePack) {
		// 设置实例的id属性
		servicePack.setId(id);
		Map<String, Object> resultList = servicePackService.getServicePackDetail(servicePack);
		if (resultList != null && resultList.size() > 0) {
			return ResultMap.convertMap(ResultCode.CODE_SUCCESS, resultList, Message.bundle("query.success"));
			}
			return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("query.empty"));
	}

	@Override
	public int getIsBuyByUser(Integer id, ServicePack servicePack) {
		servicePack.setId(id);
		int num = servicePackService.getIsBuyByUser(servicePack);
		return num;
	}
}
