package org.system.service.impl.service;

import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Map;

import javax.annotation.Resource;

import org.springframework.stereotype.Service;
import org.system.entity.service.GdNumberInfo;
import org.system.mapper.service.GdNumberInfoMapper;
import org.system.service.iface.service.IGdNumberInfoService;
import org.utils.calc.DateUtils;
import org.utils.service.ServiceEnum;

@Service
public class GdNumberInfoService implements IGdNumberInfoService {

	static NumberFormat formatter = NumberFormat.getNumberInstance();
	@Resource
	private GdNumberInfoMapper mapper;

	@Override
	public synchronized String getGdnumberForDay(ServiceEnum serviceEnum, Date time) {
		/* 设置今天的日期 */
		GdNumberInfo gd = new GdNumberInfo();
		gd.setId(serviceEnum.getValue());
		gd.setLastDate(time);
		gd.setPrefix(serviceEnum.getPrefix());
		/* 获取对应流水号 */
		Map<String, Object> gdMap = mapper.queryOne(gd);
		if (gdMap == null || gdMap.size() <= 0) {
			/* 不存在则新增数据 */
			gd.setGdCurrentCount(1);
			if (mapper.insert(gd) > 0) {
				return format(gd.getPrefix(), time, 1);
			} else {
				throw new RuntimeException();
			}
		} else {
			/* 存在先比较时间是否同天 */
			if (DateUtils.areSameDay(new Date(), (Date) gdMap.get("date"))) {
				// 同天 获取数据库流水号加一并回写
				int number = (int) gdMap.get("number") + 1;
				gd.setGdCurrentCount(number);
				// 执行修改
				if (mapper.update(gd) <= 0) {
					throw new RuntimeException();
				}
				return format(gd.getPrefix(), time, number);
			} else {
				gd.setGdCurrentCount(1);
				/* 不同天 设置流水号为一并回写 */
				/* 执行修改 */
				if (mapper.update(gd) <= 0) {
					throw new RuntimeException();
				}
				return format(gd.getPrefix(), time, 1);
			}
		}
	}

	public static String format(String prefix, Date time, Integer number) {
		SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");
		formatter.setMinimumIntegerDigits(8);
		formatter.setGroupingUsed(false);
		return prefix + sdf.format(time) + formatter.format(number);
	}

	@Override
	public synchronized String getGdnumberForHospital(Integer hosiptalId) {
		Map<String, String> result = mapper.getGdnumberForHospital(hosiptalId);
		return result.get("number");
	}

	@Override
	public String getOrderNumber() {
		Map<String, String> result = mapper.getOrderNumber();
		return result.get("number");
	}

}
