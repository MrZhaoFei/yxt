package org.system.controller.impl.user.healthInfo;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.core.result.ResultCode;
import org.core.result.ResultMap;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.BindingResult;
import org.store.wechat.WechatConfig;
import org.system.Global;
import org.system.controller.iface.user.healthInfo.IHealthInfoController;
import org.system.entity.contract.Contract;
import org.system.entity.sms.SmsSendTask;
import org.system.entity.user.User;
import org.system.entity.user.healthinfo.HealthInfo;
import org.system.message.Message;
import org.system.service.iface.contract.IContractService;
import org.system.service.iface.service.IGdNumberInfoService;
import org.system.service.iface.sms.ISmsSendTaskService;
import org.system.service.iface.user.IUserService;
import org.system.service.iface.user.healthinfo.IHealthInfoService;
import org.utils.spring.RESTClient;

import net.sf.ehcache.CacheManager;
import net.sf.ehcache.Element;

@Controller
public class HealthInfoController implements IHealthInfoController {
	Logger log = LoggerFactory.getLogger(HealthInfoController.class);
	@Resource
	private CacheManager cache;
	@Resource
	private IUserService userService;
	@Resource
	private IHealthInfoService healthInfoService;
	@Resource
	private IGdNumberInfoService gdNumberInfoService;
	@Resource
	private IContractService contractService;
	@Resource
	private ISmsSendTaskService smsSendTaskService;

	@Override
	@Transactional
	public Map<String, Object> insertHealthInfo(HealthInfo healthInfo, BindingResult result, String token) {
		// 缓存中获取医生数据
		Element element = cache.getCache(Global.CACHE_DOCTOR).get(token);
		if (element != null) {
			@SuppressWarnings("unchecked")
			Map<String, Object> doctorMap = (Map<String, Object>) element.getObjectValue();
			// 判断用户是否存在
			User user = new User();
			user.setId(healthInfo.getUserId());
			Map<String, Object> userMap = userService.getUserDetail(user);
			if (userMap == null || userMap.size() <= 0) {
				return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("user.empty"));
			}
			/*判断健康档案信息是否存在*/
			Map<String, Object> healthInfoMap = healthInfoService.getHealthInfoByFild(healthInfo);
			if (healthInfoMap != null && healthInfoMap.size() > 0) {
				// 数据存在 返回提示结束流程
				return ResultMap.convertMap(ResultCode.CODE_DATA_EXISTS, Message.bundle("data.exists"));
			}
			/*查询签约信息，获取医疗机构编码*/
			Contract contractHospital = new Contract();
			contractHospital.setUserId(healthInfo.getUserId());
			Map<String, Object> contractHospitalMap = contractService.getContractHospitalByUserId(contractHospital);
			if (contractHospitalMap == null || contractHospitalMap.size() <= 0) {
				return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("contract.empty"));
			}
			// 设置健康档案
			// healthInfo.setJkdabh(gdNumberInfoService.getGdnumberForDay(ServiceEnum.JKDA,
			// new Date()));
			// 设置医疗机构编码，用户签约所在机构
			healthInfo.setYljgbm((String) contractHospitalMap.get("codeValue"));
			// 设置默认值 建档日期
			healthInfo.setJdrq(new Date());
			// 设置默认值 数据更新时间为当前时间
			healthInfo.setUpdateTime(new Date());
			//设置档案梳理操作人为当前医生
			healthInfo.setLastDoctorId((Integer)doctorMap.get("id"));
			// 执行新增操作
			if (healthInfoService.insertHealthInfo(healthInfo) > 0) {
				// 新增成功修改签约信息的状态
				Contract contract = healthInfo.getContract();
				if (contract == null || contract.getId() == null) {
					return ResultMap.convertMap(ResultCode.CODE_PARAMETER_ERROR, Message.bundle("contract.id.empty"));
				} else {
					// 查询签约信息是否存在
					Map<String, Object> contractMap = contractService.getContractDetail(contract);
					if (contractMap == null || contractMap.size() <= 0) {
						return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("contract.empty"));
					} else if ((int) contractMap.get("userId") != healthInfo.getUserId()) {
						return ResultMap.convertMap(ResultCode.CODE_PERMISSION_ERROR,
								Message.bundle("record.is.outside.user"));
					}
					/* 设置签约状态为已完成 */
					contract.setState(Global.CONTRACT_STATE_SUCCESS);
					if (contractService.updateContract(contract) <= 0) {
						throw new RuntimeException();
					}
					/* 推送微信和短信 */
					Map<String, Object> param = new HashMap<>();
					param.put("openId", contractMap.get("wechatId"));
					param.put("groupName", contractMap.get("doctorGroupName"));
					param.put("doctorName", contractMap.get("doctorName"));
					param.put("packageName", contractMap.get("servicePackName"));
					RESTClient.post(WechatConfig.getServer(), Global.WECHAT_CONTRACT_ARRANGEFILE, param);

					SmsSendTask sms = new SmsSendTask();
					sms.setFromDoctorId((Integer) doctorMap.get("id"));
					sms.setFrom((String) doctorMap.get("phone"));
					sms.setToUserId((Integer) contractMap.get("userId"));
					sms.setTo((String) contractMap.get("phone"));
					sms.setCreateTime(new Date());
					sms.setSmsType(0);
					sms.setContent(Message.bundle("contract.complete.sms.content", contractMap.get("hospitalName"),
							contractMap.get("doctorGroupName"), contractMap.get("doctorName"),contractMap.get("servicePackName"),
							Message.bundle("platform.telephone")));
					if (smsSendTaskService.insertSms(sms) <= 0) {
						throw new RuntimeException();
					}
				}
				return ResultMap.convertMap(ResultCode.CODE_SUCCESS, healthInfo, Message.bundle("insert.success"));
			}
			return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("insert.fail"));
		} else {
			return ResultMap.convertMap(ResultCode.CODE_NO_LOGIN, Message.bundle("permission.no.login"));
		}
	}

	@Override
	@Transactional
	public Map<String, Object> updatetHealthInfo(Integer healthInfoId, HealthInfo healthInfo, BindingResult result,
			String token) {
		healthInfo.setId(Long.valueOf(healthInfoId));
		// 缓存中获取医生数据
		Element element = cache.getCache(Global.CACHE_DOCTOR).get(token);
		if (element != null) {
			@SuppressWarnings("unchecked")
			Map<String, Object> doctorMap = (Map<String, Object>) element.getObjectValue();
			// 设置默认值 数据更新时间
			healthInfo.setUpdateTime(new Date());
			Map<String, Object> healthInfoMap = healthInfoService.getHealthInfoDetail(healthInfo);
			if (healthInfoMap == null || healthInfoMap.size() <= 0) {
				// 数据不存在 返回提示结束流程
				return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("healthInfo.empty"));
			}
			//设置档案梳理操作人为当前医生
			healthInfo.setLastDoctorId((Integer)doctorMap.get("id"));
			// 执行修改操作
			if (healthInfoService.updatetHealthInfo(healthInfo) > 0) {
				// 修改成功修改签约信息的状态
				Contract contract = new Contract();
				contract.setUserId((Integer) (healthInfoMap.get("userId")));
					// 查询签约信息是否存在
					Map<String, Object> contractMap = contractService.getContractDetail(contract);
					if (contractMap == null || contractMap.size() <= 0) {
						return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("contract.empty"));
					} 
					if ((int) contractMap.get("state") == Global.CONTRACT_STATE_SURE) {
						contract.setState(Global.CONTRACT_STATE_SUCCESS);
						if (contractService.updateContract(contract) <= 0) {
							throw new RuntimeException();
						}
						/* 推送微信和短信 */
						Map<String, Object> param = new HashMap<>();
						param.put("openId", contractMap.get("wechatId"));
						param.put("groupName", contractMap.get("doctorGroupName"));
						param.put("doctorName",  contractMap.get("doctorName"));
						param.put("packageName", contractMap.get("servicePackName"));
						RESTClient.post(WechatConfig.getServer(), Global.WECHAT_CONTRACT_ARRANGEFILE, param);

						SmsSendTask sms = new SmsSendTask();
						sms.setFromDoctorId((Integer) doctorMap.get("id"));
						sms.setFrom((String) doctorMap.get("phone"));
						sms.setToUserId((Integer) contractMap.get("userId"));
						sms.setTo((String) contractMap.get("phone"));
						sms.setCreateTime(new Date());
						sms.setSmsType(0);
						sms.setContent(Message.bundle("contract.complete.sms.content", contractMap.get("hospitalName"),
								contractMap.get("doctorGroupName"), contractMap.get("doctorName"),contractMap.get("servicePackName"),
								Message.bundle("platform.telephone")));
						if (smsSendTaskService.insertSms(sms) <= 0) {
							throw new RuntimeException();
						}
				}
				return ResultMap.convertMap(ResultCode.CODE_SUCCESS, Message.bundle("update.success"));
			}
			return ResultMap.convertMap(ResultCode.CODE_FAIL, Message.bundle("update.fail"));
		} else {
			return ResultMap.convertMap(ResultCode.CODE_NO_LOGIN, Message.bundle("permission.no.login"));
		}
	}

	@Override
	public Map<String, Object> gethealthInfoList(HealthInfo healthInfo, BindingResult result, String token) {
		// 缓存中获取用户数据
		Element element = cache.getCache(Global.CACHE_DOCTOR).get(token);
		if (element != null) {
			// 定义返回对象
			Map<String, Object> resultMap = new HashMap<>();
			List<Map<String, Object>> healthInfoList = healthInfoService.getHealthInfoList(healthInfo);
			if (healthInfoList != null && healthInfoList.size() > 0) {
				// 得到数据总数
				resultMap.put(Global.DATA_TOTAL, healthInfo.getTotal());
				resultMap.put(Global.DATA_ROWS, healthInfoList);
				return ResultMap.convertMap(ResultCode.CODE_SUCCESS, resultMap, Message.bundle("query.success"));
			}
			return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("query.empty"));
		} else {
			return ResultMap.convertMap(ResultCode.CODE_NO_LOGIN, Message.bundle("permission.no.login"));
		}
	}

	@Override
	public Map<String, Object> gethealthInfoListByUser(HealthInfo healthInfo, BindingResult result, String token) {
		// 缓存中获取用户数据
		Element element = cache.getCache(Global.CACHE_USER).get(token);
		if (element != null) {
			@SuppressWarnings("unchecked")
			Map<String, Object> userMap = (Map<String, Object>) element.getObjectValue();
			healthInfo.setUserId((Integer) userMap.get("id"));
			// 查询用户详情 获取 档案密码
			User user = new User();
			user.setId(healthInfo.getUserId());
			Map<String, Object> userDetailMap = userService.getUserDetail(user);
			if (userDetailMap == null || userDetailMap.size() <= 0) {
				return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("user.empty"));
			}
			// 获取档案密码
			String docPwd = (String) userDetailMap.get("docPwd");

			User healthUser = healthInfo.getUser();
			if (healthUser != null) {
				if (healthUser.getWxDocPwd() == null) {
					return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("wxDocPwd.notnull.valid"));
				}
				if (!docPwd.equals(healthUser.getWxDocPwd())) {
					return ResultMap.convertMap(ResultCode.CODE_PERMISSION_ERROR,
							Message.bundle("permission.no.permission"));
				}
			} else {
				return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("user.empty"));
			}
			// 定义返回对象
			Map<String, Object> resultMap = new HashMap<>();
			List<Map<String, Object>> healthInfoList = healthInfoService.getHealthInfoList(healthInfo);
			if (healthInfoList != null && healthInfoList.size() > 0) {
				// 得到数据总数
				resultMap.put(Global.DATA_TOTAL, healthInfo.getTotal());
				resultMap.put(Global.DATA_ROWS, healthInfoList);
				return ResultMap.convertMap(ResultCode.CODE_SUCCESS, resultMap, Message.bundle("query.success"));
			}
			return ResultMap.convertMap(ResultCode.CODE_DATA_EMPTY, Message.bundle("query.empty"));
		} else {
			return ResultMap.convertMap(ResultCode.CODE_NO_LOGIN, Message.bundle("permission.no.login"));
		}
	}
}
